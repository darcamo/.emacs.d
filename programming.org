#+TITLE:Emacs Programming Languages Configurations
#+AUTHOR:Darlan Cavalcante Moreira
#+EMAIL:darcamo@gmail.com
#+tags: Programming


* General Programming                                                 :FontLock:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx General Programming xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

  Adicione uma chamada a função abaixo nos hooks das linguagens que interessar.
  #+begin_src emacs-lisp
    ;; Pegue em https://github.com/alexott/emacs-configs/blob/master/rc/emacs-rc-common-hooks.el#LNaN
    (defun alexott/show-prog-keywords ()
      ;; highlight additional keywords
      (font-lock-add-keywords
       nil '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))
      (font-lock-add-keywords
       nil '(("\\<\\(DONE\\):" 1 font-lock-doc-face t)))
      )
  #+end_src
*** Flycheck                                                          :flycheck:
***** Activates flycheck globally
      #+begin_src emacs-lisp
        (add-hook 'after-init-hook #'global-flycheck-mode)
      
        ;; flycheck uses the general next-error and previous-error for navigating.
        ;;(global-set-key [f5] 'next-error)
        ;;(global-set-key [C-f5] 'previous-error)
      #+end_src
***** Common flycheck configuration
      #+begin_src emacs-lisp
        (setq flycheck-display-errors-delay 0.1)
      #+end_src
***** Disable flycheck in a few modes when I don't want it
      #+begin_src emacs-lisp
        ;; Disable flycheck in some modes. It does not work anyway in these modes
        ;; and it will just still the "C-c !" keybinding used in these modes.
        (setq flycheck-global-modes '(not org-mode matlab-mode))
      #+end_src
***** Create an Hydra for flyckeck
      #+begin_src emacs-lisp
        (defhydra hydra-flychecker (:hint nil)
          "
          Flycheck:
                _j_: (n) next error       _c_: flycheck-buffer    _q_uit
                _k_: (p) previous error   _C_: flycheck-clear    
                ^ ^                   
                _s_: Select checker     _?_: Describe checker
                _l_: List errors        _v_: Verify setup       _V_: Version
              "
          ("j" flycheck-next-error)
          ("k" flycheck-previous-error)
          ("n" flycheck-next-error)
          ("p" flycheck-previous-error)

          ("s" flycheck-select-checker)
          ("l" flycheck-list-errors :color blue)

          ("c" flycheck-buffer)
          ("C" flycheck-clear)

          ("?" flycheck-describe-checker :color blue)
          ("v" flycheck-verify-setup :color blue)

          ("q" nil :color blue)
          ("V" flycheck-version)
          )
      #+end_src
*** COMMENT Flycheck-pos-tip
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      (eval-after-load 'flycheck
        '(custom-set-variables
         '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))
    #+end_src
* ECB
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Eemacs Code Browser (ECB) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

  Here we have the common configuration for the Emacs Code Browser.
  
  #+begin_src emacs-lisp
    (with-eval-after-load "ecb"
      (setq ecb-tip-of-the-day nil)
      (setq ecb-compile-window-height 10)
      ;;(setq ecb-auto-activate t)  ;;This should only be true if you always want to run
      (setq ecb-layout-name "left11")
      ;;(setq ecb-primary-secondary-mouse-buttons (quote mouse-1–mouse-2))
      ;;(setq ecb-source-path (quote ("~/")))
      )
  #+end_src

* Emacs Lisp
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Emacs Lisp xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Outline Support                                                       :Hook:
    #+begin_src emacs-lisp
      (add-hook 'emacs-lisp-mode-hook
                (lambda () (darlan/set-up-outline-minor-mode "\\((\\|;;;\\)")))
    #+end_src
*** Indent-Guide-mode                                              :IndentGuide:
    #+begin_src emacs-lisp
      (add-hook 'emacs-lisp-mode-hook
                (lambda () (indent-guide-mode t)))
    #+end_src
* Java                                                                    :Java:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Java xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Activate Semantic Mode in java buffers
    #+begin_src emacs-lisp
      (add-hook 'java-mode-hook
                (lambda ()
                  (semantic-mode 1)
                  )
      )

      ;; Set eclipse directory
      (setq eclim-eclipse-dirs '("/home/darlan/Programas_Locais/eclipse"))
      ;; Set the eclim executable
      (setq eclim-executable "/home/darlan/Programas_Locais/eclipse/eclim")

      ;; (require 'company)
      (require 'company-emacs-eclim)
      (company-emacs-eclim-setup)
    #+end_src
*** Use Eclim (eclipse integration)
*** Auto-Insert                                                     :AutoInsert:
    #+begin_src emacs-lisp
      (define-auto-insert
        '("\\.java\\'" . "Java Skeleton")
        '("Short description: "
          "/**" > \n
          " * " (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) > \n
          " *" > \n
          " * @author Darlan Cavalcante Moreira" > \n
          " * @version 1.0" > \n
          " */" > \n
          "public class " (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) " {" > \n \n
          "}" > \n
          ))
    #+end_src
* C/C++                                                            :CPlusPlus:C:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx C/C++ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** General Stuff
    #+begin_src emacs-lisp
      ;; To get emacs to see a .h file as C++ rather than C:
      (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

      ;; Set the compile comand to include -j 2 in order to use 2 cores when
      ;; compiling.
      (setq compile-command "make -k -j")

      ;; Set directory to search for source files named in error messages. This
      ;; is important when using cppunit in order to be able to click in a error
      ;; message and go to the correct source file.
      (setq compilation-search-path (quote (nil "tests")))
    #+end_src
*** Compile Functions
    #+begin_src emacs-lisp
      (defun my-save-and-compile ()
        (interactive "")
        (save-buffer 0)
        (compile "make -k -j 2"))

      (defun my-save-and-compile-and-run ()
        (interactive "")
        (save-buffer 0)
        (compile "make -k -j 2 run"))

      ;; Compila apenas o arquivo atual
      (defun my-save-and-compile-single-file ()
        (interactive "")
        (save-buffer 0)
        (if (string= (substring(buffer-name) -1) "p") ; Testa se é o .cpp ou o .h
            ; If it is true and we are in the .cpp file
            (compile (concat "make -k -j 2 " (concat (substring(buffer-name) 0 -4) ".o")))
          ; If false and we are in the .h file
          (compile (concat "make -k -j 2 " (concat(substring(buffer-name) 0 -2) ".o")))
          )
        )

      ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ;; EDE Part will be defined later when EDE is loaded
      (defun my-compile-ede-or-make ()
        "Test if we are in an EDE project. In this case we get the
          correct compilation command from the project. Otherwise we simple
          run Make in the current folder (there should be a Makefile in
          it)."
        (interactive)
        (save-some-buffers t) ; save all buffers
        (if (fboundp 'ede-current-project) ; Test if EDE is even define (loaded)
            (if (ede-current-project)    ; Test if we are in an EDE project
                (my-compile-ede-project) ; Ok, We are in an EDE project
              (compile "make -k -j 2")   ; No, We are not in an EDE project
              )
          (my-save-and-compile)   ; EDE is not loaded at all
          ))

      (defun my-save-and-compile-single-file-ede-or-make ()
        (interactive)
        (save-some-buffers t) ; save all buffers

        (if (fboundp 'ede-current-project) ; Test if EDE is even define (loaded)
            (if (ede-current-project)      ; Test if we are in an EDE project
                (my-compile-ede-project-single-file) ; Ok, We are in an EDE project
              (my-save-and-compile-single-file) ; No, We are not in an EDE project
              )
          (my-save-and-compile-single-file)
          ))
    #+end_src
*** Change between .h and .cpp
    #+begin_src emacs-lisp
      ;; Create by Darlan
      (defun change-between-h-cpp ()
        "If the library eassist is loaded, call
      eassist-switch-h-cpp. Otherwise, call the builtin
      ff-find-other-file function"
        (interactive)
        (if (fboundp 'eassist-switch-h-cpp)
            (eassist-switch-h-cpp)
          (ff-find-other-file)))
    #+end_src
*** my-c-mode-common-hook         :IndentGuide:HighlightSymbol:Hook:Keybindings:
    #+begin_src emacs-lisp
      (defun my-c-mode-common-hook ()
        ;;   (c-set-style "linux")
        ;;(setq ecb-compile-window-height 6)
        (doxymacs-mode)
        (hs-minor-mode t)
        ;  (local-set-key [f9] 'my-save-and-compile) ; Compila todo o projeto
         (local-set-key [C-f9] 'my-save-and-compile-single-file) ; Compila só o .cpp atual
        (local-set-key [f9] 'my-compile-ede-or-make)
        (local-set-key [C-f9] 'my-save-and-compile-single-file-ede-or-make)
        (modify-syntax-entry ?_ "w")       ; now '_' is not considered a word-delimiter
        (local-set-key [f10] 'compile)
        (local-set-key [C-f10] 'my-save-and-compile-and-run) ; Compila todo o projeto e em seguida executa roda o programa
        ;; Case matters when replacing
        (setq case-replace nil)

        (local-set-key [(control c) (control v)] 'change-between-h-cpp)

        ;; Make the words TODO, FIXME and BUG keywords with a warning face, as
        ;; well as the DONE word to a keyword with a doc-face.
        (alexott/show-prog-keywords)

        ;; Minor-mode that highlights the symbol under
        ;; point throughout the buffer
        (highlight-symbol-mode)
        (darlan/set-highlight-symbol-key-bindings)

        ;; Enable indent-guide-mode -> Show vertical lines to guide indentation
        (indent-guide-mode t)
        )

      (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

      ;; Alternar entre .cpp e .h com o atalho C-c C-v
      ;;(define-key global-map [(control c) (control v)] 'ff-find-other-file)
      ;; (define-key global-map [(control c) (control v)] 'eassist-switch-h-cpp)
      ;;(define-key global-map [(control c) (control v)] 'change-between-h-cpp)

    #+end_src
*** COMMENT GUD
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      (gud-tooltip-mode t)

      (defvar gud-overlay
        (let* ((ov (make-overlay (point-min) (point-min))))
          (overlay-put ov 'face 'secondary-selection)
          ov)
        "Overlay variable for GUD highlighting.")


      (defadvice gud-display-line (after my-gud-highlight act)
        "Highlight current line."
        (let* ((ov gud-overlay)
               (bf (gud-find-file true-file)))
          (save-excursion
            (set-buffer bf)
            (move-overlay ov (line-beginning-position) (line-end-position)
                          (current-buffer)))))
    #+end_src
*** COMMENT Compilation Window                                            :Hook:
    :PROPERTIES:
    :TANGLE:   no
    :END:
    #+begin_src emacs-lisp
      ;; Removes compilation window when there are no compilation errors
      (add-hook 'compilation-finish-functions
                (lambda (buf str)
                  (if (string-match "exited abnormally" str)
                      (next-error)
                    ;;no errors, make the compilation window go away in a few seconds
                    (run-at-time "2 sec" nil 'delete-windows-on (get-buffer-create "*compilation*"))
                    (message "No Compilation Errors!")
                    )
                  ))

    #+end_src
*** COMMENT xcscope
    :PROPERTIES:
    :TANGLE:   no
    :END:
    #+begin_src emacs-lisp
      ;; XCSCOPE - Precisa instalar o pacote cscope ; TODO: Aprenda a usar que é muito poderoso
      (load "~/.emacs.d/xcscope.el") ; Não foi necessário
      (require 'xcscope)
      (setq cscope-initial-directory "~/cvs_files/llcross/src/")

    #+end_src
*** CMake                                                                :CMake:
***** auto-mode-alist to make CMakeLists.txt open in cmake-mode
      #+begin_src emacs-lisp
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ;; Major mode for editing the CMakeLists.txt file
        (autoload 'cmake-mode "cmake-mode" nil t)
        (add-to-list 'auto-mode-alist '("CMakeLists.txt" . cmake-mode))
      #+end_src
***** Make the name of the CMakeLists.txt files more readable             :Hook:
      :PROPERTIES:
      :TANGlE:   no
      :END:
      #+begin_src emacs-lisp
        ;; This will rename the buffer so that you don't have a lot of buffers
        ;; called CMakeLists.txt when you open CMakeLists.txt files in different
        ;; folders
        (defun cmake-rename-buffer ()
          "Renames a CMakeLists.txt buffer to cmake-<directory name>."
          (interactive)
          ;(print (concat "buffer-filename = " (buffer-file-name)))
          ;(print (concat "buffer-name     = " (buffer-name)))
          (when (and (buffer-file-name) (string-match "CMakeLists.txt" (buffer-name)))
              ;(setq file-name (file-name-nondirectory (buffer-file-name)))
              (setq parent-dir (file-name-nondirectory (directory-file-name (file-name-directory (buffer-file-name)))))
              ;(print (concat "parent-dir = " parent-dir))
              (setq new-buffer-name (concat "cmake-" parent-dir))
              ;(print (concat "new-buffer-name= " new-buffer-name))
              (rename-buffer new-buffer-name t)
              )
          )

        (add-hook 'cmake-mode-hook (function cmake-rename-buffer))
      #+end_src
*** COMMENT Skeletons                                                :Skeletons:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      ;; xxxxxxxxxx C/C++ Skeletons xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    #+end_src
***** C++ skeleton Comment
      #+begin_src emacs-lisp
        (define-skeleton c++-skeleton-comment
          "Inserts a c comment in a rectangle into current buffer."
          ""
          '(setq str (skeleton-read "Comment: "))
          ;; `str' is set explicitly here, because otherwise the skeleton
          ;; program would set it, only when it is going to insert it into the
          ;; buffer. But we need to determine the length of the string
          ;; beforehand, with `(length str)' below.
          '(when (string= str "") (setq str " - "))
          '(setq v1 (make-string (- fill-column 6) ?*))
          '(setq v2 (- fill-column 10 (length str)))
          "/* " v1 " */" \n
          "/* **"
          (make-string (floor v2 2) ?\ )
          str
          (make-string (ceiling v2 2) ?\ )
          "** */" \n
          "/* " v1 " */")
      #+end_src

***** C++ New Class                                                  :CPlusPlus:
      #+begin_src emacs-lisp
        (defun c++-new-class (class-name)
          "Insert a new class in the buffer with all the bloat code."
          (interactive "MClass Name: ")
          (gtel-c++-copyright)
          (skeleton-insert '(nil                ; Don't prompt
                             "#ifndef " (upcase class-name) "_H" > \n
                             "#define " (upcase class-name) "_H" > \n \n
                             "/**" > \n
                             " * \\brief ***** PUT CLASS DESCRIPTION HERE *****" > \n
                             " * " > \n
                             " * @author Wireless Telecommunications Research Group" > \n
                             " */" > \n
                             "class " class-name " {" > \n
                             "public:" > \n
                             "/**" > \n
                             " * \\brief Default class constructor." > \n
                             "*/" > \n
                             class-name "( );" > \n \n
                             "/**" > \n
                             " * \\brief Virtual class destructor (polymorphism)." > \n
                             "*/" > \n
                             "virtual ~" class-name "( );" > \n \n
                             "protected:" > \n
                             "" > _ \n \n
                             "private:" > \n
                             "//Degenerate copy and assignment" > \n
                             class-name "(const " class-name "&);" > \n
                             class-name "& operator=(const " class-name "&);" > \n
                             "};" > \n \n
                             "#endif" > \n \n \n
                             (gtel-c++-copyright)
                             "#include \"" (downcase class-name)".h\"" > \n \n
                             class-name "::" class-name"( )" > \n
                             "{}" > \n \n \n
                             class-name "::~" class-name"( )" > \n
                             "{}" > \n
                             )))
      #+end_src

      #+begin_src emacs-lisp
        (define-skeleton c++-skeleton-class
          "Insert a 'class {};' region" nil
          "class " (setq v1 (skeleton-read "Class Name: "))" {" > \n
          "public:" > \n
          "/**" > \n
          " * \\brief Default class constructor." > \n
          "*/" > \n
          v1 "();" > \n \n
          "/**" > \n
          " * \\brief Virtual class destructor (polymorphism)." > \n
          "*/" > \n
          "~" v1 "();" > \n \n
          "protected:" > \n
          "" > _ \n \n
          "private:" > \n
          "//Degenerate copy and assignment" > \n
          v1 "(const " v1 "&)" > \n
          v1 "& operator=(const " v1 "&)" > \n
          "};" > \n
        )
      #+end_src
***** CppUnit                                                          :CppUnit:
******* cppunit-main
        #+begin_src emacs-lisp
          (define-skeleton cppunit-main
            "Insert main function (Text Version).
          This only makes sense for empty buffers."
            "This line won't be included in the skeleton"
            "#include <cppunit/CompilerOutputter.h>" > \n
            "#include <cppunit/extensions/TestFactoryRegistry.h>" > \n
            "#include <cppunit/TestResult.h>" > \n
            "#include <cppunit/TestResultCollector.h>" > \n
            "#include <cppunit/TestRunner.h>" > \n
            "#include <cppunit/ui/text/TextTestRunner.h>" > \n \n
            "// Test all TestSuites registered in the TestFactoryRegistry" \n
            "int main (int argc, char* argv[])" > \n
            "{" > \n
            "// Informs test-listener about testresults" > \n
            "CPPUNIT_NS :: TestResult testresult;" > \n \n
            "// register listener for collecting the test-results" > \n
            "CPPUNIT_NS :: TestResultCollector collectedresults;" > \n
            "testresult.addListener (&collectedresults);" > \n \n
            "// insert test-suite at test-runner by registry" > \n
            "CPPUNIT_NS :: TextTestRunner testrunner;" > \n
            "testrunner.addTest (CPPUNIT_NS :: TestFactoryRegistry :: getRegistry ().makeTest ());" > \n
            "testrunner.run ();" > \n \n
            "// return 0 if tests were successful" > \n
            "return collectedresults.wasSuccessful () ? 0 : 1;" > \n
            "}" > \n \n)
        #+end_src
******* cppunit-mainqt
        #+begin_src emacs-lisp
          (define-skeleton cppunit-mainqt
            "Insert main function (Text Version).
          This only makes sense for empty buffers."
            "This line won't be included in the skeleton"
            "#include <cppunit/CompilerOutputter.h>" > \n
            "#include <cppunit/extensions/TestFactoryRegistry.h>" > \n
            "#include <cppunit/TestResult.h>" > \n
            "#include <cppunit/TestResultCollector.h>" > \n
            "#include <cppunit/TestRunner.h>" > \n
            "#include <cppunit/ui/qt/QtTestRunner.h>" > \n
            "#include <qt3/qapplication.h>" > \n \n
            "// Test all TestSuites registered in the TestFactoryRegistry" > \n
            "int main (int argc, char* argv[])" > \n
            "{" > \n
            "QApplication app( argc, argv );" > \n \n
            "// informs test-listener about testresults" > \n
            "CPPUNIT_NS :: TestResult testresult;" > \n \n
            "// register listener for collecting the test-results" > \n
            "CPPUNIT_NS :: TestResultCollector collectedresults;" > \n
            "testresult.addListener (&collectedresults);" > \n \n
            "// insert test-suite at test-runner by registry" > \n
            "CPPUNIT_NS :: QtTestRunner testrunner;" > \n
            "testrunner.addTest (CPPUNIT_NS :: TestFactoryRegistry :: getRegistry ().makeTest ());" > \n
            "testrunner.run ();" > \n \n
            "// return 0 if tests were successful" > \n
            "return collectedresults.wasSuccessful () ? 0 : 1;" > \n
            "}" > \n \n)
        #+end_src

******* cppunit-header
        #+begin_src emacs-lisp
          (defun cppunit-header (class-name)
            "Insert header for a cppunit test class."
            (interactive "MClass to be tested: ")
            (gtel-c++-copyright)
            (skeleton-insert '(nil ; Don't prompt
                               "#ifndef " (upcase class-name) "TEST_H" > \n
                               "#define " (upcase class-name) "TEST_H" > \n
                               "#include <cppunit/TestFixture.h>" > \n
                               "#include <cppunit/extensions/HelperMacros.h>" > \n \n
                               "class " class-name ";" > \n \n
                               "/** \\addtogroup Tests*/" > \n
                               "//@{" > \n \n
                               "/**" > \n
                               " * \\brief Unit tests for the " class-name " class." > \n
                               " */" > \n
                               "class " class-name "Test : public CPPUNIT_NS :: TestFixture" > \n
                               "{" > \n
                               "///\\name CppUnit Test Suite Declaration" > \n
                               "//@{" > \n
                               "CPPUNIT_TEST_SUITE (" class-name "Test);" > \n
                               ("Enter name of test method: " "CPPUNIT_TEST (" str ");" > \n)
                               ;;                     "CPPUNIT_TEST (METHOD_TO_BE_TESTED);" > \n
                               "CPPUNIT_TEST_SUITE_END ();" > \n
                               "//@}" > \n \n
                               "public:" > \n
                               "void setUp (void);" > \n
                               "void tearDown (void);" > \n \n
                               "protected:" > \n
                               "void METHOD_TO_BE_TESTED(void);" > \n \n
                               "private:" > \n
                               class-name " *a;" > \n
                               class-name " *b;" > \n
                               class-name " *c;" > \n
                               "};" > \n
                               "//@}"> \n
                               "#endif" > \n \n \n
                               (gtel-c++-copyright)
                               "// cpp file" \n \n
                               "#include \"../"(downcase class-name)".h\"" > \n
                               "#include \"" (downcase class-name) "test.h\"" > \n \n
                               "CPPUNIT_TEST_SUITE_REGISTRATION ("class-name"Test);" > \n
                               "CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( "class-name"Test, \""class-name"\" );" > \n \n \n
                               "void " class-name "Test::setUp(void)" > \n
                               "{" > \n
                               "// @TODO Implement-me" > \n
                               "}" > \n \n \n
                               "void " class-name "Test::tearDown(void)" > \n
                               "{" > \n
                               "// @TODO Implement-me" > \n
                               "}" > \n \n
                               )))
        #+end_src
***** end
      #+begin_src emacs-lisp
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      #+end_src
*** Doxymacs                                             :Doxygen:Doxymacs:Hook:
    #+begin_src emacs-lisp
      ;; Doxymacs minor-mode
      (autoload 'doxymacs-font-lock "doxymacs")
      (autoload 'doxymacs-mode "doxymacs")

      (defun my-doxymacs-font-lock-hook ()
        (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
            (doxymacs-font-lock)))
      (add-hook 'font-lock-mode-hook 'my-doxymacs-font-lock-hook)

      (setq doxymacs-doxygen-dirs (quote (("^/home/darlan/GTEL/cvs_files/llcross/" "/home/darlan/GTEL/cvs_files/llcross/llcross.tag" "/home/darlan/GTEL/cvs_files/llcross/docs/html") ("^/home/darlan/cvs_files/llcross/" "/home/darlan/cvs_files/llcross/llcross.tag" "/home/darlan/cvs_files/llcross/docs/html") ("^/home/darlan/GTEL/cvs_files/llmimoofdm/" "/home/darlan/GTEL/cvs_files/llmimoofdm/llmimoofdm.tag" "/home/darlan/GTEL/cvs_files/llmimoofdm/html") ("^/home/darlan/Dropbox/SDR4ALL/darlan_lib_usb/" "/home/darlan/Dropbox/SDR4ALL/darlan_lib_usb/docs/html/sdr4all.tag" "/home/darlan/Dropbox/SDR4ALL/darlan_lib_usb/docs/html"))))
      (setq doxymacs-external-xml-parser-executable "doxymacs_parser")
      (setq doxymacs-use-external-xml-parser t)
    #+end_src
*** Doxygen                                                            :Doxygen:
    #+begin_src emacs-lisp
      ;; Set the conf-mode for the Doxyfile
      (add-to-list 'auto-mode-alist '("Doxyfile" . conf-mode))
    #+end_src
*** COMMENT doc-mode (Subistituto do doxygen)
    Nunca testei, mas parece interessante.

    Baixe em:
    http://nschum.de/src/emacs/doc-mode/
*** CppCheck                                                          :CppCheck:
***** TODO Checar o CppCheck
      Ferramenta para checagem stática de código C++
      Precisa instalar o pacote cppcheck no synaptic.

      Instale tb o pacote cppcheck do emacs através do elpa.
*** gccsense                                                          :gccsense:
***** TODO Checar o gccsense
      Ferramenta para auto-completion e outras coisas.
      Veja pacote no elpa.

      Veja o vídeo em http://www.youtube.com/watch?v=sz68cCQ0Zpc
*** COMMENT Cedet (new config)                                           :CEDET:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Além dos atalhos de teclado definidos aqui, veja os atalhos Que começam
    com "C-c ," quando o semantic estiver ativado. Alguns são bem legais.
    Ex: "C-c , C-w" e "C-c , C-y" para senator-kill-tag e senator-yank-tag

    Ex: "C-c , g" ou "C-c , G" para ver onde uma função é usada.

    Remove the builtin CEDET version
    #+begin_src emacs-lisp
      ;; (load-library "cedet-remove-builtin")

      ;; Add folder with the elpa packages to the pack
      ;; (let ((default-directory "~/.emacs.d/lisp/cedet"))
      ;;   (setq load-path
      ;;         (append
      ;;          (let ((load-path (copy-sequence load-path))) ;; Shadow
      ;;            (append
      ;;             (copy-sequence (normal-top-level-add-to-load-path '(".")))
      ;;             (normal-top-level-add-subdirs-to-load-path)))
      ;;          load-path)))

      ;; (load-file "~/.emacs.d/lisp/cedet/cedet-remove-builtin.el")
    #+end_src

    #+begin_src emacs-lisp
      ;; xxxxxxxxxx CEDET Configuration xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    #+end_src
***** General
      #+begin_src emacs-lisp
        (defun darlan/load-semantic-with-auto-complete ()
          "DOCSTRING"
          (interactive)
          (require 'semantic)

          ;; Other requires
          (require 'semantic/bovine/c)
          (require 'semantic/bovine/gcc)
          (require 'semantic/bovine/clang)
          (require 'semantic/ia)
          (require 'semantic/decorate/include)
          (require 'semantic/lex-spp)

          ;; xxxxx Enable other semantic minor modes xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
          ;; (add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-decoration-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
          ;; (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
          (add-to-list 'semantic-default-submodes 'global-cedet-m3-minor-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-idle-local-symbol-highlight-mode)

          ;; ;; The following modes are more targeted at people who want to see
          ;; ;; some internal information of the semantic parser in action
          ;; (add-to-list 'semantic-default-submodes 'global-semantic-show-unmatched-syntax-mode)
          ;; (add-to-list 'semantic-default-submodes 'global-semantic-highlight-edits-mode)
          ;; (add-to-list 'semantic-default-submodes 'global-semantic-show-parser-state-mode)
          ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


          ;; xxxxx Finally, enable Semantic mode xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          (semantic-mode)

          ;; --8<---------------cut here---------------start------------->8---
          ;; ;; (srecode-minor-mode)
          ;; ;; veja o valor da variavel semantic-default-submodes
          ;; ;; (semantic-idle-completions-mode nil)
          (darlan/set-semantic-local-keybindings)

          ;; ;; Highlight the last edit part in the buffer for a while
          ;; (global-semantic-highlight-edits-mode)

          ;; ;; Put lines above the function definitions, typedefs, etc.
          ;; (global-semantic-decoration-mode)

          ;; ;; Highlights the current function (very discrete)
          ;; (global-semantic-highlight-func-mode)

          ;; ;; Show a summary describing the current function/variable in the
          ;; ;; minibuffer
          ;; (global-semantic-idle-summary-mode)

          ;; ;; Show tag completion when idle (good, but a little confusing)
          ;; (global-semantic-idle-completions-mode)
          ;; --8<---------------cut here---------------end--------------->8---

          ;; Add gtags as an auto-completion source
          (add-to-list 'ac-sources 'ac-source-gtags)

          ;;(add-semantic-as-an-auto-complete-source)
          )


        ;; TODO: Coloque em um eval after load semanticdb
        (semanticdb-enable-gnu-global-databases 'c-mode t)
        (semanticdb-enable-gnu-global-databases 'c++-mode t)

        (when (cedet-ectag-version-check t)
          (semantic-load-enable-primary-ectags-support))

        ;; (defun add-semantic-as-an-auto-complete-source ()
        ;;   "Add semantic as a source to auto-complete. This function
        ;; should be added to the C++ mode hook."
        ;;   (if (boundp 'ac-source-semantic)
        ;;       (setq 'ac-sources ('ac-source-semantic)))
        ;;   )

        (defun darlan/set-semantic-local-keybindings ()
          "Called inside darlan/load-semantic-with-auto-complete"
          (interactive)
          ;; xxxxxxxxxx Symbol Completion xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          (local-set-key [C-return] 'semantic-ia-complete-symbol)
          (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
          (local-set-key "\C-c<" 'semantic-complete-symbol)
          (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle)
          ;; xxxxxxxxxx Documentation xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          (local-set-key "\C-c?" 'semantic-ia-show-doc)
          (local-set-key "\C-cs" 'semantic-ia-show-summary)
          ;; (local-set-key "\C-c?" 'semantic-ia-describe-class)
          ;; xxxxx Navigation xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          (local-set-key "\C-cv" 'semantic-decoration-include-visit)
          (local-set-key "\C-\M-n" 'senator-next-tag)
          (local-set-key "\C-\M-p" 'senator-previous-tag)
          (local-set-key "\C-\M-u" 'senator-go-to-up-reference)
          ;; xxxxx Fold/unfold tag xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          (local-set-key "\C-c\-" 'senator-fold-tag)
          (local-set-key "\C-c\+" 'senator-unfold-tag)
          (local-set-key "\C-c="  'senator-unfold-tag)
          ;; xxxxx eassist mode xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          (local-set-key "\C-c,e" 'eassist-list-methods)
          )

        (add-hook 'c-mode-common-hook 'darlan/load-semantic-with-auto-complete)

      #+end_src
***** Funções Úteis
      #+begin_src emacs-lisp
        ;; The 3 Functions below were get from
        ;; http://github.com/alexott/emacs-configs/blob/2f703acf5d84c14146dfe9a3e6afc599ac671a04/rc/emacs-rc-cedet.el
        (defun my-ede-get-local-var (fname var)
          "Fetch given variable var from :local-variables of project of file fname"
          (let* ((current-dir (file-name-directory fname))
                 (prj (ede-current-project current-dir)))
            (when prj
              (let* ((ov (oref prj local-variables))
                     (lst (assoc var ov)))
                (when lst
                  (cdr lst))))))

        (defun my-compile-ede-project ()
          "Compile an EDE project"
          (let* ((r (my-ede-get-local-var
                     (or (buffer-file-name (current-buffer)) default-directory)
                     'compile-command))
                 (cmd (if (functionp r) (funcall r) r)))
            ;; (message "AA: %s" cmd)
            (set (make-local-variable 'compile-command) (or cmd compile-command))
            (compile compile-command)))


        (defun my-gen-cmake-debug-compile-string ()
          "Generates compile string for compiling CMake project in debug mode"
          (let* ((current-dir (file-name-directory
                               (or (buffer-file-name (current-buffer)) default-directory)))
                 (prj (ede-current-project current-dir))
                 (root-dir (ede-project-root-directory prj))
                 (subdir "")
                 )
            (when (string-match root-dir current-dir)
              (setf subdir (substring current-dir (match-end 0))))
            (concat "cd " root-dir "Debug/" subdir "; make -j3")))
      #+end_src
***** COMMENT EDE (Project support for CEDET)                              :EDE:
      :PROPERTIES:
      :TANGlE:   no
      :END:
      #+begin_src emacs-lisp
        ;;(require 'ede)
        (global-ede-mode 1)
        (ede-enable-generic-projects)

        ;; Allow EDE to look for project files in any folder (could be a security
        ;; flaw)
        (setq ede-project-directories t)
      #+end_src

******* EDE Projects
        #+begin_src emacs-lisp
          (with-eval-after-load "ede" 
            (ede-cpp-root-project "Factors"
                                  :name "Factors Project"
                                  :file "~/cvs_files/factors/Project.ede"
                                  :include-path '("/"
                                                  "/armadillo-3.0.2/include"
                                                  "/armadillo-3.0.2/include/armadillo_bits"
                                                  )
                                  :system-include-path '("~/exp/include")
                                  :spp-table '(("isUnix" . "")
                                               ("BOOST_TEST_DYN_LINK" . "")))
            )
        #+end_src
***** Semantic source for autocomplete                   :Semantic:AutoComplete:
      The code below creates a new auto-complete source that uses semantic.
      #+begin_src emacs-lisp
        (defun ac-semantic-construct-candidates (tags)
          "Construct candidates from the list inside of tags."
          (apply 'append
                 (mapcar (lambda (tag)
                           (if (listp tag)
                               (let ((type (semantic-tag-type tag))
                                     (class (semantic-tag-class tag))
                                     (name (semantic-tag-name tag)))
                                 (if (or (and (stringp type)
                                              (string= type "class"))
                                         (eq class 'function)
                                         (eq class 'variable))
                                     (list (list name type class))))))
                         tags)))


        (defvar ac-source-semantic-analysis nil)

        (setq ac-source-semantic
              `((sigil . "b")
                (init . (lambda () (setq ac-source-semantic-analysis
                                         (condition-case nil
                                             (ac-semantic-construct-candidates (semantic-fetch-tags))))))
                (candidates . (lambda ()
                                (if ac-source-semantic-analysis
                                    (all-completions ac-target (mapcar 'car ac-source-semantic-analysis)))))))

      #+end_src

      The code below change ac-sources for C++ buffers to the newly created
      semantic source.
      #+begin_src emacs-lisp
        (defun change-ac-sources-for-c++-buffers ()
          "Chanhe the ac-sources variable to a source that used semantic
                for the autocompletion"
          (add-to-list 'ac-sources 'ac-source-semantic)
          ;; Make the variable ac-ignore-case local so that inly C/C++ buffers are
          ;; affected
          (make-local-variable 'ac-ignore-case)
          (setq ac-ignore-case nil)
          )

        (add-hook 'c-mode-common-hook 'change-ac-sources-for-c++-buffers)

      #+end_src
***** end
      #+begin_src emacs-lisp
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      #+end_src
*** COMMENT Cedet (old config)                                           :CEDET:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ;; xxxxxxxxxxxxxxx Cedet xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    #+end_src
    O Cedet foi integrado ao Emacs a partir da versão 23.2.

***** General
      #+begin_src emacs-lisp
        ;; Veja esse site
        ;; http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html para
        ;; dicas

        ;;(require 'cedet)
        ;;(global-ede-mode 1)                 ; Enable the Project management system
      #+end_src
***** COMMENT Semantic
      :PROPERTIES:
      :TANGLE:   no
      :END:
      #+begin_src emacs-lisp
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ;; xxxxxxxxxxxxxxx Uncomment one of the lines below xxxxxxxxxxxxxxxxxxxxxxx
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        (autoload 'semantic-mode "semantic")
        ;; enables only minimum of necessary features - keep syntactic information for
        ;; current buffer up-to date, storing of syntactic information for later use
        ;; (Semanticdb), and loading of corresponding information with Semanticdb and
        ;; Ebrowse;
        ;; (semantic-load-enable-minimum-features)

        ;; enables senator-minor-mode for navigation in buffer,
        ;; semantic-mru-bookmark-mode for storing positions of visited tags, and
        ;; semantic-idle-summary-mode, that shows information about tag under point;
        ;;(semantic-load-enable-code-helpers) ; Enable prototype help and smart completion

        ;; enables semantic-stickyfunc-name that displays name of current function in
        ;; topmost line of buffer, semantic-decoration-mode to decorate tags, using
        ;; different faces, and semantic-idle-completion-mode for automatic generation
        ;; of possible names completions, if user stops his work for some time;
        ;; (semantic-load-enable-gaudy-code-helpers)

        ;; enables which-func-mode, that shows name of current function in status line;
        ;; (semantic-load-enable-excessive-code-helpers)

        ;; enables several modes, that are useful when you debugging Semantic —
        ;; displaying of parsing errors, its state, etc.
        ;; (semantic-load-enable-semantic-debugging-helpers)
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

        (require 'semanticdb)
        ;;(require 'semantic/sb) ;; Não sei o que é esse

        (semantic-mode 1) ;; Precisa disso?

        ;; If you use GCC for programming in C & C++, then Semantic can automatically
        ;; find path, where system include files are located. To do this, you need to
        ;; load semantic-gcc package with following command:
        ;;(require 'semantic-gcc)


        ;; To use additional features for names completion, and displaying of
        ;; information for tags & classes, you also need to load the semantic-ia
        ;; package. This could be performed with following command:
        ;;(require 'semantic-ia)


        ;; (setq-mode-local c-mode semanticdb-find-default-throttle
        ;;                  '(project unloaded system recursive))
        ;; (setq-mode-local c++-mode semanticdb-find-default-throttle
        ;;                  '(project unloaded system recursive))



        ;; You can also explicitly specify additional paths for look up of include files
        ;; (and these paths also could vary for specific modes). To add some path to
        ;; list of system include paths, you can use the semantic-add-system-include
        ;; command, that accepts two parameters — string with path to include files, and
        ;; symbol, representing name of major mode, for which this path will used. For
        ;; example:
        ;; (semantic-add-system-include "~/exp/include/boost_1_37" 'c++-mode)
        ;; (semantic-add-system-include "/usr/include/c++/4.4.5" 'c++-mode)
        ;; (semantic-add-system-include "/usr/include/octave" 'c++-mode)
        ;; (semantic-add-system-include "/usr/include/octave" 'c-mode)


        ;; Prefiro o yasnippets
        ;; (global-srecode-minor-mode 1)       ; Enable template insertion menu

      #+end_src
***** Eassist
      Apenas dois métodos interessantes são fornecidos pelo eassist:
      - eassist-switch-h-cpp
      - eassist-list-methods

      No entanto, não preciso o primeiro realmente do eassist-switch-h-cpp
      pois o comando ff-find-other-file (que já vem com o emacs) faz esse
      papel.
      #+begin_src emacs-lisp
        ;; Provides some nice functions, such as eassist-list-methods
        (require 'eassist)
      #+end_src
***** Integration with Qt Library
      #+begin_src emacs-lisp
        (setq qt4-base-dir "/usr/include/qt4")
        (semantic-add-system-include qt4-base-dir 'c++-mode)
        (add-to-list 'auto-mode-alist (cons qt4-base-dir 'c++-mode))

        (with-eval-after-load "bovine"
          (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt4-base-dir "/Qt/qconfig.h"))
          (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt4-base-dir "/Qt/qconfig-dist.h"))
          (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt4-base-dir "/Qt/qglobal.h"))

          ;; http://www.emacswiki.org/emacs/SemanticLibraryParsing#toc3
          (add-to-list 'semantic-lex-c-preprocessor-symbol-map '("Q_GUI_EXPORT" . ""))
          (add-to-list 'semantic-lex-c-preprocessor-symbol-map '("Q_CORE_EXPORT" . ""))
          )


        ;; Por algum motivo apenas adicionar o diretório raiz não funcionou
        (semantic-add-system-include
         "/usr/include/qt4/Qt" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/Qt3Support" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtCore" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtDBus" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtDeclarative" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtDesigner" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtGui" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtHelp" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtNetwork" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtOpenGL" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtScript" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtScriptTools" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtSql" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtSvg" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtTest" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtUiTools" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtWebKit" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtXml" 'c++-mode)
        (semantic-add-system-include
         "/usr/include/qt4/QtXmlPatterns" 'c++-mode)

      #+end_src
***** Keybindings (my-cedet-hook)                             :Hook:Keybindings:
      #+begin_src emacs-lisp
        ;; xxxxxxxxxxxxxxx Atalhos xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        (defun my-cedet-hook ()
          (local-set-key [(control return)] 'semantic-ia-complete-symbol)
          ;; xxxxxxxxxx Symbol completion xxxxxxxxxxxxxxxx
          (local-set-key "\C-c  " 'semantic-ia-complete-symbol-menu);Esse atalho é C-c TAB
          (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
          (local-set-key "\C-ct" 'semantic-analyze-proto-impl-toggle)
          ;; xxxxx Documentation xxxxxxxxxxxxxxxxxxxxxxxxx
          ;; (local-set-key "\C-c?" 'semantic-ia-show-doc)
          (local-set-key "\C-c?" 'semantic-ia-show-summary)
          ;; (local-set-key "\C-c?" 'semantic-ia-describe-class)
          ;; xxxxx Navigation xxxxxxxxxxxxxxxxxxxxxxxxxxxx
          (local-set-key "\C-\M-n" 'senator-next-tag)
          (local-set-key "\C-\M-p" 'senator-previous-tag)
          (local-set-key "\C-\M-u" 'senator-go-to-up-reference)
          ;; xxxxx eassist mode xxxxxxxxxxxxxxxxxxxxxxxxxx
          (local-set-key "\C-c,e" 'eassist-list-methods)
          ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          )

        (add-hook 'c-mode-common-hook 'my-cedet-hook)

      #+end_src
***** COMMENT Completion and Semantic
      :PROPERTIES:
      :TANGLE:   no
      :END:
      #+begin_src emacs-lisp
        ;; Complete automatically when typing . or > (too slow for practically purposes if you don't use EDE project to limit completion scope)
        ;; (defun my-c-mode-cedet-hook ()
        ;;  (local-set-key "." 'semantic-complete-self-insert)
        ;;  (local-set-key ">" 'semantic-complete-self-insert))
        ;; (add-hook 'c-mode-common-hook 'my-c-mode-cedet-hook)

        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx



        ;; http://github.com/alexott/emacs-configs/blob/2f703acf5d84c14146dfe9a3e6afc599ac671a04/rc/emacs-rc-cedet.el
        ;; hooks, specific for semantic
        ;; (defun my-semantic-hook ()
        ;;   (semantic-tag-folding-mode 1)
        ;;   (imenu-add-to-menubar "TAGS")
        ;;   )
        ;; (add-hook 'semantic-init-hooks 'my-semantic-hook)


        ;; gnu global support
        ;; (require 'semanticdb-global)
        ;; (semanticdb-enable-gnu-global-databases 'c-mode)
        ;; (semanticdb-enable-gnu-global-databases 'c++-mode)

        ;; ctags
        ;; (require 'semanticdb-ectag)
        ;; (semantic-load-enable-primary-exuberent-ctags-support)


        ;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file
        ;;              "~/exp/include/boost-1_38/boost/config.hpp")

      #+end_src
***** COMMENT ECB - Emacs Code Browser
      :PROPERTIES:
      :TANGLE:   no
      :END:
      #+begin_src emacs-lisp
        (require 'ecb)
      #+end_src
***** COMMENT EDE - Project Definitions
      :PROPERTIES:
      :TANGLE:   no
      :END:
******* Início comum (começo do defun)
        #+begin_src emacs-lisp
          (defun seta-projetos-ede ()
                    "Seta projetos EDE para arquivos no notebook."
                    (interactive)
        #+end_src
******* plugin-cpp (dentro do defun)
        #+begin_src emacs-lisp
            ;; xxxxx Project definition: plugin-cpp xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            (setq plugin-cpp-project
                  (ede-cpp-root-project "plugin-cpp" :file "~/Desktop/plugin_cpp/CMakeLists.txt"
                                        :system-include-path '("/home/ott/exp/include"
                                                               "/home/ott/exp/include/boost-1_38")
                                        :local-variables '(
                                                           (compile-command . "cd ~/Desktop/plugin_cpp/; make -j2"))))
            ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

        #+end_src

******* SDR4ALL (dentro do defun)
        #+begin_src emacs-lisp
            ;; xxxxx Project Definition: sdr4all xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            (setq sdr4all-server-commands
                  ;; (ede-cpp-root-project "sdr4all-server-commands" :file "~/cvs_files/SDR4All/Logiciels/SDR/test/server_commands/CMakeLists.txt"
                  (ede-cpp-root-project "sdr4all-server-commands" :file "~/cvs_files/SDR4All/Logiciels/SDR/README"
                                        :system-include-path '("~/cvs_files/SDR4All/Logiciels/SDR/lib/boost_1_43_0")
                                        :include-path '(
                                                        "/lib/core_engine/ifc/"
                                                        "/alien/tinyxml/inc"
                                                        ;; "/lib/core_engine/inc/"
                                                        ;; "/lib/core_engine/inc/bloc/"
                                                        ;; "/lib/core_engine/inc/blocmanagement/"
                                                        ;; "/lib/core_engine/inc/exceptions/"
                                                        ;; "/lib/core_engine/inc/link/"
                                                        ;; "/lib/core_engine/inc/parammanager/"
                                                        ;; "/lib/core_engine/inc/pluginmanager/"
                                                        ;; "/lib/core_engine/inc/scheduler/"
                                                        "/lib/msgutl/ifc/"
                                                        ;; "/lib/msgutl/inc/"
                                                        "/alien/tinyxml/inc/"
                                                        "/lib/xml_commands/inc/"
                                                        "/lib/xml_commands/ifc/"
                                                        )
                                        :local-variables '(
                                                           ;; (compile-command . "cd ~/cvs_files/SDR4All/Logiciels/SDR/build/xml_commands_test; make -j2")
                                                           (compile-command . "cd ~/cvs_files/SDR4All/Logiciels/SDR/build/Linux/remote_core_engine; make -j2")
                                                           )
                                        :system-include-path '(
                                                               "/home/darlan/cvs_files/SDR/"
                                                               "/usr/include/boost/"
                                                               )
                                        ))
            ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        #+end_src

******* Fim do defun
        #+begin_src emacs-lisp
            )
        #+end_src
******* Mais EDE projects
        #+begin_src emacs-lisp
          ;; (setq sdr4all-cpp-project
          ;;   (ede-cpp-root-project "SDR4ALL_core_engine_gui" :file "~/cvs_files/SDR4All/Logiciels/SDR/test/core_engine_gui/CMakeLists.txt"
          ;;                         :system-include-path '("~/cvs_files/SDR4All/Logiciels/SDR/lib/boost_1_43_0")
          ;;                         ;; :include-path '("/lib/core_engine/inc/"
          ;;                         ;;                 "/lib/core_engine/ifc/"
          ;;                         ;;                 "/lib/core_engine/inc/bloc/"
          ;;                         ;;                 "/lib/core_engine/inc/blocmanagement/"
          ;;                         ;;                 "/lib/core_engine/inc/link/"
          ;;                         ;;                 "/lib/core_engine/inc/scheduler/"
          ;;                         ;;                 "/lib/server_utl/inc/"
          ;;                         ;;                 "/lib/server_utl/ifc/"
          ;;                         ;;                 "/test/es_engine/"
          ;;                         ;;                 "/alien/tinyxml/inc")
          ;;                         :local-variables '(
          ;;                                            (compile-command . "cd ~/cvs_files/SDR4All/Logiciels/SDR/build/core_engine_gui; make -j2"))
          ;;                         :spp-files '("~/cvs_files/SDR4All/Logiciels/SDR/lib/core_engine/inc/Headers.h")
          ;;                         ))




          ;; (setq sdr4all-cpp-project
          ;;   (ede-cpp-root-project "SDR4ALL" :file "~/cvs_files/SDR4All/Logiciels/SDR/README"
          ;;                         :system-include-path '("~/cvs_files/SDR4All/Logiciels/SDR/lib/boost_1_43_0")
          ;;                         :include-path '("/lib/core_engine/inc/"
          ;;                                         "/lib/core_engine/ifc/"
          ;;                                         "/lib/core_engine/inc/bloc/"
          ;;                                         "/lib/core_engine/inc/blocmanagement/"
          ;;                                         "/lib/core_engine/inc/link/"
          ;;                                         "/lib/core_engine/inc/scheduler/"
          ;;                                         "/lib/server_utl/inc/"
          ;;                                         "/lib/server_utl/ifc/"
          ;;                                         "/test/es_engine/"
          ;;                                         "/alien/tinyxml/inc")
          ;;                         :local-variables '(
          ;;                                            (compile-command . "cd ~/cvs_files/SDR4All/Logiciels/SDR/build/darlan_build; make -j2"))
          ;;                         :spp-files '("lib/ES_Engine/include/config.h")
          ;;                         ))


          ;; (setq sdr4all-mex-cpp-project
          ;;   (ede-cpp-root-project "SDR4ALL"
          ;;                         :name "MexFiles for SDR4ALL"
          ;;                         :file "~/cvs_files/SDR4All/Logiciels/C++/Driver_PC/CMakeLists.txt"
          ;;                         :include-path '("/"
          ;;                                         "/mex_functions"
          ;;                                         "/tests")
          ;;                         :local-variables '(
          ;;                                            (compile-command . "cd ~/cvs_files/SDR4All/Logiciels/C++/Driver_PC/build/; make -j2"))))



          ;; (setq xml-cpp-project
          ;;   (ede-cpp-root-project "XML" :file "~/cvs_files/SDR4All/Logiciels/C++/Utils/XML/CMakeLists.txt"
          ;;                         :system-include-path '("~/cvs_files/SDR4All/Logiciels/SDR/lib/boost_1_43_0")
          ;;                         :include-path '("/lib/xml_parser/include/"
          ;;                                         "/test/src/")
          ;;                         :local-variables '(
          ;;                                            (compile-command . "cd ~/cvs_files/SDR4All/Logiciels/C++/Utils/XML/build/; make -j2"))
          ;;                         ))
        #+end_src
******* Finalmente seta os projetos EDE
        #+begin_src emacs-lisp
          (if (string-match "M70Vm" system-name)
              ;; If matches
              (progn
                (seta-projetos-ede)
                )
            ;; Else
            (message "Projetos EDE não foram setados: Estou no GTEL")
            )
        #+end_src
******* Funções Úteis
        #+begin_src emacs-lisp
          ;; The 3 Functions below were get from
          ;; http://github.com/alexott/emacs-configs/blob/2f703acf5d84c14146dfe9a3e6afc599ac671a04/rc/emacs-rc-cedet.el
          (defun my-ede-get-local-var (fname var)
            "Fetch given variable var from :local-variables of project of file fname"
            (let* ((current-dir (file-name-directory fname))
                   (prj (ede-current-project current-dir)))
              (when prj
                (let* ((ov (oref prj local-variables))
                       (lst (assoc var ov)))
                  (when lst
                    (cdr lst))))))

          (defun my-compile-ede-project ()
            "Compile an EDE project"
            (let* ((r (my-ede-get-local-var
                       (or (buffer-file-name (current-buffer)) default-directory)
                       'compile-command))
                   (cmd (if (functionp r) (funcall r) r)))
              ;; (message "AA: %s" cmd)
              (set (make-local-variable 'compile-command) (or cmd compile-command))
              (compile compile-command)))


          (defun my-gen-cmake-debug-compile-string ()
            "Generates compile string for compiling CMake project in debug mode"
            (let* ((current-dir (file-name-directory
                                 (or (buffer-file-name (current-buffer)) default-directory)))
                   (prj (ede-current-project current-dir))
                   (root-dir (ede-project-root-directory prj))
                   (subdir "")
                   )
              (when (string-match root-dir current-dir)
                (setf subdir (substring current-dir (match-end 0))))
              (concat "cd " root-dir "Debug/" subdir "; make -j3")))
        #+end_src
*** Irony-mode
    Installed through elpa
***** Basic irony-mode configuration
      #+begin_src emacs-lisp
        ;; Enable irony-mode in C, C++ and objc major modes
        (add-hook 'c++-mode-hook 'irony-mode)
        (add-hook 'c-mode-hook 'irony-mode)
        (add-hook 'objc-mode-hook 'irony-mode)

        ;; Add additional clang options to irony server. Here we set irony to use
        ;; then c++11 standard.
        (setq irony-additional-clang-options '("-std=c++11"))
        ;;"-std=c++11"

        ;; replace the `completion-at-point' and `complete-symbol' bindings in
        ;; irony-mode's buffers by irony-mode's asynchronous function
        (defun my-irony-mode-hook ()
          (define-key irony-mode-map [remap completion-at-point]
            'irony-completion-at-point-async)
          (define-key irony-mode-map [remap complete-symbol]
            'irony-completion-at-point-async))

        (add-hook 'irony-mode-hook 'my-irony-mode-hook)
      #+end_src
***** company-irony
      #+begin_src emacs-lisp
        ;; Add the company-irony backend
        (eval-after-load 'company
          '(add-to-list 'company-backends 'company-irony))

        ;; Include irony trigger commands to `company-begin-commands'.
        ;; 
        ;; This allow completion to be automatically triggered after member
        ;; accesses (obj.|, obj->|, ...).
        (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
      #+end_src
***** irony-eldoc
      Install irony-eldoc through elpa. Then all you need to do is activate
      eldoc and irony-eldoc modes in c++ buffers.
      #+begin_src emacs-lisp
        ;; Activates irony-eldoc mode whenever irony-mode is activated. This will
        ;; also activate standard eldoc-mode.
        (add-hook 'irony-mode-hook 'irony-eldoc)
      #+end_src
*** Flycheck
    Set flycheck to use c++11 standard in c++ buffers.
    #+begin_src emacs-lisp
      (add-hook 'c++-mode-hook (lambda ()
                                 ;; Useful if you use the c/c++-clang ckecher
                                 (setq flycheck-clang-language-standard "c++11")
                                 ;; Useful if you use the c/c++-gcc ckecher
                                 (setq flycheck-gcc-language-standard "c++11")))
      (add-hook 'c-mode-hook (lambda ()
                               ;; Useful if you use the c/c++-clang ckecher
                               (setq flycheck-clang-language-standard "c++11")
                               ;; Useful if you use the c/c++-gcc ckecher
                               (setq flycheck-gcc-language-standard "c++11")))

      ;; Set flycheck to use the "irony"checker (install the package
      ;; flycheck-irony through elpa).
      ;; 
      ;; Since this will use the running irony server then any configuration
      ;; (including setting the standard to c++11) is done in the irony-mode
      ;; configuration.
      (eval-after-load 'flycheck
        '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
    #+end_src
* MATLAB                                                                :MATLAB:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx MATLAB xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  
  TIP: Use C-c C-s in a MATLAB file to "save and go"
       Use C-M-<ENTER> to run current section

*** General                                   :IndentGuide:HighlightSymbol:Hook:
    #+begin_src emacs-lisp
      (autoload 'matlab-mode "matlab-load" nil t)

      ; Não é necessário, já que é carregado pelo matlab-mode
      (autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)

      (add-to-list 'auto-mode-alist '("\.m$" . matlab-mode))

      (defun my-matlab-mode-hook ()
        (setq fill-column 76) ; where auto-fill should wrap
        (local-set-key "\C-c!" 'matlab-shell)
        (setq matlab-comment-region-s "% ")
        (setq matlab-shell-command-switches '("-nodesktop" "-nosplash"))
        (auto-fill-mode -1) ; Disable auto-fill-mode in MATBAL code

        ;; Make the words TODO, FIXME and BUG keywords with a warning face, as
        ;; well as the DONE word to a keyword with a doc-face.
        (alexott/show-prog-keywords)

        ;; Enable highlight-symbol-mode for MATLAB buffers
        (highlight-symbol-mode)
        (darlan/set-highlight-symbol-key-bindings)

        ;; Enable indent-guide-mode -> Show vertical lines to guide indentation
        (indent-guide-mode t)
        )

      (add-hook 'matlab-mode-hook 'my-matlab-mode-hook)

      (with-eval-after-load 'matlab
        (setq matlab-shell-emacsclient-command "emacsclient"))
    #+end_src
*** COMMENT CEDET Integration                                            :CEDET:
    :PROPERTIES:
    :TANGLE:   no
    :END:
    #+begin_src emacs-lisp
      ;; Enable CEDET feature support for MATLAB code. (Optional)
      ;;(matlab-cedet-setup)
    #+end_src
*** Outline Support                                                       :Hook:
    #+begin_src emacs-lisp
      (defun set-matlab-outline-magic ()
        "Set the key bindings for outline move as well as the outline
      regex for MATLAB mode"
        (interactive)
      ;  (setq outline-regexp (regexp-opt '("%%"))) ; Coloque mais strings na lista se quiser
        ;;                     Concatena com espaço no começo para poder ter espaços em branco no começo
        (setq outline-regexp (concat "\s*" (regexp-opt '("%%" "classdef" "properties" "methods" "function"))))
        ;(darlan/set-outline-key-bindings)
        (outline-minor-mode t)
        ;; Requer pacotes fold-dwim e fold-dwim-org.
        ;; Atrapalha o funcionamento normal do TAB
        ;;(fold-dwim-org/minor-mode t)
        )

      (add-hook 'matlab-mode-hook 'set-matlab-outline-magic)


      ;; (darlan/set-up-outline-minor-mode (concat "\s*" (regexp-opt '("%%" "classdef" "properties" "methods" "function"))))

      ;; (add-hook 'matlab-mode-hook 'darlan/set-up-outline-minor-mode)

    #+end_src
*** COMMENT M-Lint integration
    :PROPERTIES:
    :TANGLE:   no
    :END:
    Após habilitar o mlint minor mode eu fico tendo erros
    : apply: Symbol's function definition is void: linemark-group
    sempre que tendo abrir um arquivo
    #+begin_src emacs-lisp
      (load-library "mlint")
    #+end_src

*** Checkcode
    In new MATLAB versions the mlint commandline program is not provided
    anymore. Instead, MATLAB provides the checkcode command, but it can
    only be called from inside MATLAB. Therefore, we create here a function
    to call checkcode on the current '.m' file.
    #+begin_src emacs-lisp
      ;; Modifyed matlab-shell-run-command from matlab-mode to create a
      ;; 'checkcode' command.
      (defun darlan/matlab-checkcode-current-file ()
        "Run checkcode in the current file and display result in a
      buffer. This command requires an active MATLAB shell."
        (interactive)
        (let ((filename (buffer-file-name))
              (command))
          (setq command (concat "checkcode('" filename "')"))

          ;; If the "*MATLAB codecheck*" buffer already exists, kill it.
          (if (get-buffer "*MATLAB codecheck*")
              (kill-buffer "*MATLAB codecheck*")
            )

          ;; Check the code and show the results in the "*MATLAB codecheck*"
          ;; buffer
          (matlab-output-to-temp-buffer
           "*MATLAB codecheck*"
           (matlab-shell-collect-command-output command))))
    #+end_src

*** Tests
    #+begin_src emacs-lisp
      ;; Modifyed matlab-shell-run-command from matlab-mode to create a
      ;; 'checkcode' command.
      (defun darlan/matlab-run-tests-current-file ()
        "Run the tests in the current file and display result in a
      buffer. This command requires an active MATLAB shell."
        (interactive)
        (let ((filename (buffer-file-name))
              (command))
          (setq command (concat "runtests('" filename "')"))

          ;; If the "*MATLAB codecheck*" buffer already exists, kill it.
          (if (get-buffer "*MATLAB tests*")
              (kill-buffer "*MATLAB tests*")
            )

          ;; Check the code and show the results in the "*MATLAB codecheck*"
          ;; buffer
          (matlab-output-to-temp-buffer
           "*MATLAB tests*"
           (matlab-shell-collect-command-output command))))

    #+end_src
*** Debug Helper functions
    #+begin_src emacs-lisp
      (defun matlab--add-debug-highlight ()
        "Adds a highlighter for use by `MATLAB--keyboard-string'"
        (highlight-lines-matching-regexp "% DEBUG %\\s-*$" 'hi-red-b)
        )

      (add-hook 'matlab-mode-hook 'matlab--add-debug-highlight)

      (defvar MATLAB--keyboard-string "keyboard  % DEBUG %"
        "MATLAB breakpoint string used by `MATLAB-insert-breakpoint'")

      (defun darlan/matlab-insert-breakpoint ()
        "Inserts a MATLAB breakpoint using `keyboard' string"
        (interactive)
        (back-to-indentation)
        ;; this preserves the correct indentation in case the line above
        ;; point is a nested block
        (split-line)
        (insert MATLAB--keyboard-string))
    #+end_src
*** Helper functions
    #+begin_src emacs-lisp
      (defun darlan/surround-with-size-command ()
        "Usefull to surround a region with the 'size' command in MATLAB
            shell buffers."
        (interactive)
        (let (command rightPart leftPart)
          (setq command "size")
          (setq leftPart (concat command "("))
          (setq rightPart ")")
          (darlan/surround-region-dowim leftPart rightPart)
          ;; Like pressing <ENTER> in the shell buffer
          (comint-send-input)
          )
        )


      (defun darlan/surround-with-help-command ()
        "Usefull to surround a region with the 'help' command in MATLAB
            shell buffers."
        (interactive)
        (let (command rightPart leftPart)
          (setq command "help")
          (setq leftPart (concat command " "))
          (setq rightPart "")
          (darlan/surround-region-dowim leftPart rightPart)
          ;; Like pressing <ENTER> in the shell buffer
          (comint-send-input)
          )
        )
    #+end_src
*** MATLAB mode Keybindings                                   :Hook:Keybindings:
    #+begin_src emacs-lisp
      (add-hook 'matlab-mode-hook
                (lambda ()
                  ;; (ibuffer-switch-to-saved-filter-groups "default")
                  (local-set-key [f9] 'darlan/matlab-checkcode-current-file)
                  (local-set-key [f8] 'darlan/matlab-insert-breakpoint)
                  ))
    #+end_src
*** MATLAB Shell Keybindings                                  :Hook:Keybindings:
    #+begin_src emacs-lisp
      (add-hook 'matlab-shell-mode-hook
                (lambda ()
                  ;; (ibuffer-switch-to-saved-filter-groups "default")
                  (local-set-key [f6] 'darlan/surround-with-command)
                  (local-set-key [C-f6] 'darlan/surround-with-size-command)
                  (local-set-key [M-f6] 'darlan/surround-with-help-command)
                  (modify-syntax-entry ?_ "w")
                  ))
    #+end_src
*** Company Backends                                                   :Company:
    #+begin_src emacs-lisp
      (add-hook 'matlab-shell-mode-hook
                (lambda ()
                  (set (make-local-variable 'company-backends) '(company-matlab-shell))))
    #+end_src
*** Flymake Integration with mlint                                     :Flymake:
    #+begin_src emacs-lisp
      (when (load "flymake" t)
        (defun flymake-mlint-init ()
          (let* ((temp-file (flymake-init-create-temp-buffer-copy
                             'flymake-create-temp-inplace))
                 (local-file (file-relative-name
                              temp-file
                              (file-name-directory buffer-file-name))))
            (list "mlint"  (list local-file))))
        (add-to-list 'flymake-allowed-file-name-masks
                     '("\\.m\\'" flymake-mlint-init)))

    #+end_src

* Pymacs                                                                :Pymacs:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Pymacs xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  <<Pymacs>>
  Fiz o Download do Pymacs e coloquei na pasta [[/home/darlan/Programas_Locais][Programas_Locais]], mas não é
  necessário manter essa pasta porque já instalei. Para instalar o pymacs
  basta rodar o comando =make install= e em seguida copiar o arquivo
  pymacs.el para alguma pasta que o emacs enxergue (coloquei em
  ~/.emacs.d/lisp/).

  Abaixo configuração para ativar o pymacs
  #+begin_src emacs-lisp
    ;; http://pymacs.progiciels-bpi.ca/pymacs.html#prepare-your-emacs-file

    ;; Only necessary for my compiled local version of emacs
    ;;(add-to-list 'load-path "/usr/share/emacs/site-lisp/pymacs")

    ;; Only useful if I use virtualenv
    ;; (setenv "PYMACS_PYTHON" "~/<caminho_virtualenv>/bin/python")

    (autoload 'pymacs-apply "pymacs")
    (autoload 'pymacs-call "pymacs")
    (autoload 'pymacs-eval "pymacs" nil t)
    (autoload 'pymacs-exec "pymacs" nil t)
    (autoload 'pymacs-load "pymacs" nil t)
  #+end_src
* Python                                                                :Python:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Python Configuration xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

  *LEMBRE DO WINPDB para debugar programas em python*

  Veja dicas de configuração em
  http://ricardoduarte.net/blog/2011/08/31/programando-em-python-no-emacs/

  Tente nesse site: https://synker.wordpress.com/2011/04/06/emacs-as-a-python-ide/
  E se num der certo nesse http://sunnyeves.blogspot.com/2011/04/debugging-python-on-emacs-ide.html

*** Navigation Tips
    Read the comment in the beggining of the python.el file in Emacs.
    C-M-a   beginning-of-defun
    C-M-e   end-of-defun
    M-e     python-nav-forward-block
    M-a     python-nav-backward-block

*** Fill paragraph in docstrings
    #+begin_src emacs-lisp
      ;; Set the fill docstring style to symmetric.
      (setq python-fill-docstring-style 'symmetric)
    #+end_src
*** Using IPython with the stock python.el
    #+begin_src emacs-lisp
      (setq
       python-shell-interpreter "ipython"
       python-shell-interpreter-args "--classic"
       )
    #+end_src
*** Delete trailing whitespace before saving
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook
                (lambda()
                  ;; Notice that I add has a local-hook so that only python
                  ;; buffers are affected
                  (add-hook 'write-file-functions
                            '(lambda()
                               (save-excursion
                                 (delete-trailing-whitespace))
                               )
                            nil  ; Don't append to the hook. Insert the function
                                 ; at the beginning
                            t    ; Change only the hook's local value, so that it
                                 ; will only be changed in python-mode
                            )))
    #+end_src
*** Make TODO, FIXME and BUG kwywords with a warning face
    Por algum motivo não está funcionando em python
    #+begin_src emacs-lisp
      ;; Make the words TODO, FIXME and BUG keywords with a warning face, as
      ;; well as the DONE word to a keyword with a doc-face.
      (add-hook 'python-mode-hook 'alexott/show-prog-keywords)
    #+end_src
*** COMMENT Flymake (muito bom)                   :Pylint:PEP8:Pyflakes:Flymake:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Pegue em
    http://stackoverflow.com/questions/1259873/how-can-i-use-emacs-flymake-mode-for-python-with-pyflakes-and-pylint-checking-co
***** Configura o flymake para funcionar com python
      #+begin_src emacs-lisp
        (when (load "flymake" t)
          (defun flymake-pyflakes-init ()
            (let* ((temp-file (flymake-init-create-temp-buffer-copy
                               'flymake-create-temp-inplace))
                   (local-file (file-relative-name
                                temp-file
                                (file-name-directory buffer-file-name))))
              (list "pyflakespep8.py"  (list local-file))))
          (add-to-list 'flymake-allowed-file-name-masks
                       '("\\.py\\'" flymake-pyflakes-init)))
      #+end_src

***** Carrega flymake para arquivos .py e seta atalhos de teclado  :Keybindings:
      Além da função flymake-display-err-menu-for-current-line para ver o
      erro em um menu suspenso você também pode usar display-local-help
      para ver o erro na ecoarea.
      *Para display-local-help use o atalho "C-h .".*
      #+begin_src emacs-lisp
        (add-hook 'python-mode-hook
                  (lambda ()
                    (unless (eq buffer-file-name nil) (flymake-mode 1)) ;dont invoke flymake on temporary buffers for the interpreter
                    (local-set-key [f5] 'flymake-goto-next-error)
                    (local-set-key [C-f5] 'flymake-goto-prev-error)
                    (local-set-key [f6] 'flymake-display-err-menu-for-current-line)
                    ))
      #+end_src

***** Script que o flymake usa para fazer a checagem (Primeira versão)
      :PROPERTIES:
      :TANGlE:   no
      :END:
      Em
      http://stackoverflow.com/questions/1259873/how-can-i-use-emacs-flymake-mode-for-python-with-pyflakes-and-pylint-checking-co
      vc encontra o shell script abaixo que pode ser usado com o flymake.

      Salve ele na pasta /usr/local/bin com o nome de "pycheckers" e dê
      permissão de execução.
      #+begin_src sh
        #!/bin/bash

        epylint "$1" 2>/dev/null
        pyflakes "$1"
        pep8 --ignore=E221,E701,E202 --repeat "$1"
        true
      #+end_src
***** Script que o flymake usa para fazer a checagem (Segunda versão)
      :PROPERTIES:
      :TANGlE:   no
      :END:
      Em
      http://people.cs.uct.ac.za/~ksmith/2011/better-python-flymake-integration-in-emacs.html
      vc encontra o shell script python abaixo que pode ser usado com o
      flymake.

      Salve ele na pasta /usr/local/bin com o nome de "pyflakespep8.py" e dê
      permissão de execução.
      #+begin_src python
        #!/usr/bin/env python
        import commands
        import re
        import sys


        def make_re(*msgs):
            return re.compile('(%s)' % '|'.join(msgs))

        pyflakes_ignore = make_re('unable to detect undefined names')
        pyflakes_warning = make_re(
            'imported but unused',
            'is assigned to but never used',
            'redefinition of unused',
        )
        pep8_ignore = ['E501']
        pep8_warning = make_re('.')


        def run(cmd, ignore_re, warning_re):
            output = commands.getoutput(cmd)
            for line in output.splitlines():
                if ignore_re and ignore_re.search(line):
                    continue
                elif ': ' in line and warning_re.search(line):
                    line = '%s: WARNING %s' % tuple(line.split(': ', 1))
                    print line


        run('pyflakes %s' % sys.argv[1], pyflakes_ignore, pyflakes_warning)
        print '## pyflakes above, pep8 below ##'
        pep8_ignore = ' '.join('--ignore=%s' % i for i in pep8_ignore)
        run('pep8 %s --repeat %s' % (pep8_ignore, sys.argv[1]), None, pep8_warning)
      #+end_src
*** Auto-Insert                                                     :AutoInsert:
    #+begin_src emacs-lisp
      (define-auto-insert "\\.py" "my-python-template.py")
    #+end_src
*** my-python-compile                                                     :Hook:
    #+begin_src emacs-lisp
      ;; Pegue em http://wwwx.cs.unc.edu/~gb/wp/blog/2008/03/15/running-python-from-within-emacs/
      ;; Com essa função você pode rodar um script python usando o compile buffer
      ;; (make-local-variable 'py-master-file)
      (defun my-python-compile ()
        "Use compile to run python programs. If the py-master-file variable is set, run that file. If not, run the file associated with the current buffer."
        (interactive)
        (save-buffer)
        (if ; If the variable py-master-file exists we are using python-mode.el
            (boundp 'py-master-file)
            (if ; In that case, we will run the file pointed by py-master-file or
                ; the file associated with the current buffer
                (eq py-master-file nil)
                (compile (concat "python " (buffer-file-name)) nil)
              (compile (concat "python " py-master-file) nil)
              )
          ;; If py-master-file does not exist we are using the default python.el
          ;; from emacs and we will run the file associated with the current
          ;; buffer
          (compile (concat "python " (buffer-file-name)) nil)
          ))

      (defun my-python-mode-hook ()
        ;; Run the program in the compilation buffer
        (local-set-key [f9] 'my-python-compile)
        (local-set-key [S-f9] 'kill-compilation))

      (add-hook 'python-mode-hook 'my-python-mode-hook)
    #+end_src
*** Set outline keybindings                                   :Hook:Keybindings:
    The regex is alread set by the fgallina python.el implementation. All I
    need to do is setting my keybindings.
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook 'darlan/set-outline-key-bindings)
    #+end_src
*** Enable highlight-symbol minor-mode                         :HighlightSymbol:
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook
                (lambda ()
                  ;; Minor-mode that highlights the symbol under
                  ;; point throughout the buffer
                  (highlight-symbol-mode)
                  (darlan/set-highlight-symbol-key-bindings)
                  ))
          #+end_src
*** Enable Indent-guide-mode                                       :IndentGuide:
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook
                (lambda ()
                  ;; Enable indent-guide-mode -> Show vertical lines to guide
                  ;; indentation
                  (indent-guide-mode t)
                  ))
    #+end_src
*** Autocomplete
    The actual configuration for auto-complete is in the Ropemacs
    configuration, or in the Jedi configuration (depending on which one is
    currently used). However, in either case I prefer to modify the color
    of the ac-source to green instead of the default gray in auto-complete
    to make it clear that a "smart" source is being used. Here we just
    define the faces for the source.
    #+begin_src emacs-lisp
      (defface ac-my-python-candidate-face
        '((t (:background "pale green" :foreground "black")))
        "Face for ropemacs candidate."
        :group 'auto-complete)
      
      (defface ac-my-python-selection-face
        '((t (:background "dark green" :foreground "white")))
        "Face for the ropemacs selected candidate."
        :group 'auto-complete)
    #+end_src
*** Ropemacs                                                          :Ropemacs:
    <<RopemacsWithPython>>
    http://stackoverflow.com/questions/2855378/ropemacs-usage-tutorial
    http://09-f9-11-02-9d-74-e3-5b-d8-41-56-c5-63-56-88-c0.com/2009/01/21/autocompleteel-python-code-completion-in-emacs/
    http://hide1713.wordpress.com/2009/01/30/setup-perfect-python-environment-in-emacs/
    http://bitbucket.org/agr/ropemacs/src/7ec80793f003/docs/ropemacs.txt

    *OBS:* Para usar o ropemacs é necessário instalar
    - rope -> Instalei com o easy_install (apenas instala para python 2.x)
      : root@darlan-M70Vm:/home/darlan# easy_install rope
    - ropemode -> Instalei com o easy_install
      : root@darlan-M70Vm:/home/darlan# easy_install ropemode
    - pymacs -> veja [[Pymacs][aqui]]

    Após feito isso apenas fiz o download do ropemacs e depois rodei o
    comando
    : python setup.py install
    na pasta do ropemacs. Com isso o ropemacs é instalado (na pasta
    /usr/local/lib/<<PythonVersion>>/dist-packages)

***** Ativação do ropemacs
      Also note that ropemacs may redefine some standard Emacs and your
      custom key bindings.  To prevent this, put the following example
      lines to your ``~/.emacs`` *before* ropemacs activation:
      : (setq ropemacs-enable-shortcuts nil)
      : (setq ropemacs-local-prefix "C-c C-p")

******* Function to Load Ropemacs
        #+begin_src emacs-lisp
          ;; Don't allow ropemacs to bind shortcut keys
          ;; Because code-assist is not working correctly (locks emacs) I prefer
          ;; not to bind rope shortcuts (which would overwrite dabbrev-expand in
          ;; M-/, for instance).
          ;; (setq-default ropemacs-enable-shortcuts nil)

          (defun load-ropemacs ()
            "Load pymacs and ropemacs"
            (interactive)
            ;; (setq-default ropemacs-enable-shortcuts nil);;
            ;; (setq ropemacs-enable-shortcuts nil)

            ;; Ropemacs needs pymacs. Therefore, we will only run the ropemacs
            ;; configuration commands if we can load pymacs.
            (with-library 'pymacs
                (setq ropemacs-global-prefix "\C-xrp")
                (pymacs-load "ropemacs" "rope-")
                ;; (setq ropemacs-enable-autoimport t)
                ;; (setq ropemacs-autoimport-modules '("os" "sys"))

                ;; Automatically save project python buffers before refactorings
                (setq ropemacs-confirm-saving 'nil)

                (setq ropemacs-enable-autoimport t
                      ropemacs-autoimport-modules '( "os"
                                                     "sys"
                                                     "itertools"
                                                     "operator"
                                                     "numpy"
                                                     )
                      ;; ropemacs-max-doc-buffer-height 40
                      ;; ropemacs-global-prefix nil

                      ;; Try to guess the project when needed.
                      ;; ropemacs-guess-project t
                      ropemacs-separate-doc-buffer t
                      ;; ropemacs-enable-shortcuts nil
                      )

                (ropemacs-mode t)

                ;; Disable the shortcut for rope-code-assist -> keep the
                ;; other shortcuts
                (define-key ropemacs-local-keymap (kbd "M-/") 'dabbrev-expand)
                ))

        #+end_src

******* COMMENT Set ropemacs to be loaded automatically in every python buffer
        :PROPERTIES:
        :TANGlE:   no
        :END:
        Load Ropemacs automatically in every python buffer
        #+begin_src emacs-lisp
          (with-eval-after-load "python"
            (load-ropemacs)
            ;; Initialize ropemacs auto-completion source
            )
        #+end_src

***** Using Ropemacs (tips)
      You can modify your ROOT/.ropeproject/config.py file to add more
      directories to the rope lookup path, in order to provide better
      autocomplete.

      EDIT: Two of the most important functions for me are looking up
      documentation and jumping directly to a function definition. This
      is dependent on setting the rope lookup path correctly for your
      project as mentioned above.

      *Documentation*: Put the cursor over a symbol (function name, class
      name, etc), and do:
      =C-c d=

      This will show you the docstring for the symbol in question.

      *Jumping to definition*:Put the cursor over a symbol (function name,
      class name, etc), and do:
      =C-c g=

      This will immediately open the file where the symbol resides and
      jump to the beginning of the definition. This is great for times
      when the documentation is sparse and you want to see the actual
      code. Also, it's really nice for navigating around inside your own
      code.

      *Find occurrences:*
      =C-c f=

      Smart search in your entire project for the symbol at the cursor.

      *Code assist:*
      =M-/=

      Just type the first characters of a function, class, etc, and this
      will show a list of possible completions. Note that due to python's
      nature, it will not always be a complete list.

      Refactorings: There are quite a few options under
      Rope->Refactor. These are to organize your code better. How to use
      them should be mostly self-explanatory; in general, select the
      region of code you want to refactor, then choose the command.

      Edit: In response to a comment below, here's exactly how to add
      other paths to your python path so autocomplete will look for those
      symbols as well.
      #+begin_src python :tangle no
        prefs.add('python_path', '~/path/to/virtualenv/lib/python2.6/site-packages')
      #+end_src
      This goes in .ropeproject/config.py

***** Mais dicas de uso: Getting Started

      Getting Started
      ===============

      Refactoring Dialog
      ------------------

      Ropemacs refactorings use a special kind of dialog.  When you start a
      refactoring, you'll be asked to confirm saving modified python
      buffers; you can change it by using ``ropemacs-confirm-saving``
      variable.  Adding ``(setq ropemacs-confirm-saving 'nil)`` to your
      ``.emacs`` file, will make emacs save them without asking.

      After that depending on the refactoring, you'll be asked about the
      essential information a refactoring needs to know (like the new name
      in rename refactoring).  You can skip it by prefixing the refactoring;
      this can be useful when using batchset command (described later).

      Next you'll see the base prompt of a refactoring dialog that shows
      something like "Choose what to do".  By entering the name of a
      refactoring option you can set its value.  After setting each option
      you'll be returned back to the base prompt.  Finally, you can ask rope
      to perform, preview or cancel the refactoring.

      See keybinding_ section and try the refactorings yourself.


      Finding Files
      -------------

      By using ``rope-find-file`` (``C-x p f`` by default), you can search
      for files in your project.  When you complete the minibuffer you'll
      see all files in the project; files are shown as their reversed paths.
      For instance ``projectroot/docs/todo.txt`` is shown like
      ``todo.txt<docs``.  This way you can find files faster in your
      project.  ``rope-find-file-other-window`` (``C-x p 4 f``) opens the
      file in the other window.  With prefix, these commands show python
      files only.


      Code-Assist
      -----------

      ``rope-code-assist`` command (``M-/`` by default) will let you select
      from a list of completions.  If prefixed (``C-u M-/``), ropemacs
      inserts the common prefix, automatically.  If a numeric argument is
      given, ropemacs will insert the common prefix for that many of the
      first proposals.

      ``rope-lucky-assist`` command (``M-?``) does not ask anything;
      instead, it inserts the first proposal.  By prefixing it, you can
      choose which proposal to insert.  ``C-u 1 M-?`` uses the second
      propsal, for instance.

      Here::

        xxaa = None
        xxab = None
        xxba = None
        xxbb = None

        x^

      consider cursor is at ``^`` position.  This table shows what happens
      when code-assist commands are used:

      ============  ==========  =======================
      Key           Inserts     Minibuffer Completions
      ============  ==========  =======================
      M-/                       xxaa, xxab, xxba, xxbb
      C-u M-/       x           xxaa, xxab, xxba, xxbb
      C-u 2 M-/     xa          xxaa, xxab
      M-?           xaa
      C-u 1 M-/     xab
      C-u 3 M-/     xbb
      ============  ==========  =======================

      Note that minibuffer completions are shown by pressing tab key at the
      completion prompt.  Also you can use ``rope-completions`` lisp function
      to get the list of completions.


      Finding Occurrences
      -------------------

      The find occurrences command (``C-c f`` by default) can be used to
      find the occurrences of a python name.  If ``unsure`` option is
      ``yes``, it will also show unsure occurrences; unsure occurrences are
      indicated with a ``?`` mark in the end.


      Dialog ``batchset`` Command
      ---------------------------

      When you use ropemacs dialogs there is a command called ``batchset``.
      It can set many options at the same time.  After selecting this
      command from dialog base prompt, you are asked to enter a string.

      ``batchset`` strings can set the value of configs in two ways.  The
      single line form is like this::

        name1 value1
        name2 value2

      That is the name of config is followed its value.  For multi-line
      values you can use::

        name1
         line1
         line2

        name2
         line3

      Each line of the definition should start with a space or a tab.  Note
      that blank lines before the name of config definitions are ignored.

      ``batchset`` command is useful when performing refactorings with long
      configs, like restructurings::

        pattern ${pycore}.create_module(${project}.root, ${name})

        goal generate.create_module(${project}, ${name})

        imports
         from rope.contrib import generate

        args
         pycore: type=rope.base.pycore.PyCore
         project: type=rope.base.project.Project

      .. ignore the two-space indents

      This is a valid ``batchset`` string for restructurings.  When using
      batchset, you usually want to skip initial questions.  That can be
      done by prefixing refactorings.

      Just for the sake of completeness, the reverse of the above
      restructuring can be::

        pattern ${create_module}(${project}, ${name})

        goal ${project}.pycore.create_module(${project}.root, ${name})

        args
         create_module: name=rope.contrib.generate.create_module
         project: type=rope.base.project.Project


      Enabling Autoimport
      -------------------

      Ropemacs can propose and automatically import global names in other
      modules.  But this feature is disabled by default.  Before using it,
      you should add::

        (setq ropemacs-enable-autoimport 't)

      to your ``~/.emacs`` file.  After enabling, rope maintains a cache of
      global names for each project.  It updates the cache only when modules
      are changed; if you want to cache all your modules at once, use
      ``rope-generate-autoimport-cache``.  It will cache all of the modules
      inside the project plus those whose names are listed in
      ``ropemacs-autoimport-modules`` list::

        # add the name of modules you want to autoimport
        (setq ropemacs-autoimport-modules '("os" "shutil"))

      Now if you are in a buffer that contains::

        rmtree

      and you execute ``ropemacs-auto-import`` you'll end up with::

        from shutil import rmtree
        rmtree

      Also ``rope-code-assist`` and ``rope-lucky-assist`` propose
      auto-imported names by using ``name : module`` style.  Selecting them
      will import the module automatically.


      Filtering Resources
      -------------------

      Some refactorings, restructuring and find occurrences take an option
      called resources.  This option can be used to limit the resources on
      which a refactoring should be applied.

      It uses a simple format: each line starts with either '+' or '-'.
      Each '+' means include the file (or its children if it's a folder)
      that comes after it.  '-' has the same meaning for exclusion.  So
      using::

        +rope
        +ropetest
        -rope/contrib

      means include all python files inside ``rope`` and ``ropetest``
      folders and their subfolder, but those that are in ``rope/contrib``.
      Or::

        -ropetest
        -setup.py

      means include all python files inside the project but ``setup.py`` and
      those under ``ropetest`` folder.


      Variables
      ---------

      + ``ropemacs-confirm-saving``: If non-nil, you have to confirm saving all
        modified python files before refactorings; otherwise they are saved
        automatically. Defaults to ``t``.
      + ``ropemacs-codeassist-maxfixes``: The maximum number of syntax errors
        to fix for code assists.  The default value is ``1``.
      + ``ropemacs-separate-doc-buffer``: Should ``rope-show-doc`` use a
        separate buffer or the minibuffer.  Defaults to ``t``.
      + ``ropemacs-guess-project``: If non-nil, ropemacs tries to guess and
        open the project that contains the file on which a rope command is
        performed when no project is already opened.

      + ``ropemacs-enable-autoimport``: Shows whether to enable autoimport.
        Defaults to ``nil``.
      + ``ropemacs-autoimport-modules``: The name of modules whose global
        names should be cached.  ``rope-generate-autoimport-cache`` reads
        this list and fills its cache.
      + ``ropemacs-autoimport-underlineds``: If set, autoimport will cache
        names starting with underlines, too.

      These variables change the keybinding.  They should be set before
      loading ropemacs.

      + ``ropemacs-local-prefix``: The prefix for ropemacs refactorings.
        Defaults to ``C-c r``.
      + ``ropemacs-global-prefix``: The prefix for ropemacs project commands
        Defaults to ``C-x p``.
      + ``ropemacs-enable-shortcuts``: Shows whether to bind ropemacs
        shortcuts keys.  Defaults to ``t``.


      Keybinding
      ----------

      Uses almost the same keybinding as ropeide.  Note that global commands
      have a ``C-x p`` prefix and local commands have a ``C-c r`` prefix.
      You can change that (see variables_ section).

      ================  ============================
      Key               Command
      ================  ============================
      C-x p o           rope-open-project
      C-x p k           rope-close-project
      C-x p f           rope-find-file
      C-x p 4 f         rope-find-file-other-window
      C-x p u           rope-undo
      C-x p r           rope-redo
      C-x p c           rope-project-config
      C-x p n [mpfd]    rope-create-(module|package|file|directory)
                        rope-write-project

      C-c r r           rope-rename
      C-c r l           rope-extract-variable
      C-c r m           rope-extract-method
      C-c r i           rope-inline
      C-c r v           rope-move
      C-c r x           rope-restructure
      C-c r u           rope-use-function
      C-c r f           rope-introduce-factory
      C-c r s           rope-change-signature
      C-c r 1 r         rope-rename-current-module
      C-c r 1 v         rope-move-current-module
      C-c r 1 p         rope-module-to-package

      C-c r o           rope-organize-imports
      C-c r n [vfcmp]   rope-generate-(variable|function|class|module|package)

      C-c r a /         rope-code-assist
      C-c r a g         rope-goto-definition
      C-c r a d         rope-show-doc
      C-c r a f         rope-find-occurrences
      C-c r a ?         rope-lucky-assist
      C-c r a j         rope-jump-to-global
      C-c r a c         rope-show-calltip
                        rope-analyze-module

                        rope-auto-import
                        rope-generate-autoimport-cache
      ===============   ============================


      Shortcuts
      ---------

      Some commands are used very frequently; specially the commands in
      code-assist group.  You can define your own shortcuts like this::

        (define-key ropemacs-local-keymap "\C-cg" 'rope-goto-definition)

      Ropemacs itself comes with a few shortcuts:

      ================  ============================
      Key               Command
      ================  ============================
      M-/               rope-code-assist
      M-?               rope-lucky-assist
      C-c g             rope-goto-definition
      C-c d             rope-show-doc
      C-c f             rope-find-occurrences
      ================  ============================

      These shortcuts will be used only when ropemacs-enable-shortcuts is
      non-nil (it is enabled by default).  Note that in order to disable these
      shortcuts, the value of ropemacs-enable-shortcuts should be set *before*
      loading ropemacs::

        (setq ropemacs-enable-shortcuts 'nil)


      Contributing
      ============

      Send your bug reports, feature requests and patches to `rope-dev (at)
      googlegroups.com`_.

      .. _`rope-dev (at) googlegroups.com`: http://groups.google.com/group/rope-dev


      License
      =======

      This program is under the terms of GPL (GNU General Public License).
      Have a look at ``COPYING`` file for more information.

***** Ropemacs Keybindings Cheat Sheet
      Configuração do Ropemacs está em [[RopemacsWithPython][aqui]]. *Use o atalho \C-xpl para carregar
      o ropemacs*.

      http://bitbucket.org/agr/ropemacs/src/7ec80793f003/docs/
      Keybinding
      ----------

      Uses almost the same keybinding as ropeide.  Note that global commands
      have a ``C-x p`` prefix and local commands have a ``C-c r`` prefix.
      You can change that (see variables_ section).

      ================  ============================
      Key               Command
      ================  ============================
      C-x p o           rope-open-project
      C-x p k           rope-close-project
      C-x p f           rope-find-file
      C-x p 4 f         rope-find-file-other-window
      C-x p u           rope-undo
      C-x p r           rope-redo
      C-x p c           rope-project-config
      C-x p n [mpfd]    rope-create-(module|package|file|directory)
      rope-write-project

      C-c r r           rope-rename
      C-c r l           rope-extract-variable
      C-c r m           rope-extract-method
      C-c r i           rope-inline
      C-c r v           rope-move
      C-c r x           rope-restructure
      C-c r u           rope-use-function
      C-c r f           rope-introduce-factory
      C-c r s           rope-change-signature
      C-c r 1 r         rope-rename-current-module
      C-c r 1 v         rope-move-current-module
      C-c r 1 p         rope-module-to-package

      C-c r o           rope-organize-imports
      C-c r n [vfcmp]   rope-generate-(variable|function|class|module|package)

      C-c r a /         rope-code-assist
      C-c r a g         rope-goto-definition
      C-c r a d         rope-show-doc
      C-c r a f         rope-find-occurrences
      C-c r a ?         rope-lucky-assist
      C-c r a j         rope-jump-to-global
      C-c r a c         rope-show-calltip
      rope-analyze-module

      rope-auto-import
      rope-generate-autoimport-cache
      ===============   ============================


      Shortcuts
      ---------

      Some commands are used very frequently; specially the commands in
      code-assist group.  You can define your own shortcuts like this::

      (define-key ropemacs-local-keymap "\C-cg" 'rope-goto-definition)

      Ropemacs itself comes with a few shortcuts:

      ================  ============================
      Key               Command
      ================  ============================
      M-/               rope-code-assist
      M-?               rope-lucky-assist
      C-c g             rope-goto-definition
      C-c d             rope-show-doc
      C-c f             rope-find-occurrences
      ================  ============================

      These shortcuts will be used only when ropemacs-enable-shortcuts is
      non-nil (it is enabled by default).  Note that in order to disable these
      shortcuts, the value of ropemacs-enable-shortcuts should be set *before*
      loading ropemacs::

      (setq ropemacs-enable-shortcuts 'nil)

***** COMMENT Auto-complete ropemacs source                       :AutoComplete:
      :PROPERTIES:
      :TANGlE:   no
      :END:
      The ac-source-ropemacs source is defined in the auto-complete-config.el
      library.

      #+begin_src emacs-lisp
        (with-eval-after-load "auto-complete"
          ;; I got these custom nropemacs and nropemacs-dot sources from
          ;; https://bitbucket.org/birkenfeld/dotemacs/src/3de0dc9c5ad0e3b9d8cbed8dd77f4fa294e10855/auto-complete-python.el?at=default
          ;; I added a custom face for them and changed the symbol to 'r'.
          (defun ac-ropemacs-candidates ()
            (mapcar (lambda (completion)
                      (concat ac-prefix completion))
                    (rope-completions)))

          (ac-define-source nropemacs
                            '((candidates . ac-ropemacs-candidates)
                              (candidate-face . ac-my-python-candidate-face)
                              (selection-face . ac-my-python-selection-face)
                              (symbol     . "r")))

          (ac-define-source nropemacs-dot
                            '((candidates . ac-ropemacs-candidates)
                              (candidate-face . ac-my-python-candidate-face)
                              (selection-face . ac-my-python-selection-face)
                              (symbol     . "r")
                              (prefix     . c-dot)
                              (requires   . 0)))
          )

        ;; Possible sources for auto-complete from ropemacs
        ;; - ac-source-ropemacs: Defined in the auto-complete-config.el file
        ;; - nropemacs: Defined here
        ;; - nropemacs-dot: Defined here
        ;;
        ;; Note that the completion will come from the first source that has it
        (defun darlan/add-ropemacs-source ()
          "Add the ropemacs source (provided in the auto-complete-config
              library) in the python buffers."
          (setq ac-sources '(ac-source-yasnippet ac-source-dictionary
                                                 ac-source-nropemacs
                                                 ac-source-nropemacs-dot))
          ;; (add-to-list 'ac-omni-completion-sources
          ;;              (cons "\\." '(ac-source-nropemacs-dot)))
          ;; (add-to-list 'ac-omni-completion-sources
          ;;              (cons "\\." '(ac-source-nropemacs)))
          )

        (add-hook 'python-mode-hook 'darlan/add-ropemacs-source)

      #+end_src

*** COMMENT Emacs Jedi                                                    :Jedi:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Useful Keybindings
    - C-c TAB -> jedi complete
    - C-c / -> Jedi related names
    - C-c . -> jedi goto definition
      - Use "C-c ," to go back after using "C-c ."
    - C-c d -> jedi show doc



    # Don't use at the same time as ropemacs. Activate only one of them.
    #+begin_src emacs-lisp
      ;; This need to be set BEFORE jedi is loaded.
      (setq jedi:setup-keys t)  ; Set the default jedi keybindings
         ;; ``<C-tab>`` : = `jedi:key-complete'
         ;;     Complete code at point. (`jedi:complete')
      
         ;; ``C-.`` : = `jedi:key-goto-definition'
         ;;     Goto the definition of the object at point. (`jedi:goto-definition')
      
         ;; ``C-c d`` : = `jedi:key-show-doc'
         ;;     Goto the definition of the object at point. (`jedi:show-doc')
      
         ;; ``C-c r`` : = `jedi:key-related-names'
         ;;     Find related names of the object at point.
         ;;     (`helm-jedi-related-names' / `anything-jedi-related-names')
      
      ;; Load the jedi library if it is available
      (with-library 'jedi
          ;; (add-hook 'python-mode-hook 'jedi:setup)
          ;; (add-hook 'python-mode-hook 'jedi:ac-setup)
          (autoload 'jedi:setup "jedi" nil t)           ; You should Probably remove this line
          (setq jedi:complete-on-dot t)                 ; optional
      
          (add-hook 'python-mode-hook 'jedi:setup)
      
          (with-library 'jedi-eldoc
               ;; change face as you like
               (set-face-attribute 'jedi-eldoc:highlight-function-argument nil
                                   :foreground "green")
               (add-hook 'python-mode-hook 'jedi-eldoc-mode))
      
          ;; Jedi provides the ac-source-jedi-direct source, which is
          ;; automatically added to ac-sources by the jedi-setup function. Here
          ;; we only modify the color of the ac-source-jedi-direct source to my
          ;; predefined (green) faces.
          (add-to-list 'ac-source-jedi-direct '(candidate-face . ac-my-python-candidate-face))
          (add-to-list 'ac-source-jedi-direct '(selection-face . ac-my-python-selection-face))
          )
    #+end_src
*** COMMENT Elpy                                                          :Elpy:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      (elpy-enable)
    #+end_src

*** COMMENT Elpy (old config)                                             :Elpy:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Elpy provides many features using other packates suck as Jedi or
    Ropemacs, highlight-indentation, yasnippets, etc.
    #+begin_src emacs-lisp
      
      (package-initialize)
      
      (with-library 'jedi
         ;; Enable elpy in all future Python buffers
         (elpy-enable)
      
         ;; Use IPython
         (elpy-use-ipython)
         
         ;; (elpy-clean-modeline)
      
         ;; Modify the Elpy acuto-complete sources
         (add-to-list 'ac-source-elpy-dot '(candidate-face . ac-my-python-candidate-face))
         (add-to-list 'ac-source-elpy-dot '(selection-face . ac-my-python-selection-face))
      
         (add-to-list 'ac-source-elpy '(candidate-face . ac-my-python-candidate-face))
         (add-to-list 'ac-source-elpy '(selection-face . ac-my-python-selection-face))
      )
    #+end_src
*** COMMENT Elpy (manual key-bindings - Disable this if you enable elpy-mode) :Elpy:Keybindings:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    I don't like everything in Elpy and unfortunatelly it does not provide
    many ways to customize it. However, it has some pretty good
    functions. Therefore, I'll bind some of these functions to its regular
    keybindings in python buffers.
    
    #+begin_src emacs-lisp
      ;; (autoload 'elpy-occur-definitions "elpy" nil t)
      ;; (autoload 'elpy-show-defun "elpy" nil t)
      ;; (autoload 'elpy-nav-backward-statement "elpy" nil t)
      ;; (autoload 'elpy-nav-forward-statement "elpy" nil t)
      ;; (autoload 'elpy-nav-forward-definition "elpy" nil t)
      ;; (autoload 'elpy-nav-backward-definition "elpy" nil t)

      (autoload 'elpy-nav-next-iblock "elpy" nil t)
      (autoload 'elpy-nav-previous-iblock "elpy" nil t)

      ;; (add-hook 'python-mode-hook
      ;;           (lambda ()
      ;;             ;; C-c C-o     elpy-occur-definitions
      ;;             (local-set-key "\C-c\C-o" 'elpy-occur-definitions)

      ;;             ;; C-c C-q     elpy-show-defun
      ;;             (local-set-key "\C-c\C-q" 'elpy-show-defun)

      ;;             ;; M-a         elpy-nav-backward-statement
      ;;             (local-set-key "\M-a" 'elpy-nav-backward-statement)

      ;;             ;; M-e         elpy-nav-forward-statement
      ;;             (local-set-key "\M-e" 'elpy-nav-forward-statement)

      ;;             ;; M-n, C-down elpy-forward-definition
      ;;             (local-set-key "\C-\M-n" 'elpy-nav-next-iblock)

      ;;             ;; M-p, C-up   elpy-backward-definition
      ;;             (local-set-key "\C-\M-p" 'elpy-nav-previous-iblock)

      ;;             ;; Outline "go UP"
      ;;             (local-set-key "\C-\M-u" 'outline-up-heading)
      ;;             ))
    #+end_src
*** Anaconda mode
    Usage:
    |------------+--------------------------------|
    | Keybinding | Description                    |
    |------------+--------------------------------|
    | M-.        | anaconda-mode-goto-definitions |
    | M-*        | anaconda-nav-pop-marker        |
    | M-?        | anaconda-mode-view-doc         |
    | M-r        | anaconda-mode-usages           |
    |------------+--------------------------------|
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook 'anaconda-mode)
    #+end_src
***** Completions
      Anaconda-mode will change completion-at-point-functions to include
      =anaconda-mode-complete-at-point=. That means that it should work
      out-of-the-box with Emacs standard C-M-i key-binding.

      Also, one of company back-ends IS the standard Emacs
      completion-at-point-functions. Therefore, company-mode should also
      work out-of-the-box. For instance, write "np.al" and try to complete
      it.

      On the other hand, the company-anaconda back-end is more complete
      back-end and thus we will use it. One particularly useful improvement
      is that it can complete just after the dot, while with
      complete-at-point you need to write at least one letter.
******* Companny-mode backend
        #+begin_src emacs-lisp
          (add-to-list 'company-backends 'company-anaconda)
        #+end_src
*** Anaconda Environments
    Anaconda environments are very similar to virtualenv environments. That
    means that we can use the =virtualenvwrapper= emacs package to work
    with them.

    For that we just need to change the location where the
    =virtualenvwrapper= emacs package looks for the environments.
    #+begin_src emacs-lisp
      (setq venv-location "/home/darlan/miniconda3/envs")
    #+end_src
    
    Now you can use activate an environment with =venv-workon=.

*** Eldoc                                                                 :Hook:
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook 'eldoc-mode)
    #+end_src
*** Make .pyx (Cython files) open in python mode
    #+begin_src emacs-lisp
      (autoload 'cython-mode "cython-mode" "Major mode for Cython development, derived from Python mode." t)
      (add-to-list 'auto-mode-alist '("\.pyx" . cython-mode))
    #+end_src
*** Easily run nosetests                            :Nose:Nosetests:Keybindings:
    There is a nose.el library, which provide the nosetests-all
    method. This is a good method to run all tests in a project.

    There is another library called nosetests.el which provides the
    nosetests-compile method. With the cursor in a test case, call this
    method to run only that method. See
    http://blog.chmouel.com/2012/10/14/emacs-and-nosetests/

    This code load the nose.el and the nosetests.el libraries (if they are
    installed) and set key-bindings for the nosetests-all and
    nosetests-compile methods in a python buffer.
    #+begin_src emacs-lisp
      (with-library 'nose

          (add-hook 'python-mode-hook
                    (lambda ()
                      (local-set-key [M-f9] 'nosetests-all)
                      ))
          )

      (with-library 'nosetests
          (add-hook 'python-mode-hook
                    (lambda ()
                      (local-set-key [C-f9] 'nosetests-compile)
                      ))
          )
    #+end_src

*** Open IPython and IPython Qt Console in the current folder
    #+begin_src emacs-lisp
      (defun ipython-terminal-dir (dir-as-string)
        (start-process-shell-command
         "browse"
         "*scratch*"
         (concat "/usr/bin/gnome-terminal --working-directory " (concat "\"" (expand-file-name dir-as-string) "\"" " -e ipython")))
        )

      (defun ipython-terminal-default-dir ()
        "Open ipython terminal in the default directory, which is the
      directory of the file associated with the current buffer."
        (interactive)
        (ipython-terminal-dir default-directory))

      (defun ipython-qtconsole-dir (dir-as-string)
        (message (concat "cd " (concat "" (expand-file-name dir-as-string) "" " && /usr/bin/ipython qtconsole")))
        (start-process-shell-command
         "browse"
         "*scratch*"
         ;; (concat "cd " (concat "\"" (expand-file-name dir-as-string) "\"" " && \"/usr/bin/ipython\""))
         (concat "cd " (concat "" (expand-file-name dir-as-string) "" " && /usr/bin/ipython qtconsole"))
         )
        )

      (defun ipython-qtconsole-default-dir ()
        "Open ipython qtconsole in the default directory, which is the
      directory of the file associated with the current buffer."
        (interactive)
        (ipython-qtconsole-dir default-directory))

      (add-hook 'python-mode-hook
                (lambda ()
                  (local-set-key (kbd "<C-f11>") 'ipython-terminal-default-dir)
                  (local-set-key (kbd "<M-f11>") 'ipython-qtconsole-default-dir)
                  ))
    #+end_src
*** Debug helpers
    http://www.masteringemacs.org/articles/2012/05/29/compiling-running-scripts-emacs/
    #+begin_src emacs-lisp
      (defun python--add-debug-highlight ()
        "Adds a highlighter for use by `python--pdb-breakpoint-string'"
        (highlight-lines-matching-regexp "## DEBUG ##\\s-*$" 'hi-red-b)
        )

      (add-hook 'python-mode-hook 'python--add-debug-highlight)

      (defvar python--pdb-breakpoint-string "import pudb; pudb.set_trace()  ## DEBUG ##"
        "Python breakpoint string used by `python-insert-breakpoint'")

      (defun python-insert-breakpoint ()
        "Inserts a python breakpoint using `pdb'"
        (interactive)
        (back-to-indentation)
        ;; this preserves the correct indentation in case the line above
        ;; point is a nested block
        (split-line)
        (insert python--pdb-breakpoint-string))

      (defadvice compile (before ad-compile-smart activate)
        "Advises `compile' so it sets the argument COMINT to t
      if breakpoints are present in `python-mode' files"
        (when (derived-mode-p major-mode 'python-mode)
          (save-excursion
            (save-match-data
              (goto-char (point-min))
              (if (re-search-forward (concat "^\\s-*" python--pdb-breakpoint-string "$")
                                     (point-max) t)
                  ;; set COMINT argument to `t'.
                  (ad-set-arg 1 t))))))

      ;; Add breakpoints in pudb
      (setq pudb-bp-file (expand-file-name "~/.config/pudb/saved-breakpoints-2.7"))
      (defun pudb-add-breakpoint ()
        (interactive)
        (append-to-file
         (concat "b " buffer-file-name ":"
                 (nth 1 (split-string (what-line))) "\n")
         nil pudb-bp-file))


      ;;(define-key python-mode-map (kbd "<f8>") 'python-insert-breakpoint)
      (add-hook 'python-mode-hook
                (lambda ()
                  (local-set-key [f8] 'python-insert-breakpoint)
                  (local-set-key [C-f8] 'pudb-add-breakpoint)
                  ))
    #+end_src
*** COMMENT Python Cell Mode
    :PROPERTIES:
    :TANGLE:   no
    :END:
    Provided by the python-cell package installed from elpa.

    When the mode is active you can use the following Key Bindings:
    - Ctrl-Down - move to the beginning of the next cell
    - Ctrl-Up - move to the beginning of the previous cell


    Enable python-cell-mode in every python buffer.
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook 'python-cell-mode)
    #+end_src
*** COMMENT Semantic-mode with Python                                 :Semantic:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook
                (lambda ()
                  (semantic-mode)
                  ))
    #+end_src
*** hs-minor-mode
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook
                (lambda ()
                  (hs-minor-mode)
                  ;; Add fringe markers to hide/show with the mouse
                  (hideshowvis-enable)
                  ))
    #+end_src
* Gurobi
  The instructions to install Gurobi include add a few lines to your
  .bashrc file in order to add some folders to the path. However, Emacs
  will not see that and this we add the folders here using the corresponing
  elisp functions.

  We assume that Gurobi was installed in =/opt/gurobi600/=.
  #+begin_src emacs-lisp
    (setenv "GUROBI_HOME" "/opt/gurobi600/linux64")
    (setenv "LD_LIBRARY_PATH" "/opt/gurobi600/linux64/lib")
    (setenv "PATH" (concat (getenv "PATH") ":/opt/gurobi600/linux64/bin"))
    (setq exec-path (append exec-path '("/opt/gurobi600/linux64/bin")))
  #+end_src
* Gnuplot                                                              :GnuPlot:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Gnuplot xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  #+begin_src emacs-lisp
    ;; these lines enable the use of gnuplot mode
      (autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
      (autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)

    ;; this line automatically causes all files with the .gp extension to
    ;; be loaded into gnuplot mode
      (setq auto-mode-alist (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))

    ;; This line binds the function-9 key so that it opens a buffer into
    ;; gnuplot mode
      ;; (global-set-key [(f9)] 'gnuplot-make-buffer)
  #+end_src
* Org-File Setup                                                      :noexport:
#+STARTUP: odd
#+OPTIONS: toc:nil
#+OPTIONS: ^:{}
#+STARTUP: hidestars
