#+TITLE:Emacs Programming Languages Configurations
#+AUTHOR:Darlan Cavalcante Moreira
#+EMAIL:darcamo@gmail.com
#+tags: Programming

* Company-mode (require)                                               :Company:
  #+begin_src emacs-lisp
    ;; (require 'company)
    (use-package company
      :diminish company-mode
      )
  #+end_src
* General Programming                                                 :FontLock:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx General Programming xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

  Adicione uma chamada a função abaixo nos hooks das linguagens que interessar.
  #+begin_src emacs-lisp
    ;; Pegue em https://github.com/alexott/emacs-configs/blob/master/rc/emacs-rc-common-hooks.el#LNaN
    (defun alexott/show-prog-keywords ()
      ;; highlight additional keywords
      (font-lock-add-keywords
       nil '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))
      (font-lock-add-keywords
       nil '(("\\<\\(DONE\\):" 1 font-lock-doc-face t)))
      )

    (defun darlan/common-programming-options ()
      ;; Common settings that I always set in any programming language

      ;; Make the words TODO, FIXME and BUG keywords with a warning face, as
      ;; well as the DONE word to a keyword with a doc-face.
      (alexott/show-prog-keywords)

      ;; Minor-mode that highlights the symbol under
      ;; point throughout the buffer
      (highlight-symbol-mode)
      (darlan/set-highlight-symbol-key-bindings)

      ;; Enable indent-guide-mode -> Show vertical lines to guide indentation
      (indent-guide-mode t)

      ;; highlights parentheses, brackets, and braces according to their depth.
      (rainbow-delimiters-mode t)

      ;; Highlight numbers in source code
      (highlight-numbers-mode)
      )

  #+end_src

  This will run darlan/common-programming-options on any mode derived from
  prog-mode.
  #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook 'darlan/common-programming-options)
  #+end_src
*** Flycheck                                                          :flycheck:
***** Activates flycheck globally
      #+begin_src emacs-lisp
        (add-hook 'after-init-hook #'global-flycheck-mode)
      
        ;; flycheck uses the general next-error and previous-error for navigating.
        ;;(global-set-key [f5] 'next-error)
        ;;(global-set-key [C-f5] 'previous-error)
      #+end_src
***** Common flycheck configuration
      #+begin_src emacs-lisp
        (setq flycheck-display-errors-delay 0.1)
      #+end_src
***** Disable flycheck in a few modes when I don't want it
      #+begin_src emacs-lisp
        ;; Disable flycheck in some modes. It does not work anyway in these modes
        ;; and it will just still the "C-c !" keybinding used in these modes.
        (setq flycheck-global-modes '(not org-mode matlab-mode))
      #+end_src
*** COMMENT Flycheck-pos-tip
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      (eval-after-load 'flycheck
        '(custom-set-variables
         '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))
    #+end_src
* ECB
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Eemacs Code Browser (ECB) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

  Here we have the common configuration for the Emacs Code Browser.
  
  #+begin_src emacs-lisp
    (with-eval-after-load "ecb"
      (setq ecb-tip-of-the-day nil)
      (setq ecb-compile-window-height 10)
      ;;(setq ecb-auto-activate t)  ;;This should only be true if you always want to run
      (setq ecb-layout-name "left11")
      ;;(setq ecb-primary-secondary-mouse-buttons (quote mouse-1–mouse-2))
      ;;(setq ecb-source-path (quote ("~/")))
      )
  #+end_src

* Emacs Lisp
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Emacs Lisp xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Outline Support                                                       :Hook:
    #+begin_src emacs-lisp
      (add-hook 'emacs-lisp-mode-hook
                (lambda () (darlan/set-up-outline-minor-mode "\\((\\|;;;\\)")))
    #+end_src
*** Indent-Guide-mode                                              :IndentGuide:
    #+begin_src emacs-lisp
      (add-hook 'emacs-lisp-mode-hook
                (lambda () (indent-guide-mode t)))
    #+end_src
* Java                                                                    :Java:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Java xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Activate Semantic Mode in java buffers                            :Semantic:
    #+begin_src emacs-lisp
      (add-hook 'java-mode-hook
                (lambda ()
                  (semantic-mode 1)
                  )
      )
    #+end_src
*** Use Eclim (eclipse integration)
    #+begin_src emacs-lisp
      (use-package eclim
        :config
        ;; Set eclipse directory
        (setq eclim-eclipse-dirs '("/home/darlan/Programas_Locais/eclipse"))
        ;; Set the eclim executable
        (setq eclim-executable "/home/darlan/Programas_Locais/eclipse/eclim")
        )

      (use-package company-emacs-eclim
        :config
        (company-emacs-eclim-setup)
        )
    #+end_src
*** Auto-Insert                                                     :AutoInsert:
    #+begin_src emacs-lisp
      (define-auto-insert
        '("\\.java\\'" . "Java Skeleton")
        '("Short description: "
          "/**" > \n
          " * " (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) > \n
          " *" > \n
          " * @author Darlan Cavalcante Moreira" > \n
          " * @version 1.0" > \n
          " */" > \n
          "public class " (file-name-sans-extension (file-name-nondirectory (buffer-file-name))) " {" > \n \n
          "}" > \n
          ))
    #+end_src
* C/C++                                                            :CPlusPlus:C:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx C/C++ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Other packages to investigate
    Here we have a list of Emacs packages that could be used for C++ if the
    current configuration does not work or is insufficient.
    - malinka
      https://github.com/LefterisJP/malinka
    
*** General Stuff
    #+begin_src emacs-lisp
      ;; To get emacs to see a .h file as C++ rather than C:
      (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

      ;; Set the compile comand to include -j 2 in order to use 2 cores when
      ;; compiling.
      (setq compile-command "make -k -j")

      ;; Set directory to search for source files named in error messages. This
      ;; is important when using cppunit in order to be able to click in a error
      ;; message and go to the correct source file.
      (setq compilation-search-path (quote (nil "tests")))
    #+end_src
*** Compile Functions
    #+begin_src emacs-lisp
      (defun my-save-and-compile ()
        (interactive "")
        (save-buffer 0)
        (compile "make -k -j 2"))

      (defun my-save-and-compile-and-run ()
        (interactive "")
        (save-buffer 0)
        (compile "make -k -j 2 run"))

      ;; Compila apenas o arquivo atual
      (defun my-save-and-compile-single-file ()
        (interactive "")
        (save-buffer 0)
        (if (string= (substring(buffer-name) -1) "p") ; Testa se é o .cpp ou o .h
            ; If it is true and we are in the .cpp file
            (compile (concat "make -k -j 2 " (concat (substring(buffer-name) 0 -4) ".o")))
          ; If false and we are in the .h file
          (compile (concat "make -k -j 2 " (concat(substring(buffer-name) 0 -2) ".o")))
          )
        )

      ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ;; EDE Part will be defined later when EDE is loaded
      (defun my-compile-ede-or-make ()
        "Test if we are in an EDE project. In this case we get the
          correct compilation command from the project. Otherwise we simple
          run Make in the current folder (there should be a Makefile in
          it)."
        (interactive)
        (save-some-buffers t) ; save all buffers
        (if (fboundp 'ede-current-project) ; Test if EDE is even define (loaded)
            (if (ede-current-project)    ; Test if we are in an EDE project
                (my-compile-ede-project) ; Ok, We are in an EDE project
              (compile "make -k -j 2")   ; No, We are not in an EDE project
              )
          (my-save-and-compile)   ; EDE is not loaded at all
          ))

      (defun my-save-and-compile-single-file-ede-or-make ()
        (interactive)
        (save-some-buffers t) ; save all buffers

        (if (fboundp 'ede-current-project) ; Test if EDE is even define (loaded)
            (if (ede-current-project)      ; Test if we are in an EDE project
                (my-compile-ede-project-single-file) ; Ok, We are in an EDE project
              (my-save-and-compile-single-file) ; No, We are not in an EDE project
              )
          (my-save-and-compile-single-file)
          ))
    #+end_src
*** Change between .h and .cpp
    #+begin_src emacs-lisp
      ;; Create by Darlan
      (defun change-between-h-cpp ()
        "If the library eassist is loaded, call
      eassist-switch-h-cpp. Otherwise, call the builtin
      ff-find-other-file function"
        (interactive)
        (if (fboundp 'eassist-switch-h-cpp)
            (eassist-switch-h-cpp)
          (ff-find-other-file)))
    #+end_src
*** my-c-mode-common-hook         :IndentGuide:HighlightSymbol:Hook:Keybindings:
    #+begin_src emacs-lisp
      (defun my-c-mode-common-hook ()
        ;;   (c-set-style "linux")
        ;;(setq ecb-compile-window-height 6)
        (doxymacs-mode)
        (hs-minor-mode t)
        ;  (local-set-key [f9] 'my-save-and-compile) ; Compila todo o projeto
         (local-set-key [C-f9] 'my-save-and-compile-single-file) ; Compila só o .cpp atual
        (local-set-key [f9] 'my-compile-ede-or-make)
        (local-set-key [C-f9] 'my-save-and-compile-single-file-ede-or-make)
        (modify-syntax-entry ?_ "w")       ; now '_' is not considered a word-delimiter
        (local-set-key [f10] 'compile)
        (local-set-key [C-f10] 'my-save-and-compile-and-run) ; Compila todo o projeto e em seguida executa roda o programa
        ;; Case matters when replacing
        (setq case-replace nil)

        (local-set-key [(control c) (control v)] 'change-between-h-cpp)

        ;; (darlan/common-programming-options)
        )

      (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

      ;; Alternar entre .cpp e .h com o atalho C-c C-v
      ;;(define-key global-map [(control c) (control v)] 'ff-find-other-file)
      ;; (define-key global-map [(control c) (control v)] 'eassist-switch-h-cpp)
      ;;(define-key global-map [(control c) (control v)] 'change-between-h-cpp)

    #+end_src
*** COMMENT Debug with GUD                                           :Debug:GUD:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      (gud-tooltip-mode t)

      (defvar gud-overlay
        (let* ((ov (make-overlay (point-min) (point-min))))
          (overlay-put ov 'face 'secondary-selection)
          ov)
        "Overlay variable for GUD highlighting.")


      (defadvice gud-display-line (after my-gud-highlight act)
        "Highlight current line."
        (let* ((ov gud-overlay)
               (bf (gud-find-file true-file)))
          (save-excursion
            (set-buffer bf)
            (move-overlay ov (line-beginning-position) (line-end-position)
                          (current-buffer)))))
    #+end_src
*** COMMENT Compilation Window                                            :Hook:
    :PROPERTIES:
    :TANGLE:   no
    :END:
    #+begin_src emacs-lisp
      ;; Removes compilation window when there are no compilation errors
      (add-hook 'compilation-finish-functions
                (lambda (buf str)
                  (if (string-match "exited abnormally" str)
                      (next-error)
                    ;;no errors, make the compilation window go away in a few seconds
                    (run-at-time "2 sec" nil 'delete-windows-on (get-buffer-create "*compilation*"))
                    (message "No Compilation Errors!")
                    )
                  ))

    #+end_src
*** COMMENT Skeletons                                                :Skeletons:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      ;; xxxxxxxxxx C/C++ Skeletons xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    #+end_src
***** C++ skeleton Comment
      #+begin_src emacs-lisp
        (define-skeleton c++-skeleton-comment
          "Inserts a c comment in a rectangle into current buffer."
          ""
          '(setq str (skeleton-read "Comment: "))
          ;; `str' is set explicitly here, because otherwise the skeleton
          ;; program would set it, only when it is going to insert it into the
          ;; buffer. But we need to determine the length of the string
          ;; beforehand, with `(length str)' below.
          '(when (string= str "") (setq str " - "))
          '(setq v1 (make-string (- fill-column 6) ?*))
          '(setq v2 (- fill-column 10 (length str)))
          "/* " v1 " */" \n
          "/* **"
          (make-string (floor v2 2) ?\ )
          str
          (make-string (ceiling v2 2) ?\ )
          "** */" \n
          "/* " v1 " */")
      #+end_src

***** C++ New Class                                                  :CPlusPlus:
      #+begin_src emacs-lisp
        (defun c++-new-class (class-name)
          "Insert a new class in the buffer with all the bloat code."
          (interactive "MClass Name: ")
          (gtel-c++-copyright)
          (skeleton-insert '(nil                ; Don't prompt
                             "#ifndef " (upcase class-name) "_H" > \n
                             "#define " (upcase class-name) "_H" > \n \n
                             "/**" > \n
                             " * \\brief ***** PUT CLASS DESCRIPTION HERE *****" > \n
                             " * " > \n
                             " * @author Wireless Telecommunications Research Group" > \n
                             " */" > \n
                             "class " class-name " {" > \n
                             "public:" > \n
                             "/**" > \n
                             " * \\brief Default class constructor." > \n
                             "*/" > \n
                             class-name "( );" > \n \n
                             "/**" > \n
                             " * \\brief Virtual class destructor (polymorphism)." > \n
                             "*/" > \n
                             "virtual ~" class-name "( );" > \n \n
                             "protected:" > \n
                             "" > _ \n \n
                             "private:" > \n
                             "//Degenerate copy and assignment" > \n
                             class-name "(const " class-name "&);" > \n
                             class-name "& operator=(const " class-name "&);" > \n
                             "};" > \n \n
                             "#endif" > \n \n \n
                             (gtel-c++-copyright)
                             "#include \"" (downcase class-name)".h\"" > \n \n
                             class-name "::" class-name"( )" > \n
                             "{}" > \n \n \n
                             class-name "::~" class-name"( )" > \n
                             "{}" > \n
                             )))
      #+end_src

      #+begin_src emacs-lisp
        (define-skeleton c++-skeleton-class
          "Insert a 'class {};' region" nil
          "class " (setq v1 (skeleton-read "Class Name: "))" {" > \n
          "public:" > \n
          "/**" > \n
          " * \\brief Default class constructor." > \n
          "*/" > \n
          v1 "();" > \n \n
          "/**" > \n
          " * \\brief Virtual class destructor (polymorphism)." > \n
          "*/" > \n
          "~" v1 "();" > \n \n
          "protected:" > \n
          "" > _ \n \n
          "private:" > \n
          "//Degenerate copy and assignment" > \n
          v1 "(const " v1 "&)" > \n
          v1 "& operator=(const " v1 "&)" > \n
          "};" > \n
        )
      #+end_src
***** CppUnit                                                          :CppUnit:
******* cppunit-main
        #+begin_src emacs-lisp
          (define-skeleton cppunit-main
            "Insert main function (Text Version).
          This only makes sense for empty buffers."
            "This line won't be included in the skeleton"
            "#include <cppunit/CompilerOutputter.h>" > \n
            "#include <cppunit/extensions/TestFactoryRegistry.h>" > \n
            "#include <cppunit/TestResult.h>" > \n
            "#include <cppunit/TestResultCollector.h>" > \n
            "#include <cppunit/TestRunner.h>" > \n
            "#include <cppunit/ui/text/TextTestRunner.h>" > \n \n
            "// Test all TestSuites registered in the TestFactoryRegistry" \n
            "int main (int argc, char* argv[])" > \n
            "{" > \n
            "// Informs test-listener about testresults" > \n
            "CPPUNIT_NS :: TestResult testresult;" > \n \n
            "// register listener for collecting the test-results" > \n
            "CPPUNIT_NS :: TestResultCollector collectedresults;" > \n
            "testresult.addListener (&collectedresults);" > \n \n
            "// insert test-suite at test-runner by registry" > \n
            "CPPUNIT_NS :: TextTestRunner testrunner;" > \n
            "testrunner.addTest (CPPUNIT_NS :: TestFactoryRegistry :: getRegistry ().makeTest ());" > \n
            "testrunner.run ();" > \n \n
            "// return 0 if tests were successful" > \n
            "return collectedresults.wasSuccessful () ? 0 : 1;" > \n
            "}" > \n \n)
        #+end_src
******* cppunit-mainqt
        #+begin_src emacs-lisp
          (define-skeleton cppunit-mainqt
            "Insert main function (Text Version).
          This only makes sense for empty buffers."
            "This line won't be included in the skeleton"
            "#include <cppunit/CompilerOutputter.h>" > \n
            "#include <cppunit/extensions/TestFactoryRegistry.h>" > \n
            "#include <cppunit/TestResult.h>" > \n
            "#include <cppunit/TestResultCollector.h>" > \n
            "#include <cppunit/TestRunner.h>" > \n
            "#include <cppunit/ui/qt/QtTestRunner.h>" > \n
            "#include <qt3/qapplication.h>" > \n \n
            "// Test all TestSuites registered in the TestFactoryRegistry" > \n
            "int main (int argc, char* argv[])" > \n
            "{" > \n
            "QApplication app( argc, argv );" > \n \n
            "// informs test-listener about testresults" > \n
            "CPPUNIT_NS :: TestResult testresult;" > \n \n
            "// register listener for collecting the test-results" > \n
            "CPPUNIT_NS :: TestResultCollector collectedresults;" > \n
            "testresult.addListener (&collectedresults);" > \n \n
            "// insert test-suite at test-runner by registry" > \n
            "CPPUNIT_NS :: QtTestRunner testrunner;" > \n
            "testrunner.addTest (CPPUNIT_NS :: TestFactoryRegistry :: getRegistry ().makeTest ());" > \n
            "testrunner.run ();" > \n \n
            "// return 0 if tests were successful" > \n
            "return collectedresults.wasSuccessful () ? 0 : 1;" > \n
            "}" > \n \n)
        #+end_src

******* cppunit-header
        #+begin_src emacs-lisp
          (defun cppunit-header (class-name)
            "Insert header for a cppunit test class."
            (interactive "MClass to be tested: ")
            (gtel-c++-copyright)
            (skeleton-insert '(nil ; Don't prompt
                               "#ifndef " (upcase class-name) "TEST_H" > \n
                               "#define " (upcase class-name) "TEST_H" > \n
                               "#include <cppunit/TestFixture.h>" > \n
                               "#include <cppunit/extensions/HelperMacros.h>" > \n \n
                               "class " class-name ";" > \n \n
                               "/** \\addtogroup Tests*/" > \n
                               "//@{" > \n \n
                               "/**" > \n
                               " * \\brief Unit tests for the " class-name " class." > \n
                               " */" > \n
                               "class " class-name "Test : public CPPUNIT_NS :: TestFixture" > \n
                               "{" > \n
                               "///\\name CppUnit Test Suite Declaration" > \n
                               "//@{" > \n
                               "CPPUNIT_TEST_SUITE (" class-name "Test);" > \n
                               ("Enter name of test method: " "CPPUNIT_TEST (" str ");" > \n)
                               ;;                     "CPPUNIT_TEST (METHOD_TO_BE_TESTED);" > \n
                               "CPPUNIT_TEST_SUITE_END ();" > \n
                               "//@}" > \n \n
                               "public:" > \n
                               "void setUp (void);" > \n
                               "void tearDown (void);" > \n \n
                               "protected:" > \n
                               "void METHOD_TO_BE_TESTED(void);" > \n \n
                               "private:" > \n
                               class-name " *a;" > \n
                               class-name " *b;" > \n
                               class-name " *c;" > \n
                               "};" > \n
                               "//@}"> \n
                               "#endif" > \n \n \n
                               (gtel-c++-copyright)
                               "// cpp file" \n \n
                               "#include \"../"(downcase class-name)".h\"" > \n
                               "#include \"" (downcase class-name) "test.h\"" > \n \n
                               "CPPUNIT_TEST_SUITE_REGISTRATION ("class-name"Test);" > \n
                               "CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( "class-name"Test, \""class-name"\" );" > \n \n \n
                               "void " class-name "Test::setUp(void)" > \n
                               "{" > \n
                               "// @TODO Implement-me" > \n
                               "}" > \n \n \n
                               "void " class-name "Test::tearDown(void)" > \n
                               "{" > \n
                               "// @TODO Implement-me" > \n
                               "}" > \n \n
                               )))
        #+end_src
***** end
      #+begin_src emacs-lisp
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      #+end_src
*** Doxymacs                                             :Doxygen:Doxymacs:Hook:
    #+begin_src emacs-lisp
      (autoload 'doxymacs-font-lock "doxymacs")
      (autoload 'doxymacs-mode "doxymacs")

      (use-package doxymacs
        :defer t
        :diminish doxymacs-mode
        :config
        (defun my-doxymacs-font-lock-hook ()
          (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
              (doxymacs-font-lock)))
        (add-hook 'font-lock-mode-hook 'my-doxymacs-font-lock-hook)

        (setq doxymacs-doxygen-dirs (quote (("^/home/darlan/GTEL/cvs_files/llcross/" "/home/darlan/GTEL/cvs_files/llcross/llcross.tag" "/home/darlan/GTEL/cvs_files/llcross/docs/html") ("^/home/darlan/cvs_files/llcross/" "/home/darlan/cvs_files/llcross/llcross.tag" "/home/darlan/cvs_files/llcross/docs/html") ("^/home/darlan/GTEL/cvs_files/llmimoofdm/" "/home/darlan/GTEL/cvs_files/llmimoofdm/llmimoofdm.tag" "/home/darlan/GTEL/cvs_files/llmimoofdm/html") ("^/home/darlan/Dropbox/SDR4ALL/darlan_lib_usb/" "/home/darlan/Dropbox/SDR4ALL/darlan_lib_usb/docs/html/sdr4all.tag" "/home/darlan/Dropbox/SDR4ALL/darlan_lib_usb/docs/html"))))
        (setq doxymacs-external-xml-parser-executable "doxymacs_parser")
        (setq doxymacs-use-external-xml-parser t)

        )
    #+end_src
*** Doxygen                                                            :Doxygen:
    #+begin_src emacs-lisp
      ;; Set the conf-mode for the Doxyfile
      (add-to-list 'auto-mode-alist '("Doxyfile" . conf-mode))
    #+end_src
*** CppCheck                                                          :CppCheck:
***** TODO Checar o CppCheck
      Ferramenta para checagem stática de código C++
      Precisa instalar o pacote cppcheck no synaptic.

      Instale tb o pacote cppcheck do emacs através do elpa.
*** Semantic Minimal Configuration(CEDET)
    Minimum configration to activate the semantic package that comes
    already installed with Emacs.

    #+begin_src emacs-lisp
      ;; Activates semantic in all buffers that support it
      (semantic-mode 1)

      ;; Decorate the tags that semantic finds
      (global-semantic-decoration-mode)
    #+end_src
*** Semantic activate extra auxiliare minor modes features
    List of auxiliary Semantic minor modes enabled by ‘semantic-mode’.
    The possible elements of this list include the following:

    ‘global-semanticdb-minor-mode’          - Maintain tag database.
    ‘global-semantic-idle-scheduler-mode’   - Reparse buffer when idle.
    ‘global-semantic-idle-summary-mode’     - Show summary of tag at point.
    ‘global-semantic-idle-completions-mode’ - Show completions when idle.
    ‘global-semantic-decoration-mode’       - Additional tag decorations.
    ‘global-semantic-highlight-func-mode’   - Highlight the current tag.
    ‘global-semantic-stickyfunc-mode’       - Show current fun in header line.
    ‘global-semantic-mru-bookmark-mode’     - Provide ‘switch-to-buffer’-like
                                              keybinding for tag names.
    ‘global-cedet-m3-minor-mode’            - A mouse 3 context menu.
    ‘global-semantic-idle-local-symbol-highlight-mode’ - Highlight references
                                                         of the symbol under point.

    The following modes are more targeted at people who want to see
    some internal information of the semantic parser in action:

    ‘global-semantic-highlight-edits-mode’       - Visualize incremental parser by
                                                   highlighting not-yet parsed changes.
    ‘global-semantic-show-unmatched-syntax-mode’ - Highlight unmatched lexical
                                                   syntax tokens.
    ‘global-semantic-show-parser-state-mode’     - Display the parser cache state.
    #+begin_src emacs-lisp
      ;;(global-semantic-show-parser-state-mode) ;
    #+end_src
*** Irony-mode
    Installed through elpa
***** Basic irony-mode configuration
      #+begin_src emacs-lisp
        (use-package irony
          :config
          ;; Set the lighter to an empty string, since I don't want it to clutter the
          ;; mode-line.
          (setq irony-lighter "")

          ;; Enable irony-mode in C, C++ and objc major modes
          (add-hook 'c++-mode-hook 'irony-mode)
          (add-hook 'c-mode-hook 'irony-mode)
          (add-hook 'objc-mode-hook 'irony-mode)

          ;; Add additional clang options to irony server. Here we set irony to use
          ;; then c++11 standard.
          (setq irony-additional-clang-options '("-std=c++11"))
          ;;"-std=c++11"

          ;; replace the `completion-at-point' and `complete-symbol' bindings in
          ;; irony-mode's buffers by irony-mode's asynchronous function
          (defun my-irony-mode-hook ()
            (define-key irony-mode-map [remap completion-at-point]
              'irony-completion-at-point-async)
            (define-key irony-mode-map [remap complete-symbol]
              'irony-completion-at-point-async))

          (add-hook 'irony-mode-hook 'my-irony-mode-hook)
          )
      #+end_src
***** company-irony
      #+begin_src emacs-lisp
        (use-package company-irony
          :config
          ;; Add the company-irony backend
          (eval-after-load 'company
            '(add-to-list 'company-backends 'company-irony))

          ;; Include irony trigger commands to `company-begin-commands'.
          ;; 
          ;; This allow completion to be automatically triggered after member
          ;; accesses (obj.|, obj->|, ...).
          (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
          )
      #+end_src
***** irony-eldoc
      Install irony-eldoc through elpa. Then all you need to do is activate
      eldoc and irony-eldoc modes in c++ buffers.
      #+begin_src emacs-lisp
        (use-package irony-eldoc
          :config
          ;; Activates irony-eldoc mode whenever irony-mode is activated. This will
          ;; also activate standard eldoc-mode.
          (add-hook 'irony-mode-hook 'irony-eldoc)
          )
      #+end_src
*** ggtags
    Instructions from 
    http://tuhdo.github.io/c-ide.html

    A package to integrate GNU Global source code tagging system
    (http://www.gnu.org/software/global) with Emacs.

    - *How to use ggtags*
      The main keybindings are given below
       |-------+------------------------------------------------------|
       | M-.   | Find tag do what I mean                              |
       | M-,   | Go back to the place before you found a tag          |
       | C-M-. | Find a tag by regex                                  |
       |-------+------------------------------------------------------|
       |       | Keybindings below work when you find more then 1 tag |
       | M-n   | Next tag (when found more then one)                  |
       | M-p   | Previous tag (when found more then one)              |
       | M-{   | Previous file (where a tag was found)                |
       | M-}   | Next file (where a tag was found)                    |
       | <ret> | Fecha a janela com as ocorrências                    |
       |-------+------------------------------------------------------|

       There are other commands available. See [[https://github.com/leoliu/ggtags][ggtags website]] for more.

***** use-package - START
      #+begin_src emacs-lisp
      (use-package ggtags
        :config
      #+end_src

***** Activate ggtags-mode
      This requires gnu global to be installed.
      #+begin_src emacs-lisp
        (add-hook 'c-mode-common-hook
                  (lambda ()
                    (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                      (ggtags-mode 1))))
      #+end_src
***** Set more interesting keybindings
      #+begin_src emacs-lisp
        (bind-key "C-c g s" 'ggtags-find-other-symbol ggtags-mode-map)
        (bind-key "C-c g h" 'ggtags-view-tag-history ggtags-mode-map)
        (bind-key "C-c g r" 'ggtags-find-reference ggtags-mode-map)
        (bind-key "C-c g f" 'ggtags-find-file ggtags-mode-map)
        (bind-key "C-c g c" 'ggtags-create-tags ggtags-mode-map)
        (bind-key "C-c g u" 'ggtags-update-tags ggtags-mode-map)

        ;; (with-eval-after-load "ggtags"
        ;;   (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
        ;;   (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
        ;;   (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
        ;;   (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
        ;;   (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
        ;;   (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)  
        ;; )
      #+end_src
***** use-package - END
      #+begin_src emacs-lisp
        )
      #+end_src
***** helm-gtags
      We will overwrite some keybindings from ggtags with helm versions.
      #+begin_src emacs-lisp
        (add-hook 'c-mode-hook 'helm-gtags-mode)
        (add-hook 'c++-mode-hook 'helm-gtags-mode)

        (with-eval-after-load "helm-gtags"
          (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
          (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
          (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
          (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
          ;; (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
          ;; (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
        )
      #+end_src
*** Flycheck
    Set flycheck to use c++11 standard in c++ buffers.
    #+begin_src emacs-lisp
      (add-hook 'c++-mode-hook (lambda ()
                                 ;; Useful if you use the c/c++-clang ckecher
                                 (setq flycheck-clang-language-standard "c++11")
                                 ;; Useful if you use the c/c++-gcc ckecher
                                 (setq flycheck-gcc-language-standard "c++11")))
      (add-hook 'c-mode-hook (lambda ()
                               ;; Useful if you use the c/c++-clang ckecher
                               (setq flycheck-clang-language-standard "c++11")
                               ;; Useful if you use the c/c++-gcc ckecher
                               (setq flycheck-gcc-language-standard "c++11")))

      ;; Set flycheck to use the "irony"checker (install the package
      ;; flycheck-irony through elpa).
      ;; 
      ;; Since this will use the running irony server then any configuration
      ;; (including setting the standard to c++11) is done in the irony-mode
      ;; configuration.
      (eval-after-load 'flycheck
        '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
    #+end_src
*** Company-c-headers                                                  :Company:
    Company backend to complete #include headers in C/C++.
    
    #+begin_src emacs-lisp
      (add-to-list 'company-backends 'company-c-headers)


      (eval-after-load 'company-c-headers
        ;; If you want to complete C++ header files, you have to add its paths
        ;; since by default company-c-headers only includes these two system
        ;; include paths: /usr/include/ and /usr/local/include/. To enable C++
        ;; header completion for standard libraries, you have to add its path,
        ;; for example, like this:
        '(add-to-list 'company-c-headers-path-system "/usr/include/c++/4.8/"))
    #+end_src
* Senator with hide-show (define a hydra)                    :Semantic:HideShow:
  We can use either senator-fold/unfold-tag or hs-hide/show-block to
  fold/unfold. I like the folding from hs-minor mode, but the keybindings
  are a pain. Setting better keybindings for the commands would use too
  many shortcuts and therefore we will define a hydra instead.
  
  #+begin_src emacs-lisp
    ;; Hydra with senator commands (from cedet) to navigate tags and with
    ;; hs-minor-mode commands to hide/show blocks.
    (defhydra hydra-senator-hideshow (:hint nil)
      "
      Senator/hide-show:
        _j_: (n) next tag       _u_: up tag            _w_: copy tag    _q_uit
        _k_: (p) previous tag   _r_: Copy to register  _y_: yank

        _N_: Narrow to tag      _,_: Transpose up
        _W_: Unarrow (widen)    _._: Transpose down

        _s_: Show tag     _S_: Show all tags
        _h_: Hide tag     _H_: Show all tags      
        _l_: Hide level
    "
      ("j" senator-next-tag)
      ("k" senator-previous-tag)
      ("n" senator-next-tag)
      ("p" senator-previous-tag)
      ("u" senator-go-to-up-reference)
      ("r" senator-copy-tag-to-register)

      ("w" senator-copy-tag)
      ("y" yank)
      ("," senator-transpose-tags-up)
      ("." senator-transpose-tags-down)

      ("s" hs-show-block)
      ("h" hs-hide-block)

      ("S" hs-show-all)
      ("H" hs-hide-all)
      ("N" semantic-narrow-to-tag)
      ("W" widen)

      ("l" hs-hide-level)

      ("q" nil :color blue)
      )

    (global-set-key "\C-cs" 'hydra-senator-hideshow/body)
  #+end_src
  
* MATLAB                                                                :MATLAB:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx MATLAB xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

  NOTE: If you don't have =matlab-load.el= in =lisp/matlab-mode=, run
  =make= to generate it.
  
  TIP: Use C-c C-s in a MATLAB file to "save and go"
       Use C-M-<ENTER> to run current section

*** General                                   :IndentGuide:HighlightSymbol:Hook:
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\.m$" . matlab-mode))
      (autoload 'matlab-mode "matlab-load" "Enter MATLAB mode." t)

      (use-package matlab-load
        :defer t
        :config
        ;; (load-library "matlab-load")
        ;; (require 'matlab-load)
        (setq matlab-shell-command "/usr/bin/matlab")


        (require 'semantic-matlab) ;; semantic-matlab-root-directory is defined

        ;; here IMPORTANT: semantic-matlab should detect matlab install directory,
        ;; but it is not working. Therefore, we set it manually.
        (setq semantic-matlab-root-directory "/home/darlan/Programas_Locais/MATLAB/R2014b")

        ;; Enable CEDET feature support for MATLAB code. (Optional)
        (matlab-cedet-setup)  ;; Semantic must be able to know where MATLAB is
        ;; installed for this to work

        ;; ;; Autoload matlab-mode when I edit a matlab file.
        ;; (autoload 'matlab-mode "matlab" "Enter MATLAB mode." t)
        ;; (autoload 'semantic-default-matlab-setup "semantic-matlab" "Enter MATLAB mode." t)

        ;; ;; Maybe not necessary, since it will be loaded by matlab-mode anyway
        ;; (autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)

        (defun my-matlab-mode-hook ()
          (setq fill-column 76) ; where auto-fill should wrap
          (local-set-key "\C-c!" 'matlab-shell)
          (setq matlab-comment-region-s "% ")
          (setq matlab-shell-command-switches '("-nodesktop" "-nosplash"))
          (auto-fill-mode -1) ; Disable auto-fill-mode in MATBAL code

          (darlan/common-programming-options)
          )

        (add-hook 'matlab-mode-hook 'my-matlab-mode-hook)

        (with-eval-after-load 'matlab
          (setq matlab-shell-emacsclient-command "emacsclient"))

        )

    #+end_src
*** COMMENT CEDET Integration                                            :CEDET:
    :PROPERTIES:
    :TANGLE:   no
    :END:
    #+begin_src emacs-lisp
      ;; Enable CEDET feature support for MATLAB code. (Optional)
      ;;(matlab-cedet-setup)
    #+end_src
*** Outline Support                                                       :Hook:
    #+begin_src emacs-lisp
      (defun set-matlab-outline-magic ()
        "Set the key bindings for outline move as well as the outline
      regex for MATLAB mode"
        (interactive)
      ;  (setq outline-regexp (regexp-opt '("%%"))) ; Coloque mais strings na lista se quiser
        ;;                     Concatena com espaço no começo para poder ter espaços em branco no começo
        (setq outline-regexp (concat "\s*" (regexp-opt '("%%" "classdef" "properties" "methods" "function"))))
        ;(darlan/set-outline-key-bindings)
        (outline-minor-mode t)
        ;; Requer pacotes fold-dwim e fold-dwim-org.
        ;; Atrapalha o funcionamento normal do TAB
        ;;(fold-dwim-org/minor-mode t)
        )

      (add-hook 'matlab-mode-hook 'set-matlab-outline-magic)
    #+end_src
*** COMMENT M-Lint integration
    :PROPERTIES:
    :TANGLE:   no
    :END:
    Após habilitar o mlint minor mode eu fico tendo erros
    : apply: Symbol's function definition is void: linemark-group
    sempre que tendo abrir um arquivo
    #+begin_src emacs-lisp
      (load-library "mlint")
    #+end_src

*** Checkcode
    In new MATLAB versions the mlint commandline program is not provided
    anymore. Instead, MATLAB provides the checkcode command, but it can
    only be called from inside MATLAB. Therefore, we create here a function
    to call checkcode on the current '.m' file.
    #+begin_src emacs-lisp
      ;; Modifyed matlab-shell-run-command from matlab-mode to create a
      ;; 'checkcode' command.
      (defun darlan/matlab-checkcode-current-file ()
        "Run checkcode in the current file and display result in a
      buffer. This command requires an active MATLAB shell."
        (interactive)
        (let ((filename (buffer-file-name))
              (command))
          (setq command (concat "checkcode('" filename "')"))

          ;; If the "*MATLAB codecheck*" buffer already exists, kill it.
          (if (get-buffer "*MATLAB codecheck*")
              (kill-buffer "*MATLAB codecheck*")
            )

          ;; Check the code and show the results in the "*MATLAB codecheck*"
          ;; buffer
          (matlab-output-to-temp-buffer
           "*MATLAB codecheck*"
           (matlab-shell-collect-command-output command))))
    #+end_src

*** Tests
    #+begin_src emacs-lisp
      ;; Modifyed matlab-shell-run-command from matlab-mode to create a
      ;; 'checkcode' command.
      (defun darlan/matlab-run-tests-current-file ()
        "Run the tests in the current file and display result in a
      buffer. This command requires an active MATLAB shell."
        (interactive)
        (let ((filename (buffer-file-name))
              (command))
          (setq command (concat "runtests('" filename "')"))

          ;; If the "*MATLAB codecheck*" buffer already exists, kill it.
          (if (get-buffer "*MATLAB tests*")
              (kill-buffer "*MATLAB tests*")
            )

          ;; Check the code and show the results in the "*MATLAB codecheck*"
          ;; buffer
          (matlab-output-to-temp-buffer
           "*MATLAB tests*"
           (matlab-shell-collect-command-output command))))

    #+end_src
*** Debug Helper functions
    #+begin_src emacs-lisp
      (defun matlab--add-debug-highlight ()
        "Adds a highlighter for use by `MATLAB--keyboard-string'"
        (highlight-lines-matching-regexp "% DEBUG %\\s-*$" 'hi-red-b)
        )

      (add-hook 'matlab-mode-hook 'matlab--add-debug-highlight)

      (defvar MATLAB--keyboard-string "keyboard  % DEBUG %"
        "MATLAB breakpoint string used by `MATLAB-insert-breakpoint'")

      (defun darlan/matlab-insert-breakpoint ()
        "Inserts a MATLAB breakpoint using `keyboard' string"
        (interactive)
        (back-to-indentation)
        ;; this preserves the correct indentation in case the line above
        ;; point is a nested block
        (split-line)
        (insert MATLAB--keyboard-string))
    #+end_src
*** Helper functions
    #+begin_src emacs-lisp
      (defun darlan/surround-with-size-command ()
        "Usefull to surround a region with the 'size' command in MATLAB
            shell buffers."
        (interactive)
        (let (command rightPart leftPart)
          (setq command "size")
          (setq leftPart (concat command "("))
          (setq rightPart ")")
          (darlan/surround-region-dowim leftPart rightPart)
          ;; Like pressing <ENTER> in the shell buffer
          (comint-send-input)
          )
        )


      (defun darlan/surround-with-help-command ()
        "Usefull to surround a region with the 'help' command in MATLAB
            shell buffers."
        (interactive)
        (let (command rightPart leftPart)
          (setq command "help")
          (setq leftPart (concat command " "))
          (setq rightPart "")
          (darlan/surround-region-dowim leftPart rightPart)
          ;; Like pressing <ENTER> in the shell buffer
          (comint-send-input)
          )
        )
    #+end_src
*** MATLAB mode Keybindings                                   :Hook:Keybindings:
    #+begin_src emacs-lisp
      (add-hook 'matlab-mode-hook
                (lambda ()
                  ;; (ibuffer-switch-to-saved-filter-groups "default")
                  (local-set-key [f9] 'darlan/matlab-checkcode-current-file)
                  (local-set-key [f8] 'darlan/matlab-insert-breakpoint)
                  ))
    #+end_src
*** MATLAB Shell Keybindings                                  :Hook:Keybindings:
    #+begin_src emacs-lisp
      (add-hook 'matlab-shell-mode-hook
                (lambda ()
                  ;; (ibuffer-switch-to-saved-filter-groups "default")
                  (local-set-key [f6] 'darlan/surround-with-command)
                  (local-set-key [C-f6] 'darlan/surround-with-size-command)
                  (local-set-key [M-f6] 'darlan/surround-with-help-command)
                  (modify-syntax-entry ?_ "w")
                  ))
    #+end_src
*** Company Backends                                                   :Company:
    #+begin_src emacs-lisp
      (add-hook 'matlab-shell-mode-hook
                (lambda ()
                  (set (make-local-variable 'company-backends) '(company-matlab-shell))))
    #+end_src
*** COMMENT Flymake Integration with mlint                             :Flymake:
    :PROPERTIES:
    :TANGLE:   no
    :END:
    #+begin_src emacs-lisp
      (when (load "flymake" t)
        (defun flymake-mlint-init ()
          (let* ((temp-file (flymake-init-create-temp-buffer-copy
                             'flymake-create-temp-inplace))
                 (local-file (file-relative-name
                              temp-file
                              (file-name-directory buffer-file-name))))
            (list "mlint"  (list local-file))))
        (add-to-list 'flymake-allowed-file-name-masks
                     '("\\.m\\'" flymake-mlint-init)))

    #+end_src

* Pymacs                                                                :Pymacs:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Pymacs xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  <<Pymacs>>
  Fiz o Download do Pymacs e coloquei na pasta [[/home/darlan/Programas_Locais][Programas_Locais]], mas não é
  necessário manter essa pasta porque já instalei. Para instalar o pymacs
  basta rodar o comando =make install= e em seguida copiar o arquivo
  pymacs.el para alguma pasta que o emacs enxergue (coloquei em
  ~/.emacs.d/lisp/).

  Abaixo configuração para ativar o pymacs
  #+begin_src emacs-lisp
    ;; http://pymacs.progiciels-bpi.ca/pymacs.html#prepare-your-emacs-file

    ;; Only necessary for my compiled local version of emacs
    ;;(add-to-list 'load-path "/usr/share/emacs/site-lisp/pymacs")

    ;; Only useful if I use virtualenv
    ;; (setenv "PYMACS_PYTHON" "~/<caminho_virtualenv>/bin/python")

    (autoload 'pymacs-apply "pymacs")
    (autoload 'pymacs-call "pymacs")
    (autoload 'pymacs-eval "pymacs" nil t)
    (autoload 'pymacs-exec "pymacs" nil t)
    (autoload 'pymacs-load "pymacs" nil t)
  #+end_src
* Python                                                                :Python:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Python Configuration xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

  *LEMBRE DO WINPDB para debugar programas em python*

  Veja dicas de configuração em
  http://ricardoduarte.net/blog/2011/08/31/programando-em-python-no-emacs/

  Tente nesse site: https://synker.wordpress.com/2011/04/06/emacs-as-a-python-ide/
  E se num der certo nesse http://sunnyeves.blogspot.com/2011/04/debugging-python-on-emacs-ide.html
*** General settings
    #+begin_src emacs-lisp
      ;;(add-hook 'python-mode-hook 'darlan/common-programming-options)
    #+end_src
*** Navigation Tips
    Read the comment in the beggining of the python.el file in Emacs.
    C-M-a   beginning-of-defun
    C-M-e   end-of-defun
    M-e     python-nav-forward-block
    M-a     python-nav-backward-block

*** Fill paragraph in docstrings
    #+begin_src emacs-lisp
      ;; Set the fill docstring style to symmetric.
      (setq python-fill-docstring-style 'symmetric)
    #+end_src
*** Using IPython with the stock python.el
    #+begin_src emacs-lisp
      (setq
       python-shell-interpreter "ipython"
       python-shell-interpreter-args "--classic"
       )
    #+end_src
*** Delete trailing whitespace before saving
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook
                (lambda()
                  ;; Notice that I add has a local-hook so that only python
                  ;; buffers are affected
                  (add-hook 'write-file-functions
                            '(lambda()
                               (save-excursion
                                 (delete-trailing-whitespace))
                               )
                            nil  ; Don't append to the hook. Insert the function
                                 ; at the beginning
                            t    ; Change only the hook's local value, so that it
                                 ; will only be changed in python-mode
                            )))
    #+end_src
*** COMMENT Flymake (muito bom)                   :Pylint:PEP8:Pyflakes:Flymake:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Pegue em
    http://stackoverflow.com/questions/1259873/how-can-i-use-emacs-flymake-mode-for-python-with-pyflakes-and-pylint-checking-co
***** Configura o flymake para funcionar com python
      #+begin_src emacs-lisp
        (when (load "flymake" t)
          (defun flymake-pyflakes-init ()
            (let* ((temp-file (flymake-init-create-temp-buffer-copy
                               'flymake-create-temp-inplace))
                   (local-file (file-relative-name
                                temp-file
                                (file-name-directory buffer-file-name))))
              (list "pyflakespep8.py"  (list local-file))))
          (add-to-list 'flymake-allowed-file-name-masks
                       '("\\.py\\'" flymake-pyflakes-init)))
      #+end_src

***** Carrega flymake para arquivos .py e seta atalhos de teclado  :Keybindings:
      Além da função flymake-display-err-menu-for-current-line para ver o
      erro em um menu suspenso você também pode usar display-local-help
      para ver o erro na ecoarea.
      *Para display-local-help use o atalho "C-h .".*
      #+begin_src emacs-lisp
        (add-hook 'python-mode-hook
                  (lambda ()
                    (unless (eq buffer-file-name nil) (flymake-mode 1)) ;dont invoke flymake on temporary buffers for the interpreter
                    (local-set-key [f5] 'flymake-goto-next-error)
                    (local-set-key [C-f5] 'flymake-goto-prev-error)
                    (local-set-key [f6] 'flymake-display-err-menu-for-current-line)
                    ))
      #+end_src

***** Script que o flymake usa para fazer a checagem (Primeira versão)
      :PROPERTIES:
      :TANGlE:   no
      :END:
      Em
      http://stackoverflow.com/questions/1259873/how-can-i-use-emacs-flymake-mode-for-python-with-pyflakes-and-pylint-checking-co
      vc encontra o shell script abaixo que pode ser usado com o flymake.

      Salve ele na pasta /usr/local/bin com o nome de "pycheckers" e dê
      permissão de execução.
      #+begin_src sh
        #!/bin/bash

        epylint "$1" 2>/dev/null
        pyflakes "$1"
        pep8 --ignore=E221,E701,E202 --repeat "$1"
        true
      #+end_src
***** Script que o flymake usa para fazer a checagem (Segunda versão)
      :PROPERTIES:
      :TANGlE:   no
      :END:
      Em
      http://people.cs.uct.ac.za/~ksmith/2011/better-python-flymake-integration-in-emacs.html
      vc encontra o shell script python abaixo que pode ser usado com o
      flymake.

      Salve ele na pasta /usr/local/bin com o nome de "pyflakespep8.py" e dê
      permissão de execução.
      #+begin_src python
        #!/usr/bin/env python
        import commands
        import re
        import sys


        def make_re(*msgs):
            return re.compile('(%s)' % '|'.join(msgs))

        pyflakes_ignore = make_re('unable to detect undefined names')
        pyflakes_warning = make_re(
            'imported but unused',
            'is assigned to but never used',
            'redefinition of unused',
        )
        pep8_ignore = ['E501']
        pep8_warning = make_re('.')


        def run(cmd, ignore_re, warning_re):
            output = commands.getoutput(cmd)
            for line in output.splitlines():
                if ignore_re and ignore_re.search(line):
                    continue
                elif ': ' in line and warning_re.search(line):
                    line = '%s: WARNING %s' % tuple(line.split(': ', 1))
                    print line


        run('pyflakes %s' % sys.argv[1], pyflakes_ignore, pyflakes_warning)
        print '## pyflakes above, pep8 below ##'
        pep8_ignore = ' '.join('--ignore=%s' % i for i in pep8_ignore)
        run('pep8 %s --repeat %s' % (pep8_ignore, sys.argv[1]), None, pep8_warning)
      #+end_src
*** Auto-Insert                                                     :AutoInsert:
    #+begin_src emacs-lisp
      (define-auto-insert "\\.py" "my-python-template.py")
    #+end_src
*** my-python-compile                                                     :Hook:
    #+begin_src emacs-lisp
      ;; Pegue em http://wwwx.cs.unc.edu/~gb/wp/blog/2008/03/15/running-python-from-within-emacs/
      ;; Com essa função você pode rodar um script python usando o compile buffer
      ;; (make-local-variable 'py-master-file)
      (defun my-python-compile ()
        "Use compile to run python programs. If the py-master-file variable is set, run that file. If not, run the file associated with the current buffer."
        (interactive)
        (save-buffer)
        (if ; If the variable py-master-file exists we are using python-mode.el
            (boundp 'py-master-file)
            (if ; In that case, we will run the file pointed by py-master-file or
                ; the file associated with the current buffer
                (eq py-master-file nil)
                (compile (concat "python " (buffer-file-name)) nil)
              (compile (concat "python " py-master-file) nil)
              )
          ;; If py-master-file does not exist we are using the default python.el
          ;; from emacs and we will run the file associated with the current
          ;; buffer
          (compile (concat "python " (buffer-file-name)) nil)
          ))

      (defun my-python-mode-hook ()
        ;; Run the program in the compilation buffer
        (local-set-key [f9] 'my-python-compile)
        (local-set-key [S-f9] 'kill-compilation))

      (add-hook 'python-mode-hook 'my-python-mode-hook)
    #+end_src
*** Set outline keybindings                                   :Hook:Keybindings:
    The regex is alread set by the fgallina python.el implementation. All I
    need to do is setting my keybindings.
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook 'darlan/set-outline-key-bindings)
    #+end_src
*** Autocomplete
    The actual configuration for auto-complete is in the Ropemacs
    configuration, or in the Jedi configuration (depending on which one is
    currently used). However, in either case I prefer to modify the color
    of the ac-source to green instead of the default gray in auto-complete
    to make it clear that a "smart" source is being used. Here we just
    define the faces for the source.
    #+begin_src emacs-lisp
      (defface ac-my-python-candidate-face
        '((t (:background "pale green" :foreground "black")))
        "Face for ropemacs candidate."
        :group 'auto-complete)
      
      (defface ac-my-python-selection-face
        '((t (:background "dark green" :foreground "white")))
        "Face for the ropemacs selected candidate."
        :group 'auto-complete)
    #+end_src
*** Ropemacs                                                          :Ropemacs:
    <<RopemacsWithPython>>
    http://stackoverflow.com/questions/2855378/ropemacs-usage-tutorial
    http://09-f9-11-02-9d-74-e3-5b-d8-41-56-c5-63-56-88-c0.com/2009/01/21/autocompleteel-python-code-completion-in-emacs/
    http://hide1713.wordpress.com/2009/01/30/setup-perfect-python-environment-in-emacs/
    http://bitbucket.org/agr/ropemacs/src/7ec80793f003/docs/ropemacs.txt

    *OBS:* Para usar o ropemacs é necessário instalar
    - rope -> Instalei com o easy_install (apenas instala para python 2.x)
      : root@darlan-M70Vm:/home/darlan# easy_install rope
    - ropemode -> Instalei com o easy_install
      : root@darlan-M70Vm:/home/darlan# easy_install ropemode
    - pymacs -> veja [[Pymacs][aqui]]

    Após feito isso apenas fiz o download do ropemacs e depois rodei o
    comando
    : python setup.py install
    na pasta do ropemacs. Com isso o ropemacs é instalado (na pasta
    /usr/local/lib/<<PythonVersion>>/dist-packages)

***** Ativação do ropemacs
      Also note that ropemacs may redefine some standard Emacs and your
      custom key bindings.  To prevent this, put the following example
      lines to your ``~/.emacs`` *before* ropemacs activation:
      : (setq ropemacs-enable-shortcuts nil)
      : (setq ropemacs-local-prefix "C-c C-p")

******* Function to Load Ropemacs
        #+begin_src emacs-lisp
          ;; Don't allow ropemacs to bind shortcut keys
          ;; Because code-assist is not working correctly (locks emacs) I prefer
          ;; not to bind rope shortcuts (which would overwrite dabbrev-expand in
          ;; M-/, for instance).
          ;; (setq-default ropemacs-enable-shortcuts nil)

          (defun load-ropemacs ()
            "Load pymacs and ropemacs"
            (interactive)
            ;; (setq-default ropemacs-enable-shortcuts nil);;
            ;; (setq ropemacs-enable-shortcuts nil)

            ;; Ropemacs needs pymacs. Therefore, we will only run the ropemacs
            ;; configuration commands if we can load pymacs.
            (with-library 'pymacs
                (setq ropemacs-global-prefix "\C-xrp")
                (pymacs-load "ropemacs" "rope-")
                ;; (setq ropemacs-enable-autoimport t)
                ;; (setq ropemacs-autoimport-modules '("os" "sys"))

                ;; Automatically save project python buffers before refactorings
                (setq ropemacs-confirm-saving 'nil)

                (setq ropemacs-enable-autoimport t
                      ropemacs-autoimport-modules '( "os"
                                                     "sys"
                                                     "itertools"
                                                     "operator"
                                                     "numpy"
                                                     )
                      ;; ropemacs-max-doc-buffer-height 40
                      ;; ropemacs-global-prefix nil

                      ;; Try to guess the project when needed.
                      ;; ropemacs-guess-project t
                      ropemacs-separate-doc-buffer t
                      ;; ropemacs-enable-shortcuts nil
                      )

                (ropemacs-mode t)

                ;; Disable the shortcut for rope-code-assist -> keep the
                ;; other shortcuts
                (define-key ropemacs-local-keymap (kbd "M-/") 'dabbrev-expand)
                ))

        #+end_src

******* COMMENT Set ropemacs to be loaded automatically in every python buffer
        :PROPERTIES:
        :TANGlE:   no
        :END:
        Load Ropemacs automatically in every python buffer
        #+begin_src emacs-lisp
          (with-eval-after-load "python"
            (load-ropemacs)
            ;; Initialize ropemacs auto-completion source
            )
        #+end_src

***** Using Ropemacs (tips)
      You can modify your ROOT/.ropeproject/config.py file to add more
      directories to the rope lookup path, in order to provide better
      autocomplete.

      EDIT: Two of the most important functions for me are looking up
      documentation and jumping directly to a function definition. This
      is dependent on setting the rope lookup path correctly for your
      project as mentioned above.

      *Documentation*: Put the cursor over a symbol (function name, class
      name, etc), and do:
      =C-c d=

      This will show you the docstring for the symbol in question.

      *Jumping to definition*:Put the cursor over a symbol (function name,
      class name, etc), and do:
      =C-c g=

      This will immediately open the file where the symbol resides and
      jump to the beginning of the definition. This is great for times
      when the documentation is sparse and you want to see the actual
      code. Also, it's really nice for navigating around inside your own
      code.

      *Find occurrences:*
      =C-c f=

      Smart search in your entire project for the symbol at the cursor.

      *Code assist:*
      =M-/=

      Just type the first characters of a function, class, etc, and this
      will show a list of possible completions. Note that due to python's
      nature, it will not always be a complete list.

      Refactorings: There are quite a few options under
      Rope->Refactor. These are to organize your code better. How to use
      them should be mostly self-explanatory; in general, select the
      region of code you want to refactor, then choose the command.

      Edit: In response to a comment below, here's exactly how to add
      other paths to your python path so autocomplete will look for those
      symbols as well.
      #+begin_src python :tangle no
        prefs.add('python_path', '~/path/to/virtualenv/lib/python2.6/site-packages')
      #+end_src
      This goes in .ropeproject/config.py

***** Mais dicas de uso: Getting Started

      Getting Started
      ===============

      Refactoring Dialog
      ------------------

      Ropemacs refactorings use a special kind of dialog.  When you start a
      refactoring, you'll be asked to confirm saving modified python
      buffers; you can change it by using ``ropemacs-confirm-saving``
      variable.  Adding ``(setq ropemacs-confirm-saving 'nil)`` to your
      ``.emacs`` file, will make emacs save them without asking.

      After that depending on the refactoring, you'll be asked about the
      essential information a refactoring needs to know (like the new name
      in rename refactoring).  You can skip it by prefixing the refactoring;
      this can be useful when using batchset command (described later).

      Next you'll see the base prompt of a refactoring dialog that shows
      something like "Choose what to do".  By entering the name of a
      refactoring option you can set its value.  After setting each option
      you'll be returned back to the base prompt.  Finally, you can ask rope
      to perform, preview or cancel the refactoring.

      See keybinding_ section and try the refactorings yourself.


      Finding Files
      -------------

      By using ``rope-find-file`` (``C-x p f`` by default), you can search
      for files in your project.  When you complete the minibuffer you'll
      see all files in the project; files are shown as their reversed paths.
      For instance ``projectroot/docs/todo.txt`` is shown like
      ``todo.txt<docs``.  This way you can find files faster in your
      project.  ``rope-find-file-other-window`` (``C-x p 4 f``) opens the
      file in the other window.  With prefix, these commands show python
      files only.


      Code-Assist
      -----------

      ``rope-code-assist`` command (``M-/`` by default) will let you select
      from a list of completions.  If prefixed (``C-u M-/``), ropemacs
      inserts the common prefix, automatically.  If a numeric argument is
      given, ropemacs will insert the common prefix for that many of the
      first proposals.

      ``rope-lucky-assist`` command (``M-?``) does not ask anything;
      instead, it inserts the first proposal.  By prefixing it, you can
      choose which proposal to insert.  ``C-u 1 M-?`` uses the second
      propsal, for instance.

      Here::

        xxaa = None
        xxab = None
        xxba = None
        xxbb = None

        x^

      consider cursor is at ``^`` position.  This table shows what happens
      when code-assist commands are used:

      ============  ==========  =======================
      Key           Inserts     Minibuffer Completions
      ============  ==========  =======================
      M-/                       xxaa, xxab, xxba, xxbb
      C-u M-/       x           xxaa, xxab, xxba, xxbb
      C-u 2 M-/     xa          xxaa, xxab
      M-?           xaa
      C-u 1 M-/     xab
      C-u 3 M-/     xbb
      ============  ==========  =======================

      Note that minibuffer completions are shown by pressing tab key at the
      completion prompt.  Also you can use ``rope-completions`` lisp function
      to get the list of completions.


      Finding Occurrences
      -------------------

      The find occurrences command (``C-c f`` by default) can be used to
      find the occurrences of a python name.  If ``unsure`` option is
      ``yes``, it will also show unsure occurrences; unsure occurrences are
      indicated with a ``?`` mark in the end.


      Dialog ``batchset`` Command
      ---------------------------

      When you use ropemacs dialogs there is a command called ``batchset``.
      It can set many options at the same time.  After selecting this
      command from dialog base prompt, you are asked to enter a string.

      ``batchset`` strings can set the value of configs in two ways.  The
      single line form is like this::

        name1 value1
        name2 value2

      That is the name of config is followed its value.  For multi-line
      values you can use::

        name1
         line1
         line2

        name2
         line3

      Each line of the definition should start with a space or a tab.  Note
      that blank lines before the name of config definitions are ignored.

      ``batchset`` command is useful when performing refactorings with long
      configs, like restructurings::

        pattern ${pycore}.create_module(${project}.root, ${name})

        goal generate.create_module(${project}, ${name})

        imports
         from rope.contrib import generate

        args
         pycore: type=rope.base.pycore.PyCore
         project: type=rope.base.project.Project

      .. ignore the two-space indents

      This is a valid ``batchset`` string for restructurings.  When using
      batchset, you usually want to skip initial questions.  That can be
      done by prefixing refactorings.

      Just for the sake of completeness, the reverse of the above
      restructuring can be::

        pattern ${create_module}(${project}, ${name})

        goal ${project}.pycore.create_module(${project}.root, ${name})

        args
         create_module: name=rope.contrib.generate.create_module
         project: type=rope.base.project.Project


      Enabling Autoimport
      -------------------

      Ropemacs can propose and automatically import global names in other
      modules.  But this feature is disabled by default.  Before using it,
      you should add::

        (setq ropemacs-enable-autoimport 't)

      to your ``~/.emacs`` file.  After enabling, rope maintains a cache of
      global names for each project.  It updates the cache only when modules
      are changed; if you want to cache all your modules at once, use
      ``rope-generate-autoimport-cache``.  It will cache all of the modules
      inside the project plus those whose names are listed in
      ``ropemacs-autoimport-modules`` list::

        # add the name of modules you want to autoimport
        (setq ropemacs-autoimport-modules '("os" "shutil"))

      Now if you are in a buffer that contains::

        rmtree

      and you execute ``ropemacs-auto-import`` you'll end up with::

        from shutil import rmtree
        rmtree

      Also ``rope-code-assist`` and ``rope-lucky-assist`` propose
      auto-imported names by using ``name : module`` style.  Selecting them
      will import the module automatically.


      Filtering Resources
      -------------------

      Some refactorings, restructuring and find occurrences take an option
      called resources.  This option can be used to limit the resources on
      which a refactoring should be applied.

      It uses a simple format: each line starts with either '+' or '-'.
      Each '+' means include the file (or its children if it's a folder)
      that comes after it.  '-' has the same meaning for exclusion.  So
      using::

        +rope
        +ropetest
        -rope/contrib

      means include all python files inside ``rope`` and ``ropetest``
      folders and their subfolder, but those that are in ``rope/contrib``.
      Or::

        -ropetest
        -setup.py

      means include all python files inside the project but ``setup.py`` and
      those under ``ropetest`` folder.


      Variables
      ---------

      + ``ropemacs-confirm-saving``: If non-nil, you have to confirm saving all
        modified python files before refactorings; otherwise they are saved
        automatically. Defaults to ``t``.
      + ``ropemacs-codeassist-maxfixes``: The maximum number of syntax errors
        to fix for code assists.  The default value is ``1``.
      + ``ropemacs-separate-doc-buffer``: Should ``rope-show-doc`` use a
        separate buffer or the minibuffer.  Defaults to ``t``.
      + ``ropemacs-guess-project``: If non-nil, ropemacs tries to guess and
        open the project that contains the file on which a rope command is
        performed when no project is already opened.

      + ``ropemacs-enable-autoimport``: Shows whether to enable autoimport.
        Defaults to ``nil``.
      + ``ropemacs-autoimport-modules``: The name of modules whose global
        names should be cached.  ``rope-generate-autoimport-cache`` reads
        this list and fills its cache.
      + ``ropemacs-autoimport-underlineds``: If set, autoimport will cache
        names starting with underlines, too.

      These variables change the keybinding.  They should be set before
      loading ropemacs.

      + ``ropemacs-local-prefix``: The prefix for ropemacs refactorings.
        Defaults to ``C-c r``.
      + ``ropemacs-global-prefix``: The prefix for ropemacs project commands
        Defaults to ``C-x p``.
      + ``ropemacs-enable-shortcuts``: Shows whether to bind ropemacs
        shortcuts keys.  Defaults to ``t``.


      Keybinding
      ----------

      Uses almost the same keybinding as ropeide.  Note that global commands
      have a ``C-x p`` prefix and local commands have a ``C-c r`` prefix.
      You can change that (see variables_ section).

      ================  ============================
      Key               Command
      ================  ============================
      C-x p o           rope-open-project
      C-x p k           rope-close-project
      C-x p f           rope-find-file
      C-x p 4 f         rope-find-file-other-window
      C-x p u           rope-undo
      C-x p r           rope-redo
      C-x p c           rope-project-config
      C-x p n [mpfd]    rope-create-(module|package|file|directory)
                        rope-write-project

      C-c r r           rope-rename
      C-c r l           rope-extract-variable
      C-c r m           rope-extract-method
      C-c r i           rope-inline
      C-c r v           rope-move
      C-c r x           rope-restructure
      C-c r u           rope-use-function
      C-c r f           rope-introduce-factory
      C-c r s           rope-change-signature
      C-c r 1 r         rope-rename-current-module
      C-c r 1 v         rope-move-current-module
      C-c r 1 p         rope-module-to-package

      C-c r o           rope-organize-imports
      C-c r n [vfcmp]   rope-generate-(variable|function|class|module|package)

      C-c r a /         rope-code-assist
      C-c r a g         rope-goto-definition
      C-c r a d         rope-show-doc
      C-c r a f         rope-find-occurrences
      C-c r a ?         rope-lucky-assist
      C-c r a j         rope-jump-to-global
      C-c r a c         rope-show-calltip
                        rope-analyze-module

                        rope-auto-import
                        rope-generate-autoimport-cache
      ===============   ============================


      Shortcuts
      ---------

      Some commands are used very frequently; specially the commands in
      code-assist group.  You can define your own shortcuts like this::

        (define-key ropemacs-local-keymap "\C-cg" 'rope-goto-definition)

      Ropemacs itself comes with a few shortcuts:

      ================  ============================
      Key               Command
      ================  ============================
      M-/               rope-code-assist
      M-?               rope-lucky-assist
      C-c g             rope-goto-definition
      C-c d             rope-show-doc
      C-c f             rope-find-occurrences
      ================  ============================

      These shortcuts will be used only when ropemacs-enable-shortcuts is
      non-nil (it is enabled by default).  Note that in order to disable these
      shortcuts, the value of ropemacs-enable-shortcuts should be set *before*
      loading ropemacs::

        (setq ropemacs-enable-shortcuts 'nil)


      Contributing
      ============

      Send your bug reports, feature requests and patches to `rope-dev (at)
      googlegroups.com`_.

      .. _`rope-dev (at) googlegroups.com`: http://groups.google.com/group/rope-dev


      License
      =======

      This program is under the terms of GPL (GNU General Public License).
      Have a look at ``COPYING`` file for more information.

***** Ropemacs Keybindings Cheat Sheet
      Configuração do Ropemacs está em [[RopemacsWithPython][aqui]]. *Use o atalho \C-xpl para carregar
      o ropemacs*.

      http://bitbucket.org/agr/ropemacs/src/7ec80793f003/docs/
      Keybinding
      ----------

      Uses almost the same keybinding as ropeide.  Note that global commands
      have a ``C-x p`` prefix and local commands have a ``C-c r`` prefix.
      You can change that (see variables_ section).

      ================  ============================
      Key               Command
      ================  ============================
      C-x p o           rope-open-project
      C-x p k           rope-close-project
      C-x p f           rope-find-file
      C-x p 4 f         rope-find-file-other-window
      C-x p u           rope-undo
      C-x p r           rope-redo
      C-x p c           rope-project-config
      C-x p n [mpfd]    rope-create-(module|package|file|directory)
      rope-write-project

      C-c r r           rope-rename
      C-c r l           rope-extract-variable
      C-c r m           rope-extract-method
      C-c r i           rope-inline
      C-c r v           rope-move
      C-c r x           rope-restructure
      C-c r u           rope-use-function
      C-c r f           rope-introduce-factory
      C-c r s           rope-change-signature
      C-c r 1 r         rope-rename-current-module
      C-c r 1 v         rope-move-current-module
      C-c r 1 p         rope-module-to-package

      C-c r o           rope-organize-imports
      C-c r n [vfcmp]   rope-generate-(variable|function|class|module|package)

      C-c r a /         rope-code-assist
      C-c r a g         rope-goto-definition
      C-c r a d         rope-show-doc
      C-c r a f         rope-find-occurrences
      C-c r a ?         rope-lucky-assist
      C-c r a j         rope-jump-to-global
      C-c r a c         rope-show-calltip
      rope-analyze-module

      rope-auto-import
      rope-generate-autoimport-cache
      ===============   ============================


      Shortcuts
      ---------

      Some commands are used very frequently; specially the commands in
      code-assist group.  You can define your own shortcuts like this::

      (define-key ropemacs-local-keymap "\C-cg" 'rope-goto-definition)

      Ropemacs itself comes with a few shortcuts:

      ================  ============================
      Key               Command
      ================  ============================
      M-/               rope-code-assist
      M-?               rope-lucky-assist
      C-c g             rope-goto-definition
      C-c d             rope-show-doc
      C-c f             rope-find-occurrences
      ================  ============================

      These shortcuts will be used only when ropemacs-enable-shortcuts is
      non-nil (it is enabled by default).  Note that in order to disable these
      shortcuts, the value of ropemacs-enable-shortcuts should be set *before*
      loading ropemacs::

      (setq ropemacs-enable-shortcuts 'nil)

***** COMMENT Auto-complete ropemacs source                       :AutoComplete:
      :PROPERTIES:
      :TANGlE:   no
      :END:
      The ac-source-ropemacs source is defined in the auto-complete-config.el
      library.

      #+begin_src emacs-lisp
        (with-eval-after-load "auto-complete"
          ;; I got these custom nropemacs and nropemacs-dot sources from
          ;; https://bitbucket.org/birkenfeld/dotemacs/src/3de0dc9c5ad0e3b9d8cbed8dd77f4fa294e10855/auto-complete-python.el?at=default
          ;; I added a custom face for them and changed the symbol to 'r'.
          (defun ac-ropemacs-candidates ()
            (mapcar (lambda (completion)
                      (concat ac-prefix completion))
                    (rope-completions)))

          (ac-define-source nropemacs
                            '((candidates . ac-ropemacs-candidates)
                              (candidate-face . ac-my-python-candidate-face)
                              (selection-face . ac-my-python-selection-face)
                              (symbol     . "r")))

          (ac-define-source nropemacs-dot
                            '((candidates . ac-ropemacs-candidates)
                              (candidate-face . ac-my-python-candidate-face)
                              (selection-face . ac-my-python-selection-face)
                              (symbol     . "r")
                              (prefix     . c-dot)
                              (requires   . 0)))
          )

        ;; Possible sources for auto-complete from ropemacs
        ;; - ac-source-ropemacs: Defined in the auto-complete-config.el file
        ;; - nropemacs: Defined here
        ;; - nropemacs-dot: Defined here
        ;;
        ;; Note that the completion will come from the first source that has it
        (defun darlan/add-ropemacs-source ()
          "Add the ropemacs source (provided in the auto-complete-config
              library) in the python buffers."
          (setq ac-sources '(ac-source-yasnippet ac-source-dictionary
                                                 ac-source-nropemacs
                                                 ac-source-nropemacs-dot))
          ;; (add-to-list 'ac-omni-completion-sources
          ;;              (cons "\\." '(ac-source-nropemacs-dot)))
          ;; (add-to-list 'ac-omni-completion-sources
          ;;              (cons "\\." '(ac-source-nropemacs)))
          )

        (add-hook 'python-mode-hook 'darlan/add-ropemacs-source)

      #+end_src

*** COMMENT Emacs Jedi                                                    :Jedi:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Useful Keybindings
    - C-c TAB -> jedi complete
    - C-c / -> Jedi related names
    - C-c . -> jedi goto definition
      - Use "C-c ," to go back after using "C-c ."
    - C-c d -> jedi show doc



    # Don't use at the same time as ropemacs. Activate only one of them.
    #+begin_src emacs-lisp
      ;; This need to be set BEFORE jedi is loaded.
      (setq jedi:setup-keys t)  ; Set the default jedi keybindings
         ;; ``<C-tab>`` : = `jedi:key-complete'
         ;;     Complete code at point. (`jedi:complete')
      
         ;; ``C-.`` : = `jedi:key-goto-definition'
         ;;     Goto the definition of the object at point. (`jedi:goto-definition')
      
         ;; ``C-c d`` : = `jedi:key-show-doc'
         ;;     Goto the definition of the object at point. (`jedi:show-doc')
      
         ;; ``C-c r`` : = `jedi:key-related-names'
         ;;     Find related names of the object at point.
         ;;     (`helm-jedi-related-names' / `anything-jedi-related-names')
      
      ;; Load the jedi library if it is available
      (with-library 'jedi
          ;; (add-hook 'python-mode-hook 'jedi:setup)
          ;; (add-hook 'python-mode-hook 'jedi:ac-setup)
          (autoload 'jedi:setup "jedi" nil t)           ; You should Probably remove this line
          (setq jedi:complete-on-dot t)                 ; optional
      
          (add-hook 'python-mode-hook 'jedi:setup)
      
          (with-library 'jedi-eldoc
               ;; change face as you like
               (set-face-attribute 'jedi-eldoc:highlight-function-argument nil
                                   :foreground "green")
               (add-hook 'python-mode-hook 'jedi-eldoc-mode))
      
          ;; Jedi provides the ac-source-jedi-direct source, which is
          ;; automatically added to ac-sources by the jedi-setup function. Here
          ;; we only modify the color of the ac-source-jedi-direct source to my
          ;; predefined (green) faces.
          (add-to-list 'ac-source-jedi-direct '(candidate-face . ac-my-python-candidate-face))
          (add-to-list 'ac-source-jedi-direct '(selection-face . ac-my-python-selection-face))
          )
    #+end_src
*** COMMENT Elpy                                                          :Elpy:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      (elpy-enable)
    #+end_src
*** COMMENT Elpy (manual key-bindings - Disable this if you enable elpy-mode) :Elpy:Keybindings:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    I don't like everything in Elpy and unfortunatelly it does not provide
    many ways to customize it. However, it has some pretty good
    functions. Therefore, I'll bind some of these functions to its regular
    keybindings in python buffers.
    
    #+begin_src emacs-lisp
      ;; (autoload 'elpy-occur-definitions "elpy" nil t)
      ;; (autoload 'elpy-show-defun "elpy" nil t)
      ;; (autoload 'elpy-nav-backward-statement "elpy" nil t)
      ;; (autoload 'elpy-nav-forward-statement "elpy" nil t)
      ;; (autoload 'elpy-nav-forward-definition "elpy" nil t)
      ;; (autoload 'elpy-nav-backward-definition "elpy" nil t)

      (autoload 'elpy-nav-next-iblock "elpy" nil t)
      (autoload 'elpy-nav-previous-iblock "elpy" nil t)

      ;; (add-hook 'python-mode-hook
      ;;           (lambda ()
      ;;             ;; C-c C-o     elpy-occur-definitions
      ;;             (local-set-key "\C-c\C-o" 'elpy-occur-definitions)

      ;;             ;; C-c C-q     elpy-show-defun
      ;;             (local-set-key "\C-c\C-q" 'elpy-show-defun)

      ;;             ;; M-a         elpy-nav-backward-statement
      ;;             (local-set-key "\M-a" 'elpy-nav-backward-statement)

      ;;             ;; M-e         elpy-nav-forward-statement
      ;;             (local-set-key "\M-e" 'elpy-nav-forward-statement)

      ;;             ;; M-n, C-down elpy-forward-definition
      ;;             (local-set-key "\C-\M-n" 'elpy-nav-next-iblock)

      ;;             ;; M-p, C-up   elpy-backward-definition
      ;;             (local-set-key "\C-\M-p" 'elpy-nav-previous-iblock)

      ;;             ;; Outline "go UP"
      ;;             (local-set-key "\C-\M-u" 'outline-up-heading)
      ;;             ))
    #+end_src
*** Anaconda mode
    Usage:
    |------------+--------------------------------|
    | Keybinding | Description                    |
    |------------+--------------------------------|
    | M-.        | anaconda-mode-goto-definitions |
    | M-*        | anaconda-nav-pop-marker        |
    | M-?        | anaconda-mode-view-doc         |
    | M-r        | anaconda-mode-usages           |
    |------------+--------------------------------|
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook 'anaconda-mode)
    #+end_src
***** Completions
      Anaconda-mode will change completion-at-point-functions to include
      =anaconda-mode-complete-at-point=. That means that it should work
      out-of-the-box with Emacs standard C-M-i key-binding.

      Also, one of company back-ends IS the standard Emacs
      completion-at-point-functions. Therefore, company-mode should also
      work out-of-the-box. For instance, write "np.al" and try to complete
      it.

      On the other hand, the company-anaconda back-end is more complete
      back-end and thus we will use it. One particularly useful improvement
      is that it can complete just after the dot, while with
      complete-at-point you need to write at least one letter.
******* Companny-mode backend
        #+begin_src emacs-lisp
          (add-to-list 'company-backends 'company-anaconda)
        #+end_src
*** Anaconda Environments
    Anaconda environments are very similar to virtualenv environments. That
    means that we can use the =virtualenvwrapper= emacs package to work
    with them.

    For that we just need to change the location where the
    =virtualenvwrapper= emacs package looks for the environments.
    #+begin_src emacs-lisp
      (setq venv-location "/home/darlan/miniconda3/envs")
    #+end_src
    
    Now you can use activate an environment with =venv-workon=.

*** Eldoc                                                                 :Hook:
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook 'eldoc-mode)
    #+end_src
*** Make .pyx (Cython files) open in python mode
    #+begin_src emacs-lisp
      (autoload 'cython-mode "cython-mode" "Major mode for Cython development, derived from Python mode." t)
      (add-to-list 'auto-mode-alist '("\.pyx" . cython-mode))
    #+end_src
*** Easily run nosetests                            :Nose:Nosetests:Keybindings:
    There is a nose.el library, which provide the nosetests-all
    method. This is a good method to run all tests in a project.

    There is another library called nosetests.el which provides the
    nosetests-compile method. With the cursor in a test case, call this
    method to run only that method. See
    http://blog.chmouel.com/2012/10/14/emacs-and-nosetests/

    This code load the nose.el and the nosetests.el libraries (if they are
    installed) and set key-bindings for the nosetests-all and
    nosetests-compile methods in a python buffer.
    #+begin_src emacs-lisp
      (use-package python
        :defer t
        :config
        (use-package nose
          :config
          (bind-key [M-f9] 'nosetests-all python-mode-map)
          )

        (use-package nosetests
          :config
          (bind-key [C-f9] 'nosetests-compile python-mode-map)
          )
        )
    #+end_src

*** Open IPython and IPython Qt Console in the current folder
    #+begin_src emacs-lisp
      (defun ipython-terminal-dir (dir-as-string)
        (start-process-shell-command
         "browse"
         "*scratch*"
         (concat "/usr/bin/gnome-terminal --working-directory " (concat "\"" (expand-file-name dir-as-string) "\"" " -e ipython")))
        )

      (defun ipython-terminal-default-dir ()
        "Open ipython terminal in the default directory, which is the
      directory of the file associated with the current buffer."
        (interactive)
        (ipython-terminal-dir default-directory))

      (defun ipython-qtconsole-dir (dir-as-string)
        (message (concat "cd " (concat "" (expand-file-name dir-as-string) "" " && /usr/bin/ipython qtconsole")))
        (start-process-shell-command
         "browse"
         "*scratch*"
         ;; (concat "cd " (concat "\"" (expand-file-name dir-as-string) "\"" " && \"/usr/bin/ipython\""))
         (concat "cd " (concat "" (expand-file-name dir-as-string) "" " && /usr/bin/ipython qtconsole"))
         )
        )

      (defun ipython-qtconsole-default-dir ()
        "Open ipython qtconsole in the default directory, which is the
      directory of the file associated with the current buffer."
        (interactive)
        (ipython-qtconsole-dir default-directory))

      (add-hook 'python-mode-hook
                (lambda ()
                  (local-set-key (kbd "<C-f11>") 'ipython-terminal-default-dir)
                  (local-set-key (kbd "<M-f11>") 'ipython-qtconsole-default-dir)
                  ))
    #+end_src
*** Debug helpers
    http://www.masteringemacs.org/articles/2012/05/29/compiling-running-scripts-emacs/
    #+begin_src emacs-lisp
      (defun python--add-debug-highlight ()
        "Adds a highlighter for use by `python--pdb-breakpoint-string'"
        (highlight-lines-matching-regexp "## DEBUG ##\\s-*$" 'hi-red-b)
        )

      (add-hook 'python-mode-hook 'python--add-debug-highlight)

      (defvar python--pdb-breakpoint-string "import pudb; pudb.set_trace()  ## DEBUG ##"
        "Python breakpoint string used by `python-insert-breakpoint'")

      (defun python-insert-breakpoint ()
        "Inserts a python breakpoint using `pdb'"
        (interactive)
        (back-to-indentation)
        ;; this preserves the correct indentation in case the line above
        ;; point is a nested block
        (split-line)
        (insert python--pdb-breakpoint-string))

      (defadvice compile (before ad-compile-smart activate)
        "Advises `compile' so it sets the argument COMINT to t
      if breakpoints are present in `python-mode' files"
        (when (derived-mode-p major-mode 'python-mode)
          (save-excursion
            (save-match-data
              (goto-char (point-min))
              (if (re-search-forward (concat "^\\s-*" python--pdb-breakpoint-string "$")
                                     (point-max) t)
                  ;; set COMINT argument to `t'.
                  (ad-set-arg 1 t))))))

      ;; Add breakpoints in pudb
      (setq pudb-bp-file (expand-file-name "~/.config/pudb/saved-breakpoints-2.7"))
      (defun pudb-add-breakpoint ()
        (interactive)
        (append-to-file
         (concat "b " buffer-file-name ":"
                 (nth 1 (split-string (what-line))) "\n")
         nil pudb-bp-file))


      ;;(define-key python-mode-map (kbd "<f8>") 'python-insert-breakpoint)
      (add-hook 'python-mode-hook
                (lambda ()
                  (local-set-key [f8] 'python-insert-breakpoint)
                  (local-set-key [C-f8] 'pudb-add-breakpoint)
                  ))
    #+end_src
*** COMMENT Python Cell Mode
    :PROPERTIES:
    :TANGLE:   no
    :END:
    Provided by the python-cell package installed from elpa.

    When the mode is active you can use the following Key Bindings:
    - Ctrl-Down - move to the beginning of the next cell
    - Ctrl-Up - move to the beginning of the previous cell


    Enable python-cell-mode in every python buffer.
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook 'python-cell-mode)
    #+end_src
*** COMMENT Semantic-mode with Python                                 :Semantic:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook
                (lambda ()
                  (semantic-mode)
                  ))
    #+end_src
*** hs-minor-mode                                                     :HideShow:
    #+begin_src emacs-lisp
      (add-hook 'python-mode-hook
                (lambda ()
                  (hs-minor-mode)
                  ;; Add fringe markers to hide/show with the mouse
                  (hideshowvis-enable)
                  ))
    #+end_src
* Ein -> IPython Notebook                                  :Ein:Notebook:Python:
  Interesting keybindings
  |--------------+----------------------------------------|
  | <C-down>     | Next input cell                        |
  | <C-up>       | Previous input cell                    |
  | <M-down>     | Move cell down                         |
  | <M-up>       | Move cell up                           |
  |--------------+----------------------------------------|
  | <M-S-return> | Execute cell and insert new cell below |
  |--------------+----------------------------------------|
  | C-x C-s      | Notebook Save                          |
  | C-x C-w      | Notebook Rename                        |
* Gurobi
  The instructions to install Gurobi include add a few lines to your
  .bashrc file in order to add some folders to the path. However, Emacs
  will not see that and this we add the folders here using the corresponing
  elisp functions.

  We assume that Gurobi was installed in =/opt/gurobi600/=.
  #+begin_src emacs-lisp
    (setenv "GUROBI_HOME" "/opt/gurobi600/linux64")
    (setenv "LD_LIBRARY_PATH" "/opt/gurobi600/linux64/lib")
    (setenv "PATH" (concat (getenv "PATH") ":/opt/gurobi600/linux64/bin"))
    (setq exec-path (append exec-path '("/opt/gurobi600/linux64/bin")))
  #+end_src
* Gnuplot                                                              :GnuPlot:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Gnuplot xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  #+begin_src emacs-lisp
    ;; these lines enable the use of gnuplot mode
      (autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
      (autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)

    ;; this line automatically causes all files with the .gp extension to
    ;; be loaded into gnuplot mode
      (setq auto-mode-alist (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))

    ;; This line binds the function-9 key so that it opens a buffer into
    ;; gnuplot mode
      ;; (global-set-key [(f9)] 'gnuplot-make-buffer)
  #+end_src
* CMake                                                                  :CMake:
*** auto-mode-alist to make CMakeLists.txt open in cmake-mode
    #+begin_src emacs-lisp
      ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ;; Major mode for editing the CMakeLists.txt file
      (autoload 'cmake-mode "cmake-mode" nil t)
      (add-to-list 'auto-mode-alist '("CMakeLists.txt" . cmake-mode))
    #+end_src
*** Make the name of the CMakeLists.txt files more readable               :Hook:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    #+begin_src emacs-lisp
      ;; This will rename the buffer so that you don't have a lot of buffers
      ;; called CMakeLists.txt when you open CMakeLists.txt files in different
      ;; folders
      (defun cmake-rename-buffer ()
        "Renames a CMakeLists.txt buffer to cmake-<directory name>."
        (interactive)
        ;(print (concat "buffer-filename = " (buffer-file-name)))
        ;(print (concat "buffer-name     = " (buffer-name)))
        (when (and (buffer-file-name) (string-match "CMakeLists.txt" (buffer-name)))
            ;(setq file-name (file-name-nondirectory (buffer-file-name)))
            (setq parent-dir (file-name-nondirectory (directory-file-name (file-name-directory (buffer-file-name)))))
            ;(print (concat "parent-dir = " parent-dir))
            (setq new-buffer-name (concat "cmake-" parent-dir))
            ;(print (concat "new-buffer-name= " new-buffer-name))
            (rename-buffer new-buffer-name t)
            )
        )

      (add-hook 'cmake-mode-hook (function cmake-rename-buffer))
    #+end_src
* Web: HTML, Javascript, etc
*** Web-mode
    See http://web-mode.org/ for more info. (and shortcuts)
    
    Some Web-mode shortcuts
    | Command   | What it does                                           |
    |-----------+--------------------------------------------------------|
    | C-c C-f   | Fold / unfold the current tag                          |
    | C-c C-e r | Rename the current element, including its closing tag. |
    | C-c C-i   | Indent the entire buffer                               |
    | C-c C-t b | Jump to beginning of the current tag                   |
    | C-c C-t e | Jump to the end of the current tag                     |
    | C-c /     | Close the currently open tag                           |

***** Use web-mode for html files
      Install the web-mode from melpa
      #+begin_src emacs-lisp
        ;; Use web-mode to edit plain html files
        (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      #+end_src

      Install also *company-web* and maybe ac-html-bootstrap

***** use-package - START
      #+begin_src emacs-lisp
        ;; We set :defer to t, since web-mode will be automatically loaded in the
        ;; first time that an html file is opened.
        (use-package web-mode
          :defer t
          :config      
      #+end_src
***** Add some extra snippets to web-mode
      The character | is used to locate the cursor position (this is
      optional)
      #+begin_src emacs-lisp
          ;; The character | is used to locate the cursor position (this is optional)
          (add-to-list 'web-mode-snippets
                       '("d3 div container" . "<div class=\"container\">\n|\n</div>")
                       )

          (add-to-list 'web-mode-snippets
                       '("svg id->visualization" . "<svg id=\"visualization\" width=800 height=500>\n|\n</svg>")
                       )

          (add-to-list 'web-mode-snippets
                       '("skewer script" . "<!-- Integration with skewer mode in Emacs -->\n<!-- Comment this after you finishe your work -->\n<script src=\"http://localhost:8080/skewer\"></script>\n")
                       )

          (add-to-list 'web-mode-snippets
                       '("d3 script" . "<!-- Add the D3 library-->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\" charset=\"utf-8\"></script>")
                       )
          
        ;; (with-eval-after-load "web-mode"
        ;;   ;; The character | is used to locate the cursor position (this is optional)
        ;;   (add-to-list 'web-mode-snippets
        ;;                '("d3 div container" . "<div class=\"container\">\n|\n</div>")
        ;;                )

        ;;   (add-to-list 'web-mode-snippets
        ;;                '("svg id->visualization" . "<svg id=\"visualization\" width=800 height=500>\n|\n</svg>")
        ;;                )

        ;;   (add-to-list 'web-mode-snippets
        ;;                '("skewer script" . "<!-- Integration with skewer mode in Emacs -->\n<!-- Comment this after you finishe your work -->\n<script src=\"http://localhost:8080/skewer\"></script>\n")
        ;;                )

        ;;   (add-to-list 'web-mode-snippets
        ;;                '("d3 script" . "<!-- Add the D3 library-->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\" charset=\"utf-8\"></script>")
        ;;                )
        ;;   )
                ;; (setq web-mode-snippets
                ;;       '(
                ;;         ("ul" . "<ul>\n<li>|</li>\n<li></li>\n</ul>")
                ;;         ("table" . "<table><tbody>\n<tr>\n<td>|</td>\n<td></td>\n</tr>\n</tbody></table>")
                ;;         ("html5" . "<!doctype html>\n<html>\n<head>\n<title></title>\n<meta charset=\"utf-8\" />\n</head>\n<body>\n|\n</body>\n</html>")
                ;;         )
                ;;       )
      #+end_src
***** Enable engine detection
      Detect such directive -*- engine: ENGINE -*- at the top of the file.

      #+begin_src emacs-lisp
        (setq web-mode-enable-engine-detection t)
        ;; (with-eval-after-load "web-mode"
        ;;   (setq web-mode-enable-engine-detection t)
        ;;   )
      #+end_src
***** Call darlan/common-programming-options in web-mode-hook
      #+begin_src emacs-lisp
        ;;(add-hook 'web-mode-hook 'darlan/common-programming-options)
      #+end_src
***** Highlight the current element
      #+begin_src emacs-lisp

        (setq web-mode-enable-current-element-highlight t)

        (set-face-attribute 'web-mode-current-element-highlight-face nil
                            :foreground "white"
                            :background "orange red")

        ;; (with-eval-after-load "web-mode"
        ;;   (setq web-mode-enable-current-element-highlight t)

        ;;   (set-face-attribute 'web-mode-current-element-highlight-face nil
        ;;                       :foreground "white"
        ;;                       :background "orange red")
        ;;   )
      #+end_src
***** use-package - END
      #+begin_src emacs-lisp
        )
      #+end_src
*** Javascript                                                     :javascript:
    Semantic is not working in javascript mode. 

    Maybe you should disable it to allow other completion sources in
    companny-mode to work such as workds in same buffer.
***** js2-mode
      See http://emacswiki.org/emacs/Js2Mode

      #+begin_src emacs-lisp
        ;; We can either use auto-mode alist to associate javascrip files with the
        ;; major js2-mode, or we can use js2-minor-mode to use js2 as a linter in
        ;; another javascript major mode
        (add-hook 'js-mode-hook 'js2-minor-mode)
        ;;(add-hook 'js2-minor-mode-hook 'darlan/common-programming-options)
        ;;(add-hook 'js2-mode-hook 'ac-js2-mode)

        ;; To set the amount of syntax highlighting to perform, change the value of
        ;; the variable to the level that you want (default is 2).
        (setq js2-highlight-level 3)
      #+end_src
***** js3-mode
      Vi na lista de pacotes (parece ser um fork do js2-mode).
      
      ACHO QUE NÃO VALE A PENA USÁ-LO POR ENQUANTO (muito novo).

***** jshint: Linting javascript files                           :jshint:jslint:
      Install jshint with
      : sudo npm install -g jshint
      Now flycheck will use jshint to show you errors.

      Note that js2-mode sets the keybinding =C-x `= to "next-error".

***** COMMENT js2-refactor                                                    :Refactor:
      Veja como instalar e usar.

***** Tern-mode (minor-mode)                                              :tern:
      Tern is a stand-alone code-analysis engine for JavaScript. It is
      intended to be used with a code editor plugin to enhance the editor's
      support for intelligent JavaScript editing. Features provided are:
      - Autocompletion on variables and properties
      - Function argument hints
      - Querying the type of an expression
      - Finding the definition of something
      - Automatic refactoring 

        
      Note: Tern is not "installed". Basically, you clone its repo and set
      emacs to used. The emacs plugin is part of the official repo.
      http://ternjs.net/doc/manual.html#emacs

      NOTE: For the best use you need to create a ".tern-project" file
      describing your project. See http://ternjs.net/doc/manual.html#configuration

      Very nice minor mode for javascript.
      Features:
      - add a completion-at-point function that activates Tern’s
        completion.
        + But there is also the company-tern package which adds a tern
          backend to company-mode.
      -  The following additional keys are bound:
         | M-.     | Jump to the definition of the thing under the cursor.                                     |
         | M-,     | Brings you back to last place you were when you pressed M-..                              |
         | C-c C-r | Rename the variable under the cursor.                                                     |
         | C-c C-c | Find the type of the thing under the cursor.                                              |
         | C-c C-d | Find docs of the thing under the cursor. Press again to open the associated URL (if any). |

      #+begin_src emacs-lisp
        ;; Note: You also need to add tern/bin to yout shell path
        (add-to-list 'load-path (expand-file-name "~/cvs_files/tern/emacs/"))
        (autoload 'tern-mode "tern.el" nil t)

        ;; Use tern minor mode in js-mode
        (add-hook 'js-mode-hook 'tern-mode)

        ;; Also use tern minor mode in js2 mode, if you preffer that one
        (add-hook 'js2-mode-hook 'tern-mode)
      #+end_src
***** Completion                                                       :Company:
      For auto-complete there is the ac-js2 package. I think it can work
      integrated with skewer-mode.
      
      For company there is the company-tern package, which uses ternjs.
      
******* company-tern
        See README in 
        https://github.com/proofit404/company-tern

        You need to install tern for it to work.
        See https://github.com/marijnh/tern

        #+begin_src emacs-lisp
          ;; You need to activate tern-mode for the company-tern backend to work
          (add-to-list 'company-backends 'company-tern)
        #+end_src

*** skewer-mode (Javascript)                                        :javascript:
    #+begin_src emacs-lisp
      (add-hook 'js2-mode-hook 'skewer-mode)
      (add-hook 'css-mode-hook 'skewer-css-mode)
      (add-hook 'html-mode-hook 'skewer-html-mode)
      (add-hook 'web-mode-hook 'skewer-html-mode)
    #+end_src

    I have installed skewer-mode through package-install.

    - M-x `run-skewer' to attach a browser to Emacs. This will open a new
      tab and the javascript console of that tab is the one that will be
      attached to emacs.
    - From a `js2-mode' buffer with `skewer-mode' minor mode enabled, send
      forms to the browser to evaluate. The keybindings for evaluating
      expressions in the browser are just like the Lisp modes. These are
      provided by the minor mode skewer-mode.

      + C-x C-e: Evaluate the form before the point and display the result
        in the minibuffer. If given a prefix argument, insert the result
        into the current buffer.
      + C-M-x: Evaluate the top-level form around the point.
      + C-c C-k: Load the current buffer.
      + C-c C-z: Select the REPL buffer.


    Additionally, css-mode and html-mode get similar sets of bindings for
    modifying the CSS rules and HTML on the current page.
    
***** Run skewer in your own documents
      To skewer your own document rather than the provided blank one,
      
      1. Load the dependencies
      2. Load skewer-mode.el
      3. Start the HTTP server (httpd-start)
      4. Include "http://localhost:8080/skewer" as a script (see example.html and check your httpd-port)
      5. Visit the document from your browser

         
      After that, you can open javascript files and css files included in
      your html file. Then toy can change something and send to the
      browser.
      
      Ex: Change some css selector and then (with the cursor in that
      selector) use =C-M-x= to send the change to the browser.
      
***** COMMENT skewer-reload-stylesheets
      Installed though package install.

      Start skewer then skewer the browser window you want to live-edit.
      
      Next, open a CSS file used on the skewered page, and activate this
      mode.  Make some edits then press `C-x C-r`. The stylesheet will be
      saved, and the browser will reload it from disk, by removing its link
      tag from the DOM then re-inserting it.

      Key bindings:
      * C-x C-r -- `skewer-reload-stylesheets-reload-buffer`
***** Evaluate the buffer with skewer automatically on change
      See the livid-mode package in Elpa.
*** Impatient-mode
    Installed through package install.
    https://github.com/skeeto/impatient-mode
    
    In order to use it, first enable the web server provided by
    simple-httpd
    : M-x httpd-start

    Then activate impatient-mode in any buffer you want (an html file, a
    css file, etc).
    : M-x impatient-mode

    Now in your browser, navigate to 
    http://localhost:8080/imp/
*** Palette package
    Call M-x palette
    See http://emacswiki.org/emacs/ColorPalette
* SQL
*** sql-indent
    Indent SQL statements.

    As the indentation of SQL statements depends not only on the previous
    line but also on the current line, empty lines cannot always be
    indented correctly.

    Usage note: Loading this file will make all SQL mode buffers created
    from then on use `sql-indent-line' for indentation.

    #+begin_src emacs-lisp
      (eval-after-load "sql"
        '(load-library "sql-indent"))
    #+end_src
*** sqlup-mode
    Activate the minor mode (M-x sqlup-mode) and type away Alternatively,
    use a hook: (add-hook 'sql-mode 'sqlup-mode) The capitalization is
    triggered when you press the following keys:
    - SPC
    - ,
    - ;
    - (
    - \r (Enter)

    This package also provides a function to capitalize SQL keywords inside
    a region - always available, no need to activate the minor mode to use
    it:
    : M-x sqlup-capitalize-keywords-in-region

    #+begin_src emacs-lisp
      (add-hook 'sql-mode-hook 'sqlup-mode)
      (add-hook 'sql-interactive-mode-hook 'sqlup-mode)
    #+end_src
* Org-File Setup                                                      :noexport:
#+STARTUP: odd
#+OPTIONS: toc:nil
#+OPTIONS: ^:{}
#+STARTUP: hidestars
