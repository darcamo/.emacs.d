#+TITLE:Emacs Configurations
#+AUTHOR:Darlan Cavalcante Moreira
#+EMAIL:darcamo@gmail.com

Veja quando der
http://blog.edencardim.com/my-emacs-configuration
https://github.com/eschulte/emacs24-starter-kit
http://eschulte.github.com/emacs-starter-kit/

Dê uma olhada na bilbioteca makefile-runner que vc instalou pelo elpa. Pode
ser útil.


* Require the 'use-package' package
  #+begin_src emacs-lisp
  (require 'use-package)
  #+end_src


* Macros used here
  The 'with-library' macro below will require "'symbol" and eval "body" if
  the library "'symbol" exists. That is much better then an explicit
  required followed by code because you won't get errors if the library is
  not installed. This macro was taken from
  http://www.emacswiki.org/emacs/LoadingLispFiles

  Example usage: In order to required the tabbar library and set global
  keys only when it is available, use the code below.
  : (with-library 'tabbar
  :   (tabbar-mode)
  :   (global-set-key [(control tab)]       'tabbar-forward)
  :   (global-set-key [(control shift tab)] 'tabbar-backward)
  :   (global-set-key [(control shift iso-lefttab)] 'tabbar-backward)
  :   (global-set-key [(control f10)] 'tabbar-local-mode))
  #+begin_src emacs-lisp
    (defmacro with-library (symbol &rest body)
      `(when (require ,symbol nil t)
         ,@body))
  #+end_src

* Dicas
*** Ainda não aprendi
    + C-h C-m em qualquer major mode para aprender os keybindings. Veja em [[*Discover Major mode
       keybindings][aqui]].

    + Para testar lisp, use M-x ielm

    + Pacote elscreen -> load-library elscreen e depois use elscreen-create
      quando quiser criar novos screens Comandos: elscreen-toggle (C-z a);
      - elscreen-next/previous (C-z n/p) ; elscreen-screen-nickname (C-z A)

    + Q: How to list lines containing a string?
      - A: list-matching-lines. There's also delete-matching-lines.

    + Q: I have a set of different texts i want to paste frequently. Is there
      a way to use like multiple clipboards?
      - A: Yes. Highlight the region, copy-to-register, give it a name such
        as 1. To paste it, use insert-register.

    + In emacs, a selection of text is called “region”. Many commands acts on
      the region. Here are some examples of commands.

    + *proced* -> uma espécie de dired, mas para os processos que estão rodando
    + *list-matching-lines*
    + *count-matches*
    + *delete-matching-lines*
    + *delete-non-matching-lines*
    + *align-current* -> Muito bom para programação
    + Use M-h para marcar um parágrafo. Útil para marcar uma região para usar
      o comando align-reexp, por exemplo
    + whitespace-manipulation commands: C-x C-o (delete-blank-lines),
      *delete-trailing-whitespace*, *tabify* and *untabify*, *indent-region*, and so
      on.
    + O comando *occur* é excelente para ver onde uma regexp ocorre (mostra a linha)
    + Além do comando occur, veja tb o comando all (do Emacs-Goodies-el)
    + edit-env para editar variáveis de ambiente
    + Para customizar uma fonte/face, coloque o cursor em cima e faça M-x
      customize-face. Para listar as faces vc pode usar M-x
      list-faces-display. Use C-u C-x = para mostrar informações bem verbose
      sobre o caractere na posição do cursor
    + Caso o Mixtex substitua letras acentuadas por código latex, use o
      comando iso-tex2iso para desfazer.
    + Você pode também usar o minor-mode iso-tex (procure no ctan se não o tem)
    + Se for usar expressões regulares, experimente o regex-tool ou o
      regexp-builder
    + Use variável de arquivo "coding: utf-8", "coding: latin-1" para setar
      explicitamente a codificação a ser usada
    + *Caso abra um arquivo com codificação (encoding) errada, use C-x <RET> r para reler
      o arquivo com outra codificação*
    + global-set-key com tecla enter (RET): use \C-m onde no lugar
    + Use C-h w e diga o nome de uma função para saber o atalho para ela. Veja mais em http://emacs-fu.blogspot.com/2009_02_01_archive.html
    + Para saber o nome de cores (colors) que o emacs entente (para
      customizar) use o comando list-colors-display
    + selective-display: Digita "C-u numero C-x $" Isso vai fazer com que
      todas as linhas no buffer que estejam indentadas mais que o número
      fornecido fiquem invisíveis. Para voltar é só "C-x $"
    + linum-mode mostra o número das linhas na esquerda
    + C-x ESC ESC edita e repete o último comando executado. Pode ser bem
      útil
    + To save the current location in register a: C-x r <SPC> a
    + To jump to the location in register a: C-x j a
    + To list saved registers: C-x r l
    + Rode o comando imenu e indique diga, por exemplo, o nome de uma função
      em python para ir direto para ela (com tab completion)
      - Veja a wiki do imenu que vale a pena
        http://www.emacswiki.org/cgi-bin/wiki/ImenuMode
    + LaTeX-fill-environment -> C-c C-q C-e
    + LaTeX-mark-environment -> C-c .

    + Dica: vc pode esconder o conteudo de uma função utilizando o comando
      hs-hide-block (fornecido pelo minor-mode hideshow)

    + In your capture buffer you can finish it with C-2 C-c C-w (instead of
      C-c C-c) to file to the current clocking task.

*** Já aprendidas
    + C-x TAB shift a region (using spaces)
    + Para saber onde uma bilioteca do emacs está use o comando
      *locate-library*
    + Use dedicated-mode quando quiser que uma window fique fixa (útil para
      evitar que outros buffers usem essa window para, por exemplo, mostrar o
      completion do ipython)
    + M-g g -> Go to line

* General Configurations
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx General Configurations xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Locale                                                     :Language:Locale:
    #+begin_src emacs-lisp
      ;; Normalmente isso não é necessário, já que o emacs pega o locale do
      ;; sistema quando essa variável não é setada. No entanto como estou com o
      ;; laptop em francês é melhor setar aqui para deixar as datas do org-mode
      ;; em português mesmo no laptop.
      (setq system-time-locale "pt_BR.UTF-8")

      ;; English as default for spell checking
      (set-default 'ispell-local-dictionary "english")

      ;; Make Emacs use UTF-8 in files, filenames, terminal, etc..
      (set-language-environment 'UTF-8)
    #+end_src

*** COMMENT Delete to trash
    :PROPERTIES:
    :TANGLE:   no
    :END:
    #+begin_src emacs-lisp
      ;; Tell Emacs to move files to trash when deleting files (e.g. delete some
      ;; file in dired)
      (setq delete-by-moving-to-trash t)
    #+end_src
*** Usability                                               :Behavior:Usability:
***** Miscellaneous
      #+begin_src emacs-lisp
        ;; Asks for confirmation when leaving Emacs
        (setq confirm-kill-emacs 'yes-or-no-p)

        ;; Non-nil means cutting and pasting uses the clipboard.
        (setq x-select-enable-clipboard t)

        ;; Deleta região selecionada quando tecla DEL ou digita algum texto
        (delete-selection-mode 1)

        ;; Treat 'y' or <CR> as yes, 'n' as no.
        (fset 'yes-or-no-p 'y-or-n-p)

        ;; Auto-revert files when they are changed in the disk
        (setq-default global-auto-revert-mode t)
      #+end_src

***** Winner-mode                                                   :WinnerMode:
      #+begin_src emacs-lisp
        ;; Set winner-mode. Use "C-c left" to undo a change in the windows e "C-c
        ;; right" to redo it
        (use-package winner
          :ensure t
          :config
          (winner-mode)
          )
      #+end_src
***** Scrolling and mouse wheel
******* Scroll
        #+begin_src emacs-lisp
          ;; Some nice scrolling
          (setq-default scroll-margin 1 ; restricts how close point can come to the top or
                                ; bottom of a window
          scroll-conservatively 0 ; if you set it to number N, then if you move point
                                  ; just a little off the screen–less than N
                                  ; lines–then Emacs scrolls the text just far enough
                                  ; to bring point back on screen
          scroll-up-aggressively 0.01 ; a number (F, meaning fraction) between 0 and
                                      ; 1, and it specifies where on the screen to
                                      ; put point when scrolling upward. More
                                      ; precisely, when a window scrolls up because
                                      ; point is above the window start, the new
                                      ; start position is chosen to put point F part
                                      ; of the window height from the top
          scroll-down-aggressively 0.01) ; a number (F, meaning fraction) between 0
                                         ; and 1, and it specifies where on the
                                         ; screen to put point when scrolling
                                         ; downward. More precisely, when a window
                                         ; scrolls down because point is below the
                                         ; window bottom, the new start position is
                                         ; chosen to put point F part of the window
                                         ; height from the bottom
        #+end_src

******* Mouse wheel
        #+begin_src emacs-lisp
          ;; Mouse wheel configuration
          (setq mouse-wheel-scroll-amount '(3 ((shift) . 1))) ;; 3 lines at a time (on if shift is pressed)
          (setq mouse-wheel-progressive-speed nil)
        #+end_src

***** Windmove                                                        :Windmove:
      #+begin_src emacs-lisp
        (use-package windmove
          :ensure t
          :config
          ;; Seta keybindings para windmove e permite mudar de um buffer para o outro
          ;; com shift+seta
          (windmove-default-keybindings 'shift)
          )
      #+end_src
***** hi-lock-mode                                                  :HiLockMode:
      Use "C-x w h" to add a regex for a word or "C-x h l" for a line. Use
      hi-lock-unface-buffer to remove any previously added highlight
      #+begin_src emacs-lisp
        (use-package hi-lock
          :ensure t
          :config
          ;; Enable hi-lock-mode in all buffers
          (global-hi-lock-mode t)
          )
      #+end_src
***** Muda o comportamento de C-w e M-w
      #+begin_src emacs-lisp
        ;; Com os advices abaixo caso nada esteja selecionado o Emacs assume que
        ;; você quer dizer a linha atual
        (defadvice kill-ring-save (before slick-copy activate compile) "When called
          interactively with no active region, copy a single line instead."
          (interactive (if mark-active (list (region-beginning) (region-end)) (message
          "Copied line") (list (line-beginning-position) (line-beginning-position
          2)))))

        (defadvice kill-region (before slick-cut activate compile)
          "When called interactively with no active region, kill a single line instead."
          (interactive
            (if mark-active (list (region-beginning) (region-end))
              (list (line-beginning-position)
                (line-beginning-position 2)))))
      #+end_src
***** Bookmark+                                                   :BookmarkPlus:
      #+begin_src emacs-lisp
        (autoload 'bookmark-bmenu-list "bookmark+.el" nil t)
        (autoload 'bookmark-set "bookmark+.el" nil t)
      #+end_src
***** Go to last change                                            :Keybindings:
      Allows you to track back though the last places you altered
      #+begin_src emacs-lisp
        (use-package goto-last-change
          :ensure t
          :bind ("C-x C-n" . goto-last-change)
          )

        ;; (autoload 'goto-last-change "goto-last-change"
        ;;    "Set point to the position of the last change." t)
        ;; (global-set-key (kbd "C-x C-n") 'goto-last-change)
      #+end_src
***** Habilita alguns comandos desabilitados por padrão
      #+begin_src emacs-lisp
        ;; This will enable a some commands that come disabled by default in Emacs
        (put 'scroll-left 'disabled nil)
        (put 'narrow-to-region 'disabled nil)
        (put 'upcase-region 'disabled nil)
        (put 'downcase-region 'disabled nil)
      #+end_src
***** Abbrevs                                                           :Abbrev:
      #+begin_src emacs-lisp
        (add-to-list 'auto-mode-alist '("\\.abbrev_defs\\'" . emacs-lisp-mode))
        ;; Don't require case match for dabbrev expansion
        ;;(setq dabbrev-case-replace nil)
      #+end_src
***** unfill paragraph -> Desfaz o que o fill-paragraph fez        :Keybindings:
      Installed through elpa

      Call the unfill-paragraph or the unfill-region functions.
      #+begin_src emacs-lisp
        ;; The unfill package (installed from elpa) provide the nice
        ;; "unfill-paragraph" command that basically does the opposite of the
        ;; fill-paragraph command. It is very smart and can even remove the command
        ;; characters when unfilling a paragraph of comments such as this one.
        (global-set-key (kbd "M-Q") 'unfill-paragraph)
      #+end_src
***** Scrollbars
      #+begin_src emacs-lisp
        ;; Disable vertical scroll-bars
        (scroll-bar-mode -1)
        ;; Disable horizontal scroll-bars
        ;;(horizontal-scroll-bar-mode -1)
      #+end_src
*** Undo-tree                                                         :UndoTree:
    A different behavior for undo and redo in Emacs.

    Note that because we are using this mode we cannot "redo" something by
    unduing the "undo" anymore as in regular Emacs. Use "M-_" to redo
    something.

    Use "C-x u" to visualize the undo three.
    In the undo-tree buffer use the following keybindings
    |-----------+-----------------------------------------|
    | C-b       | undo-tree-visualize-switch-branch-left  |
    | C-f       | undo-tree-visualize-switch-branch-right |
    | C-n       | undo-tree-visualize-redo                |
    | C-p       | undo-tree-visualize-undo                |
    | C-q       | undo-tree-visualizer-abort              |
    | ,         | undo-tree-visualizer-scroll-left        |
    | .         | undo-tree-visualizer-scroll-right       |
    | <         | undo-tree-visualizer-scroll-left        |
    | >         | undo-tree-visualizer-scroll-right       |
    | b         | undo-tree-visualize-switch-branch-left  |
    | d         | undo-tree-visualizer-toggle-diff        |
    | f         | undo-tree-visualize-switch-branch-right |
    | n         | undo-tree-visualize-redo                |
    | p         | undo-tree-visualize-undo                |
    | q         | undo-tree-visualizer-quit               |
    | s         | undo-tree-visualizer-selection-mode     |
    | t         | undo-tree-visualizer-toggle-timestamps  |
    | <down>    | undo-tree-visualize-redo                |
    | <left>    | undo-tree-visualize-switch-branch-left  |
    | <mouse-1> | undo-tree-visualizer-mouse-set          |
    | <next>    | scroll-up                               |
    | <prior>   | scroll-down                             |
    | <remap>   | Prefix Command                          |
    | <right>   | undo-tree-visualize-switch-branch-right |
    | <up>      | undo-tree-visualize-undo                |
    |-----------+-----------------------------------------|
    #+begin_src emacs-lisp
      ;; Enable the undo-tree mode if the undo-three library is installed.
      ;; Note that with undo-three mode activated we cannot "redo" something by
      ;; undoing the "undo" anymore as in regular Emacs. Use "M-_" to redo
      ;; something.
      (use-package undo-tree
        :ensure t
        :config
        (global-undo-tree-mode))
    #+end_src
*** Indent, tab width, fill-column                             :Indent:Tab:Fill:
    #+begin_src emacs-lisp
      ;; Set the standard indent
      (setq standard-indent 4)

      ;; Set default value for tab-width. Note that if the function setq is used
      ;; then the value will be set only for the local buffer. Therefore we need
      ;; to use setq-default.
      (setq-default tab-width 4)

      ;; Set default value for fill-column
      (setq-default fill-column 75)

      ;; make emacs use spaces by default instead of tabs
      (setq-default indent-tabs-mode nil)
    #+end_src

*** COMMENT Ido-mode                                                   :IdoMode:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Veja nesse site para aprender a usar melhor o Ido-mode
    http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/
***** Como Utilizar o Ido-mode
******* General-purpose Commands
| Keybinding  | Available In               | Description                                                                                                                                                                                                                                           |
|-------------+----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| C-b         | Buffers                    | Reverts to the old switch-buffer completion engine                                                                                                                                                                                                    |
| C-f         | Files                      | Reverts to the old find-file completion engine                                                                                                                                                                                                        |
| C-d         | Dirs / Files               | Opens a dired buffer in the current directory                                                                                                                                                                                                         |
| C-a         | Files / Buffers            | Toggles showing ignored files (see ido-ignore-files)                                                                                                                                                                                                  |
| C-c         | Dirs / Files / Buffers     | Toggles if searching of buffer and file names should ignore case. (see ido-case-fold)                                                                                                                                                                 |
| TAB         | Dirs / Files / Buffers     | Attempt to complete the input like the normal completing read functionality                                                                                                                                                                           |
| C-p         | Files                      | Toggles prefix matching; when it's on the input will only match the beginning of a filename instead of any part of it.                                                                                                                                |
| C-s / C-r   | All                        | Moves to the next and previous match, respectively                                                                                                                                                                                                    |
| C-t         | All                        | Toggles matching by Emacs regular expression.                                                                                                                                                                                                         |
| Backspace   | All (functionality varies) | Deletes characters as usual or goes up one directory if it makes sense to do so.                                                                                                                                                                      |
| C-SPC / C-@ | All                        | Restricts the completion list to anything that matches your current input. (Thanks to Joakim Hårsman for pointing it out)                                                                                                                             |
| //          | Files                      | Like most *nix shells two forward slashes in a path means "ignore the preceding path, and go back to the top-most directory". Works the same in Ido but it's more interactive: it will go to the root / (or the root of the current drive in Windows) |
| ~/          | Files / Dirs               | Jumps to the home directory. On Windows this would be typically be %USERPROFILE% or %HOME%, if it is defined.                                                                                                                                         |
| M-d         | Files                      | Searches for the input in all sub-directories to the directory you're in.                                                                                                                                                                             |
| C-k         | Files / Buffers            | Kills the currently focused buffer or deletes the file depending on the mode.                                                                                                                                                                         |
| M-m         | Files                      | Creates a new sub-directory to the directory you're in                                                                                                                                                                                                |

        OK, so you probably won't get in the habit of using all the commands;
        that's fine, but some are more important to remember than others,
        like: Backspace; C-s and C-r; // and ~/; and C-d.

        If Ido is getting in your way, remember the fallback commands: C-f for files; C-b for buffers.

******* Work Directory Commands

        Work directories are recently used directories that Ido caches so
        the files and directories in them can be quickly recalled. Work
        directory commands only function in find-file routines, but that
        goes without saying.

        You change the cached directory list by manipulating the variable
        ido-work-directory-list. If you’re tired of Ido caching slow,
        transient or generally unwanted directories you can add regular
        expressions to the list in ido-work-directory-list-ignore-regexps
        to keep Ido from caching them.

        Similarly, when you go to the next or previous work directory you
        can force Ido to disregard directories that do not match your
        current input. To change this behavior, set
        ido-work-directory-match-only.

        | Keybinding | Description                                                                  |
        |------------+------------------------------------------------------------------------------|
        | M-n / M-p  | Cycles through the next or previous work directories                         |
        | M-k        | Kills (removes) the active work directory from the list.                     |
        | M-s        | M-s forces ido to search the list of work directories for the current input. |

        *Using M-s is an excellent way to quickly scan recently used
        directories for files.* You do not have to explicitly type M-s as
        Ido will automagically start searching after a few seconds of idle
        time.

        You can change the work directory merge delay by modifying the
        ido-auto-merge-delay-time variable.
***** Configuração do Ido-mode
      #+begin_src emacs-lisp
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ;; Liga o ido-mode (usado quando vai abrir arquivos com o C-x C-f
        ;; Veja mais em http://www.emacswiki.org/cgi-bin/wiki/InteractivelyDoThings
        (ido-mode t)
        (setq ido-enable-flex-matching t) ; if the entered string does not match
                                          ; any item, any item containing the
                                          ; entered characters in the given
                                          ; sequence will match
        (ido-everywhere t)

        ;; Even if the buffer is opened in another frame, if I try two switch to it
        ;; I wand ido to switch in the same window as if the buffer were not
        ;; already opened in another frame.
        (setq ido-default-buffer-method 'selected-window)

        ;; Non-nil means that ido shall look for a filename at point.
        ;;(setq ido-use-filename-at-point 'guess)


        ;; If non-nil, refer to past buffers as well as existing ones.  Essentially
        ;; it works as follows: Say you are visiting a file and the buffer gets
        ;; cleaned up by midnight.el.  Later, you want to switch to that buffer,
        ;; but find it's no longer open.  With virtual buffers enabled, the buffer
        ;; name stays in the buffer list (using the `ido-virtual' face, and always
        ;; at the end), and if you select it, it opens the file back up again.
        (setq ido-use-virtual-buffers t)

        ;; You can customize the order in which files are sorted when Ido displays
        ;; them in the minibuffer. There are certain file extensions I use more
        ;; than others, so I tell Ido to emphasize those.
        (setq ido-file-extensions-order '(".org" ".txt" ".tex" ".py" ".emacs"))
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      #+end_src

*** COMMENT Ido-load-library                                           :IdoMode:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Load-library alternative using ido-completing-read.

    *Bugs*
    When invalidating the disk cache, `ido-load-library' only checks
    whether `load-path' has changed, not whether new files were added
    to existing paths.  Workarounds:
        1. Install libraries using ELPA/package.el, in which case this
           assumption always works.
        2. Wait for the cache to expire (7 days).
        3. *Give universal prefix argument to `ido-load-library'
           to force invalidation of the cache.*

    #+begin_src emacs-lisp
      ;; (require 'ido-load-library)
      (autoload 'ido-load-library "ido-load-library" nil t)
      (defalias 'load-library 'ido-load-library)
    #+end_src
*** COMMENT Imenu                                        :IdoMenu:Imenu:IdoMode:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Instead of using Imenu directly I set the M-i keybinding to helm-imenu.
***** Global Set Key
      #+begin_src emacs-lisp
        (global-set-key (kbd "M-i") 'imenu)
      #+end_src
***** COMMENT Integração com o Ido-mode                            :Keybindings:
      :PROPERTIES:
      :TANGlE:   no
      :END:
      Para isso uso o pacote idomenu.el
      #+begin_src emacs-lisp
        (autoload 'idomenu "idomenu" nil t)
        (global-set-key (kbd "M-i") 'idomenu)
      #+end_src
***** Integração com o Helm-mode                                      :HelmMode:
      Automático. Basta ativar o helm-mode que o imenu vai usar o helm-mode
      (desde que a integração com o Ido não esteja ativada).
*** COMMENT Smex (Ido-like completion for Commands)                       :Smex:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Usa uma interface similar ao Ido-mode para comandos com o M-x.

    Antigamente eu usava o próprio Ido com uma configuração que havia
    encontrado na internet, mas o Smex é feito baseado no IDO e serve
    exatamente para comandos. Ele oferece algumas vantagens como colocar
    comandos usados recentemente e mais usados no topo da lista, por
    exemplo.

    SE TIVER PROBLEMAS COM O SMEX, TENTE APAGAR O ARQUIVO ".smex-items" na
    sua home.

***** Como usar o Smex
      Use "M-x" para o Smex normal e "S-M-x" para restringir para comandos
      relacionados ao major mode.

      Com o Smex ativo use "C-h f" para ver o help da função ou "M-."
      (Alt+.) para ver a definição da função.
***** Configuração do Smex
      #+begin_src emacs-lisp
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ;; Smex is a M-x enhancement for Emacs. Built on top of IDO, it provides a
        ;; convenient interface to your recently and most frequently used
        ;; commands. And to all the other commands, too.
        (autoload 'smex "smex")
        (autoload 'smex-major-mode-commands "smex")
        (autoload 'smex-initialize "smex")

        ;; xxxxx M-x Call the smex command
        ; This code bounds M-x to a lambda function that calls smex-initialize in
        ; the first time it is used and then binds M-x to the smex command for
        ; subsequent calls
        (global-set-key [(meta x)] (lambda ()
                                     (interactive)
                                     (or (boundp 'smex-cache)
                                         (smex-initialize))
                                     (global-set-key [(meta x)] 'smex)
                                     (smex)))

        ;; S-M-x Call the smex-major-mode-commands command, which is like smex but
        ;; limited to commands that are relevant to the active major mode.
        (global-set-key [(shift meta x)] (lambda ()
                                           (interactive)
                                           (or (boundp 'smex-cache)
                                               (smex-initialize))
                                           (global-set-key [(shift meta x)] 'smex-major-mode-commands)
                                           (smex-major-mode-commands)))
        ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      #+end_src
*** Calendar and Diary                         :Hook:Calendar:Diary:Keybindings:
***** Brazilian holidays
      Here we set several variables storing the Brazilian holidays
      #+begin_src emacs-lisp
        (setq feriados-nacionais-fixos
              `((holiday-fixed 1 1 "Confraternização Mundial")
                (holiday-fixed 4 21 "Tiradentes")
                (holiday-fixed 5 1 "Dia do Trabalho")
                (holiday-fixed 9 7 "Independência do Brasil")
                (holiday-fixed 10 12 "Nossa Senhora Aparecida")
                (holiday-fixed 11 2 "Finados")
                (holiday-fixed 11 15 "Proclamação da República")
                (holiday-fixed 12 25 "Natal")))

        (setq feriados-nacionais-moveis
              `((holiday-easter-etc 0 "Páscoa")
                (holiday-easter-etc -47 "Carnaval")
                (holiday-easter-etc -2 "Sexta-feira Santa - Paixão de Cristo")
                (holiday-easter-etc 49 "Pentecostes")
                (holiday-easter-etc 56 "Domingo da Santíssima Trindade")
                (holiday-easter-etc 60 "Corpus Christi")))

        (setq feriados-estaduais-ce
              `((holiday-fixed 12 8 "Nossa Senhora da Conceição")))

        (setq feriados-estaduais-ac
              `((holiday-fixed 6 15 "Aniversário do Estado do Acre")
                (holiday-fixed 8 6 "Início da Revolução Acriana")
                (holiday-fixed 9 5 "Dia da Amazônia")
                (holiday-fixed 11 17 "Assinatura do Tratado de Petrópolis")))

        (setq feriados-estaduais-al
              `((holiday-fixed 6 24 "São João")
                (holiday-fixed 6 29 "São Pedro")
                (holiday-fixed 9 16 "Emancipação Política de Alagoas")
                (holiday-fixed 11 20 "Dia da Conciência Negra")))

        (setq feriados-estaduais-ap
              `((holiday-fixed 3 19 "São José")
                (holiday-fixed 10 5 "Criação do Estado do Amapá")
                (holiday-fixed 11 20 "Dia da Conciência Negra")))

        (setq feriados-estaduais-am
              `((holiday-fixed 9 5 "Elevação da Amazônia a Categoria de Província")
                (holiday-fixed 10 24 "Aniversário de Manaus")
                (holiday-fixed 12 8  "Nossa Senhora da Conceição")
                (holiday-fixed 11 20 "Dia da Conciência Negra")))

        (setq feriados-estaduais-ba
              `((holiday-fixed 7 2 "Independência da Bahia")))

        (setq feriados-estaduais-df
              `((holiday-fixed 4 21 "Fundação de Brasília")
                (holiday-fixed 11 30 "Dia do Evangélico")))

        (setq feriados-estaduais-es
              `((holiday-fixed 5 23 "Colonização do Solo Espírito-Santense")
                (holiday-fixed 10 28 "Dia do Servidor Público")))

        (setq feriados-estaduais-go
              `((holiday-fixed 7 26 "Fundação de Goiás")
                (holiday-fixed 10 28 "Dia do Servidor Público")))

        (setq feriados-estaduais-ma
              `((holiday-fixed 7 28 "Adesão do Maranhão à Independência do Brasil")
                (holiday-fixed 9 8  "Fundação de São Luís")
                (holiday-fixed 12 8 "Nossa Senhora da Conceição")))

        (setq feriados-estaduais-mt
              `((holiday-fixed 11 20 "Dia da Conciência Negra")))

        (setq feriados-estaduais-ms
              `((holiday-fixed 10 11 "Criação do Estado de MS")
                (holiday-fixed 11 20 "Dia da Conciência Negra")))

        (setq feriados-estaduais-pa
              `((holiday-fixed 8 15 "Adesão do Grão Pará à Independência do Brasil")
                (holiday-float 10 0 2 "Dia do Círio de Nazaré")
                (holiday-fixed 12 8 "Nossa Senhora da Conceição")))

        (setq feriados-estaduais-pb
              `((holiday-fixed 8 5 "Fundação do Estado da Paraíba")
                (holiday-fixed 7 26 "Memória do Ex-Presidente João Pessoa")))

        (setq feriados-estaduais-pr
              `((holiday-fixed 9 8 "Padroeira de Curitiba")
                (holiday-fixed 12 19 "Emancipação Política")))

        (setq feriados-estaduais-pe
              `((holiday-fixed 3 6 "Revolução Pernambucana")
                (holiday-fixed 6 24 "São João")))

        (setq feriados-estaduais-pi
              `((holiday-fixed 3 13 "Dia da Batalha de Jenipapo")
                (holiday-fixed 10 19 "Dia do Piauí")))

        (setq feriados-estaduais-rj
              `((holiday-fixed 1 20 "Dia de São Sebastião")
                (holiday-fixed 4 23 "Dia de São Jorge")
                (holiday-float 10 1 3 "Dia do Comércio")
                (holiday-fixed 10 28 "Dia do Funcionário Público")
                (holiday-fixed 11 20 "Dia da Conciência Negra")))

        (setq feriados-estaduais-rn
              `((holiday-fixed 1 6 "Dia de Reis")
                (holiday-fixed 6 29 "Dia de São Pedro")
                (holiday-fixed 10 3 "Mártires de Cunhaú e Uruaçu")
                (holiday-fixed 11 21 "Nossa Senhora da Apresentação")
                (holiday-fixed 12 25 "Aniversário de Natal")))

        (setq feriados-estaduais-rs
              `((holiday-fixed 2 2 "Nossa Senhora de Navegantes")
                (holiday-fixed 9 20 "Revolução Farropilha")))

        (setq feriados-estaduais-ro
              `((holiday-fixed 1 4 "Criação do Estado de Rondônia")))

        (setq feriados-estaduais-rr
              `((holiday-fixed 10 5 "Criação do Estado de Roraima")
                (holiday-fixed 12 8 "Nossa Senhora da Conceição")))

        (setq feriados-estaduais-sc
              `((holiday-fixed 8 11 "Criação da Capitania de SC")))

        (setq feriados-estaduais-sp
              `((holiday-fixed 7 9 "Revolução Constitucionalista de 1932")
                (holiday-fixed 11 20 "Dia da Conciência Negra")))

        (setq feriados-estaduais-se
              `((holiday-fixed 7 8 "Autonomia Política de Sergipe")))

        (setq feriados-estaduais-to
              `((holiday-fixed 10 5 "Criação do Estado de Tocantins")
                (holiday-fixed 3 18 "Autonomia do Estado de Tocantins")
                (holiday-fixed 9 8  "Nossa Senhora da Natividade")))
      #+end_src

***** General configurations for the calendar
      #+begin_src emacs-lisp
        (global-set-key "\C-cC" 'calendar)

        (defun my-calendar-configs ()
          ;; Here is some code to make your calendar and diary display fancier:
          (setq
                ;; calendar-view-diary-initially-flag t
                calendar-mark-diary-entries-flag t
                calendar-date-style 'european)

          ;; (add-hook 'diary-display-hook 'diary-fancy-display)
          (add-hook 'calendar-today-visible-hook 'calendar-mark-today)

          ;; Change the calendar days to Portuguese
          (setq
                calendar-day-name-array
                ["Domingo" "Segunda" "Terça"
                "Quarta" "Quinta" "Sexta" "Sábado"]
                calendar-month-name-array
                ["Janeiro" "Fevereiro" "Março" "Abril"
                "Maio" "Junho" "Julho" "Agosto" "Setembro"
                "Outubro" "Novembro" "Dezembro"])

          (setq calendar-holidays
              (append feriados-nacionais-fixos
                      feriados-nacionais-moveis
                      feriados-estaduais-ce))
          )

        (defun diary-countdown (m1 d1 y1 n)
          "Reminder during the previous n days to the date.
            Order of parameters is M1, D1, Y1, N if
            `european-calendar-style' is nil, and D1, M1, Y1, N otherwise."
          (diary-remind '(diary-date m1 d1 y1) (let (value) (dotimes (number n value) (setq value (cons number value))))))

        ;; Some configurations in planner change the calendar, therefore we require
        ;; planner when calendar is called.  (add-hook 'calendar-load-hook (require
        ;; 'planner))
        (my-calendar-configs)
      #+end_src
***** Latitude and Longitude (sunrise and sunset times)
      Set the lagitude and longitude of the city of Fortaleza.

      With this emacs can display the local times of sunrise and sunset in
      the echo area with the sunrise-sunset function.

      You can also type "S" (capital s) in an Org-mode agenda buffer.
      #+begin_src emacs-lisp
        (setq calendar-latitude -3.72)
        (setq calendar-longitude -38.53)
        (setq calendar-location-name "Fortaleza, CE-Brazil")
      #+end_src
*** regex-tool
    Apenas rode o comando regex-tool
    #+begin_src emacs-lisp
      ;; regex-tool is an Emacs package to help creating regular expressions
      (autoload 'regex-tool "regex-tool" "Carrega o regex-tool." t)
    #+end_src
*** Ibuffer                                                       :Hook:Ibuffer:
    #+begin_src emacs-lisp
      (autoload 'ibuffer "ibuffer" nil t)
      (add-hook 'ibuffer-mode-hook
                (lambda ()
                  ;; (ibuffer-switch-to-saved-filter-groups "default")
                  (local-set-key "/F" 'ibuffer-set-filter-groups-by-mode)
                  (ibuffer-set-filter-groups-by-mode)
                  ))
    #+end_src
*** Rainbow-mode                                                   :RainbowMode:
    Criado por Julien Danjou, o rainbow-mode muda a cor de background de
    cores tipo #FF1493 para a cor correspondente. Esperimente ativar aqui
    para ver o resultado.
    #+begin_src emacs-lisp
      (autoload 'rainbow-mode "rainbow-mode" nil t)
    #+end_src
*** Uniquify -> Make buffer names unique                              :Uniquify:
    #+begin_src emacs-lisp
      ;; uniquify comes with Emacs
      (setq uniquify-buffer-name-style 'forward)
    #+end_src
*** Highlight-symbol                                           :HighlightSymbol:
    Add "(highlight-symbol-mode)" to activate highlight-symbol minor mode
    to whatever major mode hook you want.

    Ex: Add it to c-mode-common-hook, LaTeX-mode-hook or python-mode-hook.

    Note: Highlight-symbol is great in combination with iedit-mode. Use
    "C-;" in a symbol to enable iedit-mode.

    Here we only set the keybindings for highlight-symbol-next and
    highlight-symbol-prev.
    #+begin_src emacs-lisp
      ;; Iedit is auto-loaded and this isn't really necessary. However, it will
      ;; only set the keybinding "C-;" after it is loaded. Therefore, I load the
      ;; library here to make the keybinding usable after just starting
      ;; Emacs. Probably only a global-set-key would be a better solution.
      (use-package iedit
        :ensure t
        )
    #+end_src

*** Save backup files (files endind with ~) to specific directory       :Backup:
    Save the backup files to a 'backups' folder, instead of saving in the
    same folder the original file is.

    Note that the file names in thebackups directory will be the full name
    of the file backed up with all directory separators changed to `!' to
    prevent clashes
    #+begin_src emacs-lisp
      (setq backup-directory-alist
            `(("." . ,(expand-file-name
                       (concat user-emacs-directory "backups")))))
    #+end_src
*** git-gutter                                                       :GitGutter:
    https://github.com/syohex/emacs-git-gutter

    #+begin_src emacs-lisp
      (use-package git-gutter
        :ensure t
        :config
        (global-git-gutter-mode +1)
        ;; The default is " GitGutter", but I don't want to waste
        ;; space in the modeline with that
        (setq git-gutter:lighter ""))
    #+end_src

    - Keybindings you may want to set:
      (global-set-key (kbd "C-x C-g") 'git-gutter:toggle)
      (global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)

      ;; Jump to next/previous hunk
      (global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
      (global-set-key (kbd "C-x n") 'git-gutter:next-hunk)

      ;; Stage current hunk
      (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)

      ;; Revert current hunk
      (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)

*** comment-dwim-2                                                 :Keybindings:
    https://github.com/remyferre/comment-dwim-2

    Install the package through ELPA.
    It will replace the Emacs standard comment-dwim
    #+begin_src emacs-lisp
      ;; The comment-dwim-2 package will replace the Emacs standard comment-dwim
      ;; function
      (use-package comment-dwim-2
        :ensure t
        :config
        (global-set-key (kbd "M-;") 'comment-dwim-2)
        (setq comment-dwim-2--inline-comment-behavior 'reindent-comment))
    #+end_src
*** Remap Keypad keys "Home, End, etc" as the regular "Home, End, etc" keys
    #+begin_src emacs-lisp
      ;; Remap Keypad keys "Home, End, etc" as the regular "Home, End, etc" keys
      ;; See http://lists.gnu.org/archive/html/help-emacs-windows/2001-11/msg00090.html
      (define-key function-key-map [C-kp-home] [?\M-<])
      (define-key function-key-map [C-kp-end] [?\M->])
      
      (define-key function-key-map [C-kp-next] [C-next])
      (define-key function-key-map [C-kp-prior] [C-prior])
      (define-key function-key-map [C-kp-delete] [C-delete])
    #+end_src
*** Ace-Jump-Mode                                                      :AceJump:
    : What's this?
    :   It is a minor mode for Emacs. It can help you to move your cursor
    :   to ANY position in emacs by using only 3 times key press.
    
    Call ace-jump with "C-c SPC". Remember You can also call it with 'C-u'
    or 'C-u C-u' to change how it works.

    #+begin_src emacs-lisp
      (use-package ace-jump-mode
        :ensure t
        :bind ("C-x SPC" . ace-jump-mode)
        )
    #+end_src

*** Ace-Window                                                       :AceWindow:
    Similar to ace-jump-mode, but for switching to tifferent windows.
    #+begin_src emacs-lisp
      (use-package ace-window-display-mode
        :ensure ace-window
        :bind ("C-x o" . ace-window)
        :config
        ;; The default scope in ace-window is "global", which allow change to
        ;; windows in other frames. I preffer to keep ace-window restricted to the
        ;; current frame.
        (setq aw-scope 'frame)
        )
    #+end_src

*** COMMENT Ace-isearch                                             :AceIsearch:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Note that because we set ace-isearch-use-ace-jump to nil then the only
    thing that ace-isearch does is passing control from isearch to
    helm-swoop when we search for something with 6 or more characters.

    REMEMBER you can always use "M-i" from isearch to pass control to
    helm-swoop without needing ace-isearch.

    #+BEGIN_SRC emacs-lisp
      (use-package ace-isearch
        :config
        (global-ace-isearch-mode +1)

        ;; Set to nil to not use ace-jump when I search for a single character. I
        ;; prefer to use ace-jump only when I use the specific keybinding for it.
        (setq ace-isearch-use-ace-jump nil)  
        )
    #+END_SRC
*** Anzu Mode                                                             :Anzu:
    Anzu is a minor mode which displays 'current match/total matches' in
    the mode-line in various search modes.

    #+begin_src emacs-lisp
      (use-package anzu
        :ensure t
        :config
        ;; Enable anzu-mode globally. It will show number of matches during an
        ;; isearch.
        (global-anzu-mode +1)

        ;; Set the lighter to an empty string, since I don't want it to clutter the
        ;; mode-line
        (setq anzu-mode-lighter "")

        )
    #+end_src
*** Expand Region
    Install expand-region from elpa
    #+begin_src emacs-lisp
      (use-package expand-region
        :ensure t
        :bind
        ;; Set the global keybinding "C-=" for expand-region.
        ("C-=" . er/expand-region)
        )
    #+end_src
*** Pretty page break
    Display those "^L" page breaks as horizontal lines.

    It uses this package
    https://github.com/purcell/page-break-lines


    See this nice blog post
    http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/#more-729

    TIPS:
    - Use "C-q C-l" to add a page preab
    - Use "C-x C-p" to select the current page
    - Use "C-x [" or "C-x ]" to move from pages

      Try other pages that use pages, such as *helm-pages*.

      Note the page break in the line below

    #+begin_src emacs-lisp
      (use-package page-break-lines
        :ensure t
        :config
        (global-page-break-lines-mode t)
        (global-set-key (kbd "<s-prior>") 'backward-page) ;; win+PageUp
        (global-set-key (kbd "<s-next>") 'forward-page)   ;; win+PageDown
        (global-set-key (kbd "<s-up>") 'backward-page)    ;; win+Up Arrow
        (global-set-key (kbd "<s-down>") 'forward-page)   ;; win+Down Arrow
        (add-to-list 'page-break-lines-modes 'c++-mode)
        (add-to-list 'page-break-lines-modes 'python-mode)
        )
    #+end_src

    Note the page break in the line below

    Note the page break in the line above

*** Firestarter                                                    :Firestarter:
    This global minor mode allows you to run (shell) commands on save.
    #+begin_src emacs-lisp
      (use-package firestarter
      :ensure t
      :config
      (firestarter-mode))
    #+end_src
*** Unicode Symbols                                                    :Unicode:
    I tried first the unicode-fonts package. Theorectically all I should
    need to do is adding the two lines below to my initialization.
    : (require 'unicode-fonts)
    : (unicode-fonts-setup)
    However, this makes initialization VERY slow. Supposelly there should
    be a chaching mechanism to avoid this but for fome reason it did't
    work.

    Instead, now I'm just setting the falback font individually for any
    character I'm interested in. See this link below for explanations
    http://stackoverflow.com/questions/10906621/emacs-font-setup-for-displaying-unicode-characters-in-osx

    #+begin_src emacs-lisp
      ;; Set the Quivira font as a fallback to type the unicode 🔥 character
      ;; (U+1F525)
      (set-fontset-font t nil (font-spec :family "Quivira"))
      ;;(set-fontset-font t '(#x1f525 . #x1f525) (font-spec :family "Quivira"))

      ;;(set-fontset-font t nil (font-spec :family "Symbola"))

      ;; Use the symbola font for the snake unicode character
      (set-fontset-font t '(#x1f40d . #x1f40d) (font-spec :family "Symbola"))
    #+end_src

    TIP: TO see installed fonts use
    (http://ergoemacs.org/emacs/emacs_list_and_set_font.html)
    : (print (font-family-list))
    or better yet
    : ;; returns true if Symbola exists
    : (member "Symbola" (font-family-list))


    TIP2: You can see unicode characters (and which fonts suport them) in
    http://unicode-table.com/en/#control-character
    and 
    http://www.fileformat.info/info/unicode/char/1f525/index.htm

* Which-key                                                           :WhichKey:
  Emacs package that displays available keybindings in popup.

  An alternative package to this one is "guide-key".
  
  #+begin_src emacs-lisp
    (use-package which-key
      :ensure t
      :diminish which-key-mode
      :config
      (which-key-mode))
  #+end_src
* Discover Major mode keybindings                            :DiscoverMajorMode:
  The "discover-my-major" package provides the provides a great way to
  discover keybindings for the current major mode. Just use the "C-h C-m"
  keybinding that is set below in any major mode.
  #+begin_src emacs-lisp
    (use-package discover-my-major
      :ensure t
      :bind
      ;; Discover Major mode keybindings with 'discover-my-major'
      ("C-h C-m" . discover-my-major)
      )
  #+end_src
* Multiple-Cursors                                             :MultipleCursors:
    First mark the word, then add more cursors.

    More tips in
    https://github.com/emacsmirror/multiple-cursors

    #+begin_src emacs-lisp
      ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ;; xxxxxxxxxxxxxxx Multiple Cursors xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    #+end_src

*** COMMENT Load the package
    :PROPERTIES:
    :TANGlE:   no
    :END:
    This is not required because the functions in the multiple-cursors
    library are auto-loaded.
    #+begin_src emacs-lisp
      (require 'multiple-cursors)
    #+end_src
*** Global Keybindings                                             :Keybindings:
    #+begin_src emacs-lisp
      (use-package multiple-cursors
        :ensure t
        :bind
        ("C-S-c C-S-c" . mc/edit-lines)
        ("C-S-c C-S-l" . mc/mark-all-like-this)
        ("C->" . mc/mark-next-like-this)
        ("C-<" . mc/mark-previous-like-this)
        )
    #+end_src
*** Ace-Multiple-Cursors
    Install the ace-mc package through elpa
    
    If you have ace-jump bound on C-0, for example, I recommend the
    following key bindings:

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-)") 'ace-mc-add-multiple-cursors)
      (global-set-key (kbd "C-M-)") 'ace-mc-add-single-cursor)
    #+end_src
* Darlan Functions                                            :Darlan:Functions:
  Dica: ative o eldoc-mode se tentar programar em lisp
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Darlan Functions xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Set highlight symbol keybindings
    #+begin_src emacs-lisp
      (defun darlan/set-highlight-symbol-key-bindings ()
        "Set the key-bindings for the highlight-symbol minor mode."
        (interactive)
        (local-set-key "\M-n" 'highlight-symbol-next)
        (local-set-key "\M-p" 'highlight-symbol-prev)
        (local-set-key "\M-N" 'highlight-symbol-next-in-defun)
        (local-set-key "\M-P" 'highlight-symbol-prev-in-defun)
        )
    #+end_src
*** Open the gtd.org file
    #+begin_src emacs-lisp
      (defun gtd ()
        "Load the latest version of Org-mode and then find the file gtd.org"
        (interactive)
        (find-file "~/Muse/org/gtd.org")
        )
    #+end_src
*** COMMENT Reopen a buffer as root prompting for password if necessary :Keybindings:
    :PROPERTIES:
    :TANGLE:   no
    :END:
    #+begin_src emacs-lisp
      (defun find-alternative-file-with-sudo ()
        "Open current buffer as root!"
        (interactive)
        (when buffer-file-name
          (find-alternate-file
           (concat "/sudo:root@localhost:"
                   buffer-file-name))))
      (global-set-key (kbd "C-c C-r") 'find-alternative-file-with-sudo)
    #+end_src

*** Occur no dired mode                                            :Dired:Occur:
    #+begin_src emacs-lisp
      ;; Pegue em http://groups.google.com/group/gnu.emacs.help/browse_thread/thread/7c86cc6acb816005?pli=1
      (defun my-dired-multi-occur (string)
        "Search string in files marked by dired."
        (interactive "MList lines matching regexp: ")
        (require 'dired)
        (multi-occur (mapcar 'find-file (dired-get-marked-files)) string))
    #+end_src
*** fill-with-comment
    #+begin_src emacs-lisp
      (defun fill-with-comment(&optional character)
        "Insert as many comment characters as necessary to go untill
      fill-column."
        (interactive)
        (when (null character)
          (setq character "x"))
        (let (current beginning)
          (delete-horizontal-space)
          (setq current (point))
          (beginning-of-line)
          (setq beginning (point))
          (goto-char current)

          (setq number (- fill-column (- current beginning)))

          (if (not (= current beginning))
              (progn
                (insert " ")
                (setq number (- number 1)))
            )
          (setq character (string-to-char character))
          (insert-char character number )
          )
        )
    #+end_src

*** String to Ascii region
    #+begin_src emacs-lisp
      ;; (require 's)

      (use-package s
        :ensure t
        :config
        ;; The s-replace-all function is define in the "s" library (yes, the
        ;; library name is just 's').
        (defun darlan/string-to-ascii (string)
          "Change a string containing unicode characters to the
        equivalent ascii string. Note that not all characters are
        replaced, only the ones I usually don't want."
          (s-replace-all
           '(
             ("“" . "\"")
             ("”" . "\"")
             ("→" . "->")
             ("–" . "-")
             ("—" . "-")
             ("…" . "...")
             ("’" . "'")
             ("‘" . "'")
             )
           string)
          )

        (defun darlan/string-to-ascii-region (beg end)
          "Change the selected text containing unicode characters to the
        equivalent text in ascii. Note that not all characters are
        replaced, only the ones I usually don't want."
          (interactive "r")
          (let (replacement)
            (save-restriction
              (narrow-to-region beg end)
              (save-excursion
                (setq replacement (darlan/string-to-ascii (buffer-substring beg end)))
                (delete-region beg end)
                (goto-char beg)
                (insert replacement)))))
        )
    #+end_src
*** Surround a region with some character
    #+begin_src emacs-lisp
      (defun darlan/surround-region (beg end leftPart rightPart)
        "Surround a region with the content of the leftPart and
      rightPart variables."
        (interactive "r")
        (save-restriction
          (narrow-to-region beg end)
          (goto-char (point-min))
          (insert leftPart)
          (goto-char (point-max))
          (insert rightPart)))

      (defun darlan/org-surround-inline-math (beg end)
        "Surround a region with single dollar signs"
        (interactive "r")
        (darlan/surround-region beg end "$" "$"))

      (defun darlan/surround-region-dowim (leftPart rightPart)
        "Surround a region with the content of the leftPart and
      rightPart variables. If the region is not active, the region
      between the current point and the point given by forward-word
      will be used."
        (interactive)
        (let (beg end)
          (if (and transient-mark-mode
                   mark-active)
              ;; Region active code
              (progn (setq beg (region-beginning) end (region-end))
                     (darlan/surround-region beg end leftPart rightPart)
                     )
            ;; Region inactive code: beg = current point, end = end of the word
            (progn
              (setq beg (point))
              (forward-word)
              (setq end (point))
              (darlan/surround-region beg end leftPart rightPart)
              )
            )
          )
        )

      (defun darlan/surround-with-command ()
        "Usefull to surround a region with a command (in MATLAB shell
      buffers, for instance). If the command if not provided it will be
      asked in the minibuffer."
        (interactive)
        (let (command rightPart leftPart)
          (setq command (read-from-minibuffer "Command Name: "))
          (setq leftPart (concat command "("))
          (setq rightPart ")")
          (darlan/surround-region-dowim leftPart rightPart)
          )
        )
    #+end_src
*** browse-doi-url
    #+begin_src emacs-lisp
      ;; Open the url corresponding to the specified DOI number in the browser
      (defun browse-doi-url (url)
        "Open the url corresponding to the specified DOI number in the browser"
        (interactive "sDoi Number: ")
        (browse-url (concat "http://dx.doi.org/" url)))
    #+end_src

*** Toggle a window as a "dedicated window"
    #+begin_src emacs-lisp
      (defun toggle-current-window-dedication ()
        (interactive)
        (let* ((window    (selected-window))
               (dedicated (window-dedicated-p window)))
          (set-window-dedicated-p window (not dedicated))
          (message "Window %sdedicated to %s"
                   (if dedicated "no longer " "")
                   (buffer-name))))
    #+end_src

*** Time functions (get current year, month, etc)
***** replace-nth-element
      #+begin_src emacs-lisp
        (defun replace-nth-element (lista index valor)
          "Replace the elemented pointed by 'index' in the list 'lista'
        with the value of 'value'"
          (replace lista (list valor) :start1 index)
          )
      #+end_src
***** get-current-year, get-current-month and related functions
      Essas funções são usadas para o template de finanças no org-mode,
      onde crio headlines como "Junho 2011" para as finanças de junho de
      2011, por exemplo.

      #+begin_src emacs-lisp
        (defun get-current-year()
          (interactive)
          (format-time-string "%Y" (current-time))
          )

        (defun get-current-month()
          (interactive)
          (capitalize (format-time-string "%B" (current-time)))
          )

        (defun get-me-an-org-id-for-the-month (categoryName)
          "Used only in my template for the finances of the month. It
        return a suitable ID for the month sub-headline."
          (interactive)
          (concat (get-current-month) (get-current-year) categoryName)
          )

        (defun get-today-org-time-stamp ()
          "Insert a time-stamp for today in the same format org-mode uses
        for inactive timestamps."
          (interactive)
          (format-time-string "[%Y-%m-%d %a]" (current-time))
          )
      #+end_src

***** get-previous-month and get-previous-month-year
      #+begin_src emacs-lisp
        (defun get-previous-month()
          (interactive)
          (capitalize (format-time-string "%B"
        ;; decode-time retorna uma lista especificando a data/hora atual na forma
        ;; (SEC MINUTE HOUR DAY MONTH YEAR DOW DST ZONE). Depois substituo o dia
        ;; por 0. Com isso ao aplicar encode-time e em seguida format-time-string
        ;; eu vou pegar o mês anterior ao invés do mez atual (funciona até mesmo
        ;; para janeiro).
                                          (apply 'encode-time ( replace-nth-element (decode-time) 3 0))
                                          ))
          )

        (defun get-previous-month-year()
          "Get the year of the previous month. This will be equal to the current yar except when we are in january"
          (interactive)
          (capitalize (format-time-string "%Y"
        ;; decode-time retorna uma lista especificando a data/hora atual na forma
        ;; (SEC MINUTE HOUR DAY MONTH YEAR DOW DST ZONE). Depois substituo o dia
        ;; por 0. Com isso ao aplicar encode-time e em seguida format-time-string
        ;; eu vou pegar o ano do mês anterior (igual ao ano atual, exceto se
        ;; estivermos em janeiro, quando ele retorna o ano anterior)
                                          (apply 'encode-time ( replace-nth-element (decode-time) 3 0))
                                          ))
          )
      #+end_src

*** Allow you to use M-up and M-down to move a line up or down     :Keybindings:
    #+begin_src emacs-lisp
      (global-set-key [(meta up)] 'move-text-up)
      (global-set-key [(meta down)] 'move-text-down)
    #+end_src
*** Browse Directory / Open Gnome terminal / Ver PDF / Abrir no LibreOffice
***** Browse Directory
      #+begin_src emacs-lisp
        (defun browse-dir (dir-as-string)
          (start-process-shell-command
           "browse"
           "*scratch*"
           (concat "/usr/bin/nautilus --no-desktop " (concat "\"" (expand-file-name dir-as-string) "\""))))

        ;; Use essa para abrir links sftp com o nautilus, como sftp://darlan@ssh.gtel.ufc.br/home/gtels0/projetos/ufc32
        (defun browse-dir-sftp (dir-as-string)
          (start-process-shell-command
           "browse"
           "*scratch*"
           (concat "/usr/bin/nautilus --no-desktop " dir-as-string)))

        (defun browse-default-dir ()
          "Open Nautilus in the default directory, which is the directory
              of the file associated with the current buffer."
          (interactive)
          (browse-dir default-directory))

        (defun browse-default-dir-in-emacs ()
          "Open the default directory in emacs with dired, which is the
              directory of the file associated with the current buffer."
          (interactive)
          (dired default-directory))
      #+end_src
***** Open Gnome Terminal
      #+begin_src emacs-lisp
        (defun gnome-terminal-dir (dir-as-string)
          (start-process-shell-command
           "browse"
           "*scratch*"
           (concat "/usr/bin/gnome-terminal " (concat "\"" (expand-file-name dir-as-string) "\""))))

        (defun gnome-terminal-default-dir ()
          "Open gnome-terminal in the default directory, which is the
              directory of the file associated with the current buffer."
          (interactive)
          (gnome-terminal-dir default-directory))
      #+end_src
***** Ver PDF
      #+begin_src emacs-lisp
        (defun ver-pdf-no-evince (pdf)
          (start-process-shell-command
           "evince"
           "*scratch*"
           (concat "evince " pdf)))


        (defun ver-pdf-no-acroread (pdf)
          (start-process-shell-command
           "acroread"
           "*scratch*"
           (concat "acroread " pdf)))

        ;; You need to have a script called pdfxchange
        (defun ver-pdf-no-pdfxchange (pdf)
          (start-process-shell-command
           "pdfxchange"
           "*scratch*"
           (concat "pdfxchange " pdf)))
      #+end_src
***** Abrir no OpenOffice
      #+begin_src emacs-lisp
        (defun abrir-no-openoffice (documento)
          (start-process-shell-command
           "openoffice"
           "*scratch*"
           (concat "libreoffice.org -o " "\"" documento "\"")))
      #+end_src
***** Ver vídeo
      #+begin_src emacs-lisp
        (defun ver-arquivo-de-video (video-file)
          (start-process-shell-command
           "vlc"
           "*scratch*"
           (concat "vlc " (surround-with-quotes video-file)))
          )

        (defun surround-with-quotes (filename)
          "Surround a given filename with quotes. This is useful to pass that file name to functions to be executed in the shell, since we would have to scape some characters otherwise."
          (message (concat "\"" filename "\""))
          )
      #+end_src
*** Run shell command from given folder
    #+begin_src emacs-lisp
      (defun run-shell-command-from-folder (command folder)
        "Run a given command from the specified folder."
        (interactive)
        ;; (let (var1)
        ;;   (setq var1 some)

        ;;   )
        (start-process-shell-command
         command
         "*scratch*"
         ;; (concat "/usr/bin/nautilus --no-desktop " (concat "\"" (expand-file-name dir-as-string) "\""))
         (concat "cd " (expand-file-name folder) " && " command)
         )
        )
    #+end_src
*** Test if a buffer exists
    #+begin_src emacs-lisp
      ;; Define a function to easily test if a given buffer exists
      ;; Pegue em http://stackoverflow.com/questions/586735/how-can-i-check-if-a-current-buffer-exists-in-emacs
      (defun buffer-exists (bufname)
        (not
         (eq nil (get-buffer bufname))
         )
        )
    #+end_src
*** Dictionaries / Synonyms / Wikipedia
***** Dictionary
******* lookup-word-definition
        #+begin_src emacs-lisp
          ;; Dicionário do babylon
          ;; http://online.babylon.com/cgi-bin/trans.cgi?layout=uol.txt&lang=ptg&word=WORD
          ;; MUDE A FUNÇÃO PARA QUE SE FORNECER UM ARGUMENTO ELE USE O DICIONÁRIO DO BABYLON

          ;; The functions lookup-word-definition and lookup-wikipedia were copied from
          ;; http://xahlee.org/emacs/emacs_lookup_ref.html
          (defun lookup-word-definition ()
            "Look up the current word's definition in a browser.
                If a region is active (a phrase), lookup that phrase."
            (interactive)
            ;; I want to use w3m as the browser to look-up definition but not set it to default browser
            (let (myword myurl (browse-url-browser-function 'w3m-browse-url))
              (setq myword
                    (if (and transient-mark-mode mark-active)
                        (buffer-substring-no-properties (region-beginning) (region-end))
                      (thing-at-point 'symbol)))

              (setq myword (replace-regexp-in-string " " "%20" myword))
              ;; (setq myurl (concat "http://dictionary.cambridge.org/results.asp?searchword=" myword))
              (setq myurl (concat "http://online.babylon.com/cgi-bin/trans.cgi?layout=uol.txt&lang=ptg&word=" myword))
              (browse-url myurl)
              ;; (w3m-browse-url myurl) ;; if you have w3m and w3 installed
              ;; (shell-command (concat "open -a opera " myurl))
              ;; use diff browser in OSX

              ;; alternative ref site url
              ;; http://en.wiktionary.org/wiki/
              ;; http://dictionary.reference.com/browse/
              ))
        #+end_src

******* Outros dicionários que vc pode usar
        Here are some other online dictionary sites and their url search
        syntax, using sample word “curlicue”. AHD means American Heritage
        Dictionary.
        - http://education.yahoo.com/reference/dictionary/entry/curlicue (AHD)
        - http://www.answers.com/main/ntquery?s=curlicue (AHD)
        - http://en.wiktionary.org/wiki/curlicue (wiktionary)
        - http://m-w.com/dictionary/curlicue (Merriam Webster)
        - http://www.askoxford.com/concise_oed/curlicue (Compact Oxford Eng Dict )
        - http://www.yourdictionary.com/curlicue
        - http://dictionary.reference.com/browse/curlicue (AHD, Random House, WordNet, ...)
        - http://www.dict.org/bin/Dict?Form=Dict2&Database=*&Query=curlicue (OpenSource Dicts)

***** Wikipedia
      #+begin_src emacs-lisp
        (defun lookup-wikipedia ()
          "Look up the word's in Wikipedia.
              This command generates a url for Wikipedia.com and switches you
              to browser. If a region is active (a phrase), lookup that
              phrase."
          (interactive)
          (let (myword myurl)
            (setq myword
                  (if (and transient-mark-mode mark-active)
                      (buffer-substring-no-properties (region-beginning) (region-end))
                    (thing-at-point 'symbol)))

            (setq myword (replace-regexp-in-string " " "_" myword))
            (setq myurl (concat "http://en.wikipedia.org/wiki/" myword))
            (browse-url myurl)
            ))
      #+end_src
***** Synonyms (Lookup in a browser)                        :Thesaurus:Synonyms:
      #+begin_src emacs-lisp
        (defun lookup-synonym ()
          "Look up the current word's synonyms in a browser.
        If a region is active (a phrase), lookup that phrase."
          (interactive)
          (let (myword myurl)
            (setq myword
                  (if (and transient-mark-mode mark-active)
                      (buffer-substring-no-properties (region-beginning) (region-end))
                    (thing-at-point 'symbol)))

            (setq myword (replace-regexp-in-string " " "_" myword))
            (setq myurl (concat "http://thesaurus.reference.com/browse/" myword))
            (browse-url myurl)
            ))
      #+end_src

***** Synonyms (replace word at point)                      :Thesaurus:Synonyms:
      Uses the Big Huge Thesaurus with the library thesaurus.el.
      #+begin_src emacs-lisp
        (use-package thesaurus
          :ensure t
          :config
          (setq thesaurus-bhl-api-key "bee6a6896699156461b1dc5e18f5d39d"))
      #+end_src
*** Check system type (Linux or Windows
    #+begin_src emacs-lisp
      ;; Check if system is GNU/Linux
      (defun system-type-is-linux ()
        (interactive)
        "Return true if system"
        (string-equal system-type "gnu/linux")
        )

      ;; Check if system is Windows
      (defun system-type-is-XP ()
        (interactive)
        "Return true if system"
        (string-equal system-type "windows-nt")
        )
    #+end_src
*** whitespace <-> Underline
    #+begin_src emacs-lisp
      (defun darlan/change-to-space (arg)
        "Remove underline e substitui por um espaço"
        (replace-regexp-in-string "_" " " arg))

      (defun darlan/change-to-underline (arg)
        "Remove um espaço e substitui por um underline"
        (replace-regexp-in-string " " "_" arg))

      (defun darlan/change-to-label (start end)
        "Remove os espaços e muda para lower case. Isso é útil para transformar um caption de uma figura em algo útil para o label dela, por exemplo"
        (interactive "r")
        (save-excursion
          (save-restriction
            (narrow-to-region start end)
            (goto-char (point-min))
            (while (search-forward " " nil t) (replace-match "_" nil t))

            ;; Ate aqui já substituiu espaços por underlines. Agora vamos colocar em lowercase
            (let ((label (downcase (buffer-substring-no-properties start end))))
              (delete-region start end)
              (goto-char (point-min))
              (insert label)
              )
            )
          )
        )
    #+end_src
*** Get user name and e-mail address
    #+begin_src emacs-lisp
      (defun darlan/get-user-name-and-email ()
        "Get the user full name and e-mail address from the variables
      'user-full-name' and 'user-mail-address'. This is useful for
      yasnippets. You can use this function in your snippets and if you
      need to change the email address for a project, for example, just
      change the variable 'user-mail-address' in a file variable or a
      directory variable, instead of changing the snippets."
        (interactive)
        (concat user-full-name " <" user-mail-address ">")
        )
    #+end_src
*** Find duplicated words in a buffer
   #+begin_src emacs-lisp
     (defun darlan/find-duplicated-words ()
       "Search forward for for a duplicated word."
       (interactive)
       (message "Searching for for duplicated words ...")
       (push-mark)
       ;; This regexp is not perfect
       ;; but is fairly good over all:
       (if (re-search-forward
            "\\b\\([^@ \n\t]+\\)[ \n\t]+\\1\\b" nil 'move)
           (message "Found duplicated word.")
         (message "End of buffer")))

     ;; ;; Bind `the-the' to  C-c \
     ;; (global-set-key "\C-c\\" 'the-the)
   #+end_src
*** Autoremote                                               :Tasker:Autoremote:
    #+begin_src emacs-lisp
      ;; This will read the file "my-autoremote-key.el.gpg", which define the
      ;; variable 'my-cellphone-autoremote-key' and set my autoremote key (a
      ;; string) to it.
      ;;
      ;; Note that I have disabled reading gpg files during emacs initialization
      ;; to increese initialization time. Thus, we run this in after-init-hook
      (add-hook 'after-init-hook
                '(lambda ()
                   (load-file "~/.emacs.d/my-autoremote-key.el.gpg")
                   ))

      ;; org-link-escape is used to "urlify" the message
      ;; url-retrieve-synchronously is used to send the autoremote request
      (defun darlan/send-region-to-moto-x-cellphone-clipboard (start end)
        "Send text to Moto X clipboard through Autoremote"
        (interactive "r")
        (let (mensagem)
          (if (and transient-mark-mode
                   mark-active)
              (progn (setq start (region-beginning) end (region-end))
                     (setq mensagem (buffer-substring start end))
                     )
            (setq mensagem (read-from-minibuffer "Texto para enviar: "))
            )
          (url-retrieve-synchronously
           (concat (concat "http://autoremotejoaomgcd.appspot.com/sendmessage?key=" my-cellphone-autoremote-key "&message=copy=:=" mensagem) "&ttl=30")
          )))
    #+end_src
*** Helper functions used in some yasnippets snippets
    #+begin_src emacs-lisp
      ;; This method is used in the 'comment' yasnippets template
      (defun darlan/insert-comment-block-start ()
        "Insert the correct comment start string for a block comment.
      This method is used in the 'comment' yasnippets template."
        (interactive)
        (if (equal ";" comment-start)
            ;; For emacs-lisp mode, we want two ';' symbols.
            (insert ";;")
          ;; For all the other major modes, the line below inserts the correct
          ;; comment-start.
          (insert (string-utils-trim-whitespace comment-start))
          )
        )

      ;; This method is used in the 'comment' yasnippets template
      (defun darlan/insert-comment-block-end ()
        "Insert the correct comment end string for a block comment.
      This method is used in the 'comment' yasnippets template."
        (interactive)
        (insert (string-utils-trim-whitespace comment-end))
        )
    #+end_src
*** Get a safe filename from a string
    #+begin_src emacs-lisp
      ;; These two functions were obtained from
      ;; https://lists.gnu.org/archive/html/help-gnu-emacs/2012-07/msg00146.html
      ;; I renamed them only to make it easier to find them with smex and change
      ;; them to interactive
      (defun darlan/alphanumericp (ch)
        (find ch "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"))


      (defun darlan/clean-filename (name)
        (interactive "sNome ")
        (setq m(remove-if-not (lambda (ch) (or (darlan/alphanumericp ch) (find ch "-_.")))
                              (substitute ?- 32 name)))
        (message m)
        )
    #+end_src
* Org-mode                                                             :OrgMode:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Org-mode xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Use abbrev-mode with org-mode                                       :Abbrev:
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook
                (lambda ()
                  (abbrev-mode t)
                  ;; Set cache-long-scans in org-mode buffers. This speed-up
                  ;; overall org performance, specially table calculations. 
                  (setq cache-long-scans nil)
                  ))
    #+end_src
*** Org-load-workarounds
    As vezes depois de atualizar o org-mode tenho problemas com funções não
    definidas. Aqui carrego manualmente as bibliotecas onde elas estao
    definidas.
    #+begin_src emacs-lisp
      (autoload 'org-in-clocktable-p "org-clock")
    #+end_src
*** T0D0 Keywords and colors
    #+begin_src emacs-lisp
      ;; Since it is normally too much to record a note for every state, Org mode
      ;; expects configuration on a per-keyword basis for this.  This is achieved by
      ;; adding special markers `!' (for a time stamp) and `@' (for a note) in
      ;; parenthesis after each keyword.  For example, with the setting
      (setq org-todo-keywords
                 '((sequence "TODO(t)" "WAIT(w@/!)"  "|" "DONE(d!)" "DELE(e@)")
                   (sequence "|" "CANC(c@)")
                   (sequence "STARTED" "|")
                   (sequence "CYCLIC" "|")
                   (sequence "PROJ" "SOMEDAY" "|" "FINALIZADO" "CANC")
                   (sequence "|" "FINALIZADO") ; Para compras na internet após receber o produto e qualificar
                   ;; (sequence "TODO(t) STARTED WAIT(w@/!) | PUBLISHED(p) REJECTED(r@/!)")
                   ))
    #+end_src

*** Faces of some tags (ATTACH tag)
    #+begin_src emacs-lisp
      ;(setq org-tag-faces '(("ATTACH" :inherit org-done :box (:line-width 3 :background "red" :color "yellow" :style released-button) :underline t)))
      (setq org-tag-faces '(("ATTACH" :inherit org-done :box nil :underline t :height 1.2)))
    #+end_src
*** Agenda and Refile                                            :Refile:Agenda:
***** General                                                          :General:
      #+begin_src emacs-lisp
        ;; Vc pode incluir cada arquivo individualmente ou usar o comando abaixo para incluir todos
        ;; Including all org files from a directory into the agenda
        ;; (setq org-agenda-files (file-expand-wildcards "~/Muse/org/*.org"))
        ;(setq org-agenda-files (quote ("~/Muse/org")))
        (setq org-agenda-files "~/Muse/org/org-agenda-files.org")

        ;; The notas.org file is not included in the agenda files, but I still want
        ;; to search it
        (setq org-agenda-text-search-extra-files
              (append
               '("~/Muse/org/notas.org" "~/Muse/org/supelec.org")
               (directory-files "~/Muse/OrgWiki/" t "^[^.#].*\\.\\(org$\\|org_archive$\\)")
               )
              )

        ;; Set refile targets to the agenda files
        (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 3))))

        ;; Use outline-path when refiling
        (setq org-refile-use-outline-path (quote file))

        ;; Non-nil means complete the outline path in hierarchical steps. We don't
        ;; want that, since we will use the refile with helm.
        (setq org-outline-path-complete-in-steps nil)

        ;; Faz com que tarefas escalonadas ou com deadlines não apareçam na lista
        ;; de todos (C-c a t)
        (setq org-agenda-todo-ignore-with-date t)

        ;; Non-nil means, restore window configuration open exiting agenda.  Before
        ;; the window configuration is changed for displaying the agenda, the
        ;; current status is recorded.  When the agenda is exited with `q' or `x'
        ;; and this option is set, the old state is restored.
        (setq org-agenda-restore-windows-after-quit t)
      #+end_src

***** Custom agenda views                                         :CustomAgenda:
      Você pode encontrar muitas configurações interessantes em
      http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html

      #+begin_src emacs-lisp
        (setq org-agenda-custom-commands
              (quote (
                      ("n" "Agenda and NextActions"
                       ((agenda "")
                        (tags-todo "NextActions")
                        ))
                      ("c" "Clock" tags-todo "CLOCK")
                      ("E" "NextActions" tags-todo "NextActions")
                      ("N" . "Procura em notas.org")
                      ("Nw" search ""
                      ((org-agenda-files '("~/Muse/org/notas.org"))
                       (org-agenda-text-search-extra-files nil)))
                      ("Nt" tags ""
                      ((org-agenda-files '("~/Muse/org/notas.org"))
                       (org-agenda-text-search-extra-files nil)))
                      ("w" . "Procura na Wiki no org")
                      ("ww" search ""
                       ((org-agenda-files '("~/Muse/OrgWiki/"))
                        (org-agenda-text-search-extra-files '("~/Muse/org/notas.org"))))
                      ("wt" tags ""
                       ((org-agenda-files '("~/Muse/OrgWiki/"))
                        (org-agenda-text-search-extra-files '("~/Muse/org/notas.org"))))
                      ;; ("w" "Wiki search" search ""
                      ;;  ((org-agenda-files '("~/Muse/OrgWiki/"))
                      ;;   (org-agenda-text-search-extra-files '("~/Muse/org/notas.org"))))
                      ("d" "Upcoming deadlines" agenda ""
                        ((org-agenda-time-grid nil)
                         (org-deadline-warning-days 365)
                         (org-agenda-entry-types '(:deadline))
                         ))
                      ;; ("P" "Papers para Ler" tags-todo "+CATEGORY=\"LeituraDePapers\"")
                      ("p" "Lista de Projetos" tags "Projeto" ((org-use-tag-inheritance nil)))
                      ("S" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil) (org-agenda-todo-ignore-scheduled nil)))
                      ("W" "Tasks waiting on something" todo "WAIT" ((org-agenda-todo-ignore-with-date nil) (org-agenda-todo-ignore-scheduled nil)))
                      ("R" "Refile New Notes and Tasks" tags "REFILE" ((org-agenda-todo-ignore-with-date nil) (org-agenda-todo-ignore-scheduled nil)))
                      ("g" "Agenda GTEL (exclui Francês e Home e Supélec)" agenda "" ((org-agenda-filter-preset (quote ("-Home" "-Francês" "-Supelec" "-Finanças")))))
                      ;; ("f" "Agenda do Francês" agenda "" ((org-agenda-filter-preset (quote ("+Francês")))))
                      ("A" "Relatório de Atividades" agenda "" ((org-agenda-filter-preset (quote ("-Francês" "-Finanças" "-Revistas" "-Congressos" "-Feriado" "-Aniversários" "-CLOCK"))) (org-agenda-start-with-log-mode t) (org-agenda-archives-mode 'tree) (org-agenda-ndays 31)) "teste_relatorio.html")
                      ("F" "Agenda das Finanças" agenda "" ((org-agenda-filter-preset (quote ("+Finanças")))))
                      ;; Abaixo um exemplo de prefix key. Note que a primeira linha
                      ;; (uma con-cell) serve para setar uma descrição para a
                      ;; prefix key "h" e não é obrigatória.
                      ;; ("h" . "HOME+Name tags searches") ; description for "h" prefix
                      ;; ("hl" tags "+home+Lisa")
                      ;; ("hp" tags "+home+Peter")
                      ;; ("hk" tags "+home+Kim")
                      )))
      #+end_src
***** Agenda Sorting                                                      :Sort:
      #+begin_src emacs-lisp
        (setq org-agenda-sorting-strategy
              '(
                (agenda habit-down category-down time-up priority-down)
                (todo category-down priority-down)
                (tags priority-down category-keep)
                (search category-keep)
                )
              )

        ;; Default
        ;; '(
        ;;   (agenda time-up priority-down category-keep)
        ;;   (todo priority-down category-keep)
        ;;   (tags priority-down category-keep)
        ;;   (search category-keep)
        ;;   )
      #+end_src
*** General Configurations                                             :General:
    #+begin_src emacs-lisp
      ;; Change C-a and C-e behaviour in org-mode
      (setq org-special-ctrl-a/e t)

      ;; To follow links with RET, rather than a 2 key combo
      ;; (setq org-return-follows-link t)

      ;; Usa o org-mode para arquivos README
      (add-to-list 'auto-mode-alist '("README$" . org-mode))

      ;; ;; Empty lines finish the list
      ;; (setq org-list-empty-line-terminates-plain-lists nil)

      ;; Number of empty lines needed to keep an empty line between collapsed
      ;; trees. If the number is negative, and the number of empty lines is at least
      ;; -N, all empty lines are shown.
      (setq org-cycle-separator-lines -2)

      ;; Indica se uma linha em branco deve ser inserida antes de um heading, mas não
      ;; antes de uma lista. O ideal é usar auto, mas parece não funcionar direito
      (setq org-blank-before-new-entry
            '((heading . auto) (plain-list-item . nil)))

      ;; Set to "t" to hide leading stars in org files by default
      (setq org-hide-leading-stars t)

      ;; tell org-mode to use the default system programn to open open office documents
      (setq org-file-apps (quote ((auto-mode . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . default) ("\\.pdf\\'" . "evince %s") ("\\.od[s|p|t]" . default))))

      ;; When editing source code (with C-c ') Show edit buffer in the
      ;; current window, keeping all other windows.
      (setq org-src-window-setup 'current-window)

      ;; (setq org-archive-default-command 'org-archive-to-archive-sibling)

      ;; The column to which tags should be indented in a headline. If this
      ;; number is positive, it specifies the column.  If it is negative, it
      ;; means that the tags should be flushright to that column.  For example,
      ;; -80 works well for a normal 80 character screen.
      (setq org-tags-column -80)

      ;; Disallow editing invisible parts (folded headlines) to avoid accidental
      ;; modifications.
      (setq org-catch-invisible-edits 'error)
    #+end_src
***** Appearance
      #+begin_src emacs-lisp
        ;; Change the face of the ellipsis that represent folded text. I like
        ;; something with a slightly different color so that I can spot the
        ;; ellipsis easily
        (setq org-ellipsis (quote org-column))

        ;; Increase the font size by setting the font height to 150
        ;; but only if I'am in my G75 computer.
        ;; (if (string-equal (system-name) "darlan-G75VX")
        ;;   (set-face-attribute 'default nil :height 150))
      #+end_src
***** Properties
      #+begin_src emacs-lisp
        ;; Set global properties such that you do not need a line such as
        ;; #+PROPERTY: Effort_ALL 0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 8:00
        ;; in the beginning of each org file.
        (setq org-global-properties
              '(("Effort_ALL". "0 0:10 0:20 0:30 1:00 1:30 2:00 3:00 4:00 5:00 6:00 7:00 8:00")))
      #+end_src
*** Spell checking in org-mode files
    #+begin_src emacs-lisp
      ;; Make spell checking ignore PROPERTIES and LOGBOOK drawers
      (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
      ;; Make spell checking ignore SRC blocks
      (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
    #+end_src
*** Attach                                                           :OrgAttach:
    #+begin_src emacs-lisp
      ;; The "attach" link type that I defined in my main gtd file uses the
      ;; org-attach-expand function.
      (autoload 'org-attach-expand "org-attach.el")

      ;; Only defined after org-attach is loaded
      (setq org-attach-store-link-p 'attached)

      (setq org-confirm-elisp-link-not-regexp
            (regexp-opt '("org-open-file" "browse-dir-sftp" "browse-dir")))
    #+end_src
*** Persistent Tags                                                       :Tags:
    #+begin_src emacs-lisp
      (setq org-tag-persistent-alist '(
                                       ("Charles" . ?c) ("Igor" . ?i) ("CarlosIgor" . ?I) ("Cibelly" . ?b) ("Lígia" . ?L) ("Tembine" . ?t) ("Debbah" . ?D) ("Yuri" . ?y)
                                       (:startgroup . nil) ("Home" . ?h) ("GTEL" . ?g) (:endgroup . nil) ("Doutorado" . ?d) ("Francês" . ?f) ("noexport" . ?n)
                                       ("Errands" . ?e) (:startgroup . nil) ("Someday" . ?s) ("NextActions" . ?N) (:endgroup . nil) ("crypt" . ?C) ("Projeto" . ?p) ("Leituras" . ?l)
                                       ))
    #+end_src
*** Org Habit                                                            :Habit:
    #+begin_src emacs-lisp
      (setq org-habit-graph-column 50)
      (setq org-habit-preceding-days 7)
    #+end_src
*** Keybindings                                                    :Keybindings:
***** Global Keybindings                                                :Agenda:
      #+begin_src emacs-lisp
        ;; (global-set-key "\C-cb" 'org-iswitchb) ; Conflita com as funções para o banshee que fiz
        (global-set-key "\C-xB" 'org-ido-switchb)

        ;; These two keybindings are always required to be set
        (global-set-key "\C-cl" 'org-store-link)
        (global-set-key "\C-ca" 'org-agenda)
      #+end_src
***** Local Keybinding                                            :Hook:
      #+begin_src emacs-lisp
        ;; Ao invés de C-c C-letra vc pode usar C-M-letra para navegar pelo outline,
        ;; onde letra pode ser n (next visible), p (previous visible) e u (up heading)
        (add-hook 'org-mode-hook
                  (lambda ()
                    (local-set-key [f6] 'darlan/org-surround-inline-math)
                    (local-set-key [C-f6] 'org-insert-example-block)
                    (local-set-key [f5] 'org-toggle-latex-fragment)

                    ;; (local-set-key "\C-xye" 'yas/expand)
                    ;; (local-set-key "\C-xyn" 'yas/next-field)
                    ;; (local-set-key [tab] 'yas/expand)
                    ;; In org  "|" is used for tables. Let's change boxquote-side
                    ;; then to "!"
                    ;;(setq boxquote-side "! ")
                    ))
      #+end_src
*** Outline Minor Mode                                     :Outline:Keybindings:
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook
                (lambda ()
                  (outline-minor-mode t)
                  ))
    #+end_src
*** Speed Commands                                               :SpeedCommands:
    Note que as funções ded/org-show-next-heading-tidily e
    ded/org-show-previous-heading-tidily são definidas mais tarde na seção
    [[*Useful Functions]]
    #+begin_src emacs-lisp
      ;; Enable speed-commands
      ;; Non-nil means, activate single letter commands at beginning of a headline.
      ;; Press "?" in the beginning of a headline to see the available commands.
      (setq org-use-speed-commands t)

      (with-eval-after-load "org"
        (add-to-list 'org-speed-commands-user
                     '("s" ded/org-show-next-heading-tidily))
        (add-to-list 'org-speed-commands-user
                     '("d" org-decrypt-entry))
        (add-to-list 'org-speed-commands-user
                     '("S" ded/org-show-previous-heading-tidily))
        )
    #+end_src
*** Useful Functions                                       :FunctionDefinitions:
***** Navigation
      #+begin_src emacs-lisp
        ;; Used in a speed comamnd
        (defun ded/org-show-next-heading-tidily ()
          "Show next entry, keeping other entries closed."
          (if (save-excursion (end-of-line) (outline-invisible-p))
              (progn (org-show-entry) (show-children))
            (outline-next-heading)
            (unless (and (bolp) (org-on-heading-p))
              (org-up-heading-safe)
              (hide-subtree)
              (error "Boundary reached"))
            (org-overview)
            (org-reveal t)
            (org-show-entry)
            (show-children)))

        ;; Used in a speed comamnd
        (defun ded/org-show-previous-heading-tidily ()
          "Show previous entry, keeping other entries closed."
          (let ((pos (point)))
            (outline-previous-heading)
            (unless (and (< (point) pos) (bolp) (org-on-heading-p))
              (goto-char pos)
              (hide-subtree)
              (error "Boundary reached"))
            (org-overview)
            (org-reveal t)
            (org-show-entry)
            (show-children)))
      #+end_src
***** Link Style
      #+begin_src emacs-lisp
        ;; http://lists.gnu.org/archive/html/emacs-orgmode/2009-08/msg00889.html
        ;; Veja qual seria um atalho bom para isso. Talvez C-c t
        (defun org-toggle-link-style ()
          "Toggle between descriptive and literal link styles."
          (interactive)
          (if (member '(org-link) buffer-invisibility-spec)
              ;; descriptive -> literal
              (progn
                (org-remove-from-invisibility-spec '(org-link))
                (message "Showing literal links"))
            ;; literal -> descriptive
            (org-add-to-invisibility-spec '(org-link))
            (message "Showing descriptive links"))
          (org-restart-font-lock))
      #+end_src
***** Quick Access to projects
      #+begin_src emacs-lisp
        (defun my-find-org-heading (projectName)
          (let (heading org-indirect-buffer-display)
            (setq heading (concat "* " projectName))
            (setq org-indirect-buffer-display 'current-window)
            (if (buffer-exists projectName)
                (switch-to-buffer projectName)
              ;; Else
              (progn
                (find-file "~/Muse/org/gtd.org")
                (goto-char (point-min))
                (search-forward heading)
                (org-tree-to-indirect-buffer)
                (rename-buffer projectName)
                (org-overview)
                (show-children)
                )
              )
            )
          )

        (defun my-find-relatorio-atividades-org-heading nil
          (interactive)
          ;; (org-id-goto "RelatorioUFC35Wiki")
          (find-file "~/Muse/org/RelatoriosDeAtividade.org")
          )

        (defun my-find-doutorado-org-heading nil
          (interactive)
          ;(my-find-org-heading "Doutorado")
          (find-file "~/Muse/org/doutorado.org")
          )

        (defun my-find-stanford-org-heading nil
          (interactive)
                                                ;(my-find-org-heading "Doutorado")
          (find-file "~/Muse/org/Stanford.org")
          )

        (defun my-find-ufc32-org-heading nil
          (interactive)
          ;; (my-find-org-heading "UFC.32")
          (find-file (concat org-directory "/ufc32.org"))
          )

        (defun my-find-ufc35-org-heading nil
          (interactive)
          ;; (my-find-org-heading "UFC.35")
          (find-file (concat org-directory "/ufc35.org"))
          )

        (defun my-find-ufc42-org-heading nil
          (interactive)
          ;; (my-find-org-heading "UFC.35")
          (find-file (concat org-directory "/ufc42.org"))
          )

        (defun my-find-financas-org-heading nil
          (interactive)
          ;(my-find-org-heading "Finanças")
          (find-file "~/Muse/org/Financas.org")
          )

        (defun my-find-senhas-org-heading nil
          (interactive)
          ;(my-find-org-heading "Senhas")
          (require 'org-crypt)
          (find-file "~/Muse/org/Senhas.org")
          )

        (defun my-find-carro-org-heading nil
          (interactive)
          ;(my-find-org-heading "Carro")
          (find-file "~/Muse/org/Carro.org")
          )

        (defun my-find-calendario-org-heading nil
          (interactive)
          (my-find-org-heading "Calendário")
          )

        (defun my-find-gtelbook-org-heading nil
          (interactive)
          (org-id-goto "LivroGTEL2013")
          )

        (defun my-find-artigo-revista-org-heading nil
          (interactive)
          (org-id-goto "ArtMagazineExtInt")
          )
      #+end_src
***** Transpose a Table
      #+begin_src emacs-lisp
        (defun org-transpose-table-at-point ()
          "Transpose orgmode table at point, eliminate hlines"
          (interactive)
          (let ((contents
                 (apply #'mapcar* #'list
                        ;; remove 'hline from list
                        (remove-if-not 'listp
                                       ;; signals error if not table
                                       (org-table-to-lisp)))))
            (delete-region (org-table-begin) (org-table-end))
            (insert (mapconcat (lambda(x) (concat "| " (mapconcat 'identity x " | " ) "  |\n" ))
                               contents ""))
            (org-table-align)))

      #+end_src
***** Remove redundant tags
      Pegue no work hacks
      http://orgmode.org/worg/org-hacks.html

      *Feita por David Maus*
      A small function that processes all headlines in current buffer and
      removes tags that are local to a headline and inherited by a parent
      headline or the #+FILETAGS: statement.
      *OBS.:* Essa função contém um pequeno bug. Ela não trata a tag ATTACH
       como especial e se a parent headline tiver essa tag, então a tag
       será removida da headline child.
      #+begin_src emacs-lisp
        (defun dmj/org-remove-redundant-tags ()
          "Remove redundant tags of headlines in current buffer.

        A tag is considered redundant if it is local to a headline and
        inherited by a parent headline."
          (interactive)
          (when (eq major-mode 'org-mode)
            (save-excursion
              (org-map-entries
               '(lambda ()
                  (let ((alltags (split-string (or (org-entry-get (point) "ALLTAGS") "") ":"))
                        local inherited tag)
                    (dolist (tag alltags)
                      (if (get-text-property 0 'inherited tag)
                          (push tag inherited) (push tag local)))
                    (dolist (tag local)
                      (if (member tag inherited) (org-toggle-tag tag 'off)))))
               t nil))))
      #+end_src
***** Get full path of a file relative to the current file
      #+begin_src emacs-lisp
        ;; Taken from http://ergoemacs.org/emacs/elisp_relative_path.html
        (defun fullpath-relative-to-current-file (file-relative-path)
          "Returns the full path of FILE-RELATIVE-PATH, relative to file location where this function is called.

        Example: If you have this line
         (fullpath-relative-to-current-file \"../xyz.el\")
        in the file at
         /home/mary/emacs/emacs_lib.el
        then the return value is
         /home/mary/xyz.el
        Regardless how or where emacs_lib.el is called.

        This function solves 2 problems.

         1. If you have file A, that calls the `load' on a file at B, and
            B calls 'load' on file C using a relative path, then Emacs
            will complain about unable to find C. Because, emacs does not
            switch current directory with 'load'.

            To solve this problem, when your code only knows the relative
            path of another file C, you can use the variable
            `load-file-name' to get the current file's full path, then
            use that with the relative path to get a full path of the
            file you are interested.

         2. To know the current file's full path, emacs has 2 ways:
            `load-file-name' and `buffer-file-name'. If the file is
            loaded by 'load', then load-file-name works but
            buffer-file-name doesn't. If the file is called by
            `eval-buffer', then load-file-name is nil. You want to be
            able to get the current file's full path regardless the file
            is run by 'load' or interactively by 'eval-buffer'."
          (concat (file-name-directory (or load-file-name buffer-file-name)) file-relative-path)
        )
      #+end_src
*** Configurações para inserir um "jornal                          :Keybindings:
    #+begin_src emacs-lisp
      ;; ;; http://www.tychoish.com/2009/02/org-mode-snippets/
      (defvar org-journal-file "~/Muse/org/journal.org"
          "Path to OrgMode journal file.")
      (defvar org-journal-date-format "%Y-%m-%d"
        "Date format string for journal headings.")

      (defun org-journal-entry ()
        "Create a new diary entry for today or append to an existing one."
        (interactive)
        (switch-to-buffer (find-file org-journal-file))
        (widen)
        (let ((today (format-time-string org-journal-date-format)))
          (beginning-of-buffer)
          (unless (org-goto-local-search-headings today nil t)
            ((lambda ()
               (org-insert-heading)
               (insert today)
               (insert "\n\n  \n"))))
          (beginning-of-buffer)
          (org-show-entry)
          (org-narrow-to-subtree)
          (end-of-buffer)
          (backward-char 2)
          (unless (= (current-column) 2)
            (insert "\n\n  "))))

      (global-set-key "\C-cj" 'org-journal-entry)
    #+end_src
*** Clocking                                                          :Clocking:
***** General Configuration
      #+begin_src emacs-lisp
        (defun my-clock-change-state (state)
          "If state is 'CYCLIC' return 'CYCLIC'. If it is any other todo keyword return
        'STARTED'. This is useful to set in the variable org-clock-in-switch-to-state."
          (interactive)
          (if (equal state "CYCLIC")
              (message "CYCLIC")
            (message "STARTED")
            )
          )

        ;; Change task state to STARTED when clocking in
        (setq org-clock-in-switch-to-state 'my-clock-change-state)

        ;; insert state change notes and time stamps into a drawer called LOGBOOK
        (setq org-log-into-drawer t)

        ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
        (setq org-clock-out-remove-zero-time-clocks t)

        ;; When equalt to "t", the current clocked task is included in clock reports
        (setq org-clock-report-include-clocking-task t)
      #+end_src
***** Automaticamente muda uma tarefa para STARTED se uma subtarefa for mudada p/ STARTED
      #+begin_src emacs-lisp
        ;; Pegue em http://doc.norang.ca/org-mode.html#sec-15-44

        ;; Mark parent tasks as started
        (defvar bh/mark-parent-tasks-started nil)

        (defun bh/mark-parent-tasks-started ()
          "Visit each parent task and change TODO states to STARTED"
          (unless bh/mark-parent-tasks-started
            (when (equal org-state "STARTED")
              (let ((bh/mark-parent-tasks-started t))
                (save-excursion
                  (while (org-up-heading-safe)
                    (when (member (nth 2 (org-heading-components)) (list "TODO" "NEXT"))
                      (org-todo "STARTED"))))))))

        (add-hook 'org-after-todo-state-change-hook 'bh/mark-parent-tasks-started 'append)

      #+end_src
***** Global Keybinding                                            :Keybindings:
      #+begin_src emacs-lisp
        ;; Set the "C-c C-x C-j" keybinging (already valid in org) as a global keybinging
        (global-set-key (kbd "C-c C-x C-j") 'org-clock-goto)
      #+end_src
*** Stuck Projects
    #+begin_src emacs-lisp
      ;; Let's assume that you, in your own way of using Org mode, identify
      ;; projects with a tag "ProjTasks", and that you use a TODO keyword MAYBE
      ;; to indicate a project that should not be considered yet. Let's further
      ;; assume that the TODO keyword DONE marks finished projects, and that NEXT
      ;; and TODO indicate next actions. The tag "ProjInfo" indicates that the
      ;; headline is a information headline and should not be counted. Finally,
      ;; if the project contains the special word "IGNORE" anywhere, it should
      ;; not be listed either. In this case you would start by identifying
      ;; eligible projects with a tags/todo match1 ‘+ProjTasks/-MAYBE-DONE’, and
      ;; then check for TODO, NEXT, ProjInfo, and IGNORE in the subtree to identify
      ;; projects that are not stuck. The correct customization for this is
      (setq org-stuck-projects
            '("+Projeto-Someday/-MAYBE-DONE-FINALIZADO" ("NEXT" "TODO" "STARTED") ("ProjInfo")
              "\\<IGNORE\\>"))
    #+end_src
*** Org-crypt                                                         :OrgCrypt:
    #+begin_src emacs-lisp
      (autoload 'org-decrypt-entry "org-crypt.el" "Decrypt the content of the current headline." t)
      (autoload 'org-decrypt-entries "org-crypt.el" "Decrypt all entries in the current buffer." t)
      (autoload 'org-encrypt-entry "org-crypt.el" "Encrypt the content of the current headline." t)
      (autoload 'org-encrypt-entries "org-crypt.el" "Encrypt all top-level entries in the current buffer." t)

      (with-eval-after-load "org-crypt"
        ;; Automatically encrypts everything that has the tag "crypt"
        ;; when you save the file
        (org-crypt-use-before-save-magic)
        (setq org-tags-exclude-from-inheritance (quote ("crypt" "Projeto")))
        ;; darcamo@gmail.com (see in the seahorse program)
        (setq org-crypt-key "15798E79")

        ;; Possible values:
        ;; t        : Disable auto-save-mode for the current buffer
        ;;            prior to decrypting an entry.
        ;; nil      : Leave auto-save-mode enabled.
        ;;            This may cause data to be written to disk unencrypted!
        ;; 'ask     : Ask user whether or not to disable auto-save-mode
        ;;            for the current buffer.
        ;; 'encrypt : Leave auto-save-mode enabled for the current buffer,
        ;;            but automatically re-encrypt all decrypted entries
        ;;            *before* auto-saving.
        ;;            NOTE: This only works for entries which have a tag
        ;;            that matches `org-crypt-tag-matcher'.
        (setq org-crypt-disable-auto-save t)
        )
    #+end_src
*** Babel                                                                :Babel:
***** Load Languages
      #+begin_src emacs-lisp
        (use-package ob-ipython
          :ensure t
          )

        (org-babel-do-load-languages
         'org-babel-load-languages
         '(
           ;; (R . nil)
           ;; (ditaa . t)
           ;; (dot . nil)
           (emacs-lisp . t)
           ;; (gnuplot . t)
           (haskell . t)
           ;; (ocaml . nil)
           (python . t)
           ;; ipython can be a better option then standard python
           (ipython . t)
           ;; (C . t)
           ;; (ruby . nil)
           ;; (screen . nil)
           (sh . t)
           ;; (sql . nil)
           ;; (sqlite . nil)
           (octave . t)
           (matlab . t)
           ;; (latex . t)
           ;; (plantuml . t)
           (java . t)
           ))
      #+end_src
***** plantuml
      #+begin_src emacs-lisp
        ;; Set the path to the plantuml.jar file
        (setq org-plantuml-jar-path
              (expand-file-name "~/Dropbox/Arquivos de Instalação/plantuml.jar"))
      #+end_src
***** General Configurations
      #+begin_src emacs-lisp
        ;; turn-off confirmation when evaluating babel blocks
        (setq org-confirm-babel-evaluate nil)

        ;; If set to t, TAB works natively in code blocks (Deixa o TAB muito lento)
        (setq org-src-tab-acts-natively nil)

        ;; Native font lock for src blocks
        ;;(setq org-src-fontify-natively t)
      #+end_src
***** COMMENT Library of Babel
      :PROPERTIES:
      :TANGlE:   no
      :END:
      #+begin_src emacs-lisp
        ;; load the library of babel to make pre-built helper functions available
        ;; in the languages you will be using. The functions will be available from
        ;; any Org-mode file to be called using call lines
        ;;
        ;; #+call: booktabs(table=...)
        ;;
        ;; or executable noweb references in source blocks
        (org-babel-lob-ingest "~/.emacs.d/org-mode/contrib/babel/library-of-babel.org")
        (org-babel-lob-ingest "~/Muse/org/my_library_of_babel.org")
      #+end_src
*** Org-Capture                                             :OrgCapture:Capture:
    #+begin_src emacs-lisp
      (setq org-directory "~/Muse/org")
    #+end_src
***** Keybinding                                                   :Keybindings:
      #+begin_src emacs-lisp
        (define-key global-map "\C-cc" 'org-capture)
        ;; (global-set-key "\C-cc" 'org-capture)
      #+end_src

***** Templates                                                    :Keybindings:
      #+begin_src emacs-lisp
        ;; Veja o E-mail [[wl:%25Newsletter/Org-Mode!#80wrgxs3yg.fsf@somewhere.org][Email from Sebastien Vauban: Re: {O} Feature request: two-l]]
        (setq org-capture-templates
              `(
                ;; xxxxx Start Capture a new tasks xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                ("t" "Adiciona nova tarefa")
                ("tt" "Nova Tarefa rápida (refile depois)" entry
                 (file+headline "refile.org" "Inbox")
                 (file "~/.emacs.d/lisp/org-capture-templates/new_task.org"))
                ("tp" "Tarefa do Projeto UFC.42" entry
                 (id "UFC42Tarefas")
                 (file "~/.emacs.d/lisp/org-capture-templates/new_task.org"))
                ("td" "Tarefa do Doutorado" entry
                 (file+headline "doutorado.org" "Lista de Tarefas")
                 (file "~/.emacs.d/lisp/org-capture-templates/new_task.org"))
                ("tc" "Tarefa dentro do clock atual" entry
                 (clock)
                 (file "~/.emacs.d/lisp/org-capture-templates/new_task.org"))
                ;; xxxxx End Capture a new tasks xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                ;;
                ;; xxxxx Start Capture new notes xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                ("n" "Notas" entry
                 (file+headline "notas.org" "Notas diversas")
                 "* %^{Título da Nota} %^g\n  %i%?\n  %a")
                ("e" "Nota de um E-Mail" entry
                 (file+headline "notas.org" "Notas diversas")
                 "* %^{Título da Nota} %^G\n  %i%?\n  \n  Assunto do E-mail: %:subject\n  De: %:from\n  %a")
                ;; ("o" "TOC do IEEE" entry
                ;;  (file+headline "gtd.org" "Lista de Tarefas")
                ;;  "* TODO Ver o TOC recebido em %u :TOC:\n  Links no E-Mail:\n  %?\n  \n  Assunto do E-mail: %:subject\n  %a")
                ("b" "Blog" entry
                 (file+datetree "blog.org")
                 "* %^{Título do Post} %^G\n  %t\n  %a\n\n  %i%?\n"
                 :empty-lines 1)
                ;; xxxxx End Capture new notes xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                ;;
                ;; xxxxx Start Capture expenses data created with tasker xxxxxxxxxx
                ("f" "Adiciona novo gasto")
                ("fa" "Gasto com alimentação" table-line
                 (id ,(get-me-an-org-id-for-the-month "Alimentação"))
                 "%(concat \"|\" mytemplatevalue)"
                 :table-line-pos "II-1"
                 :immediate-finish t)
                ("fc" "Gasto com contas" table-line
                 (id ,(get-me-an-org-id-for-the-month "Contas"))
                 "%(concat \"|\" mytemplatevalue)"
                 :table-line-pos "II-1"
                 :immediate-finish t)
                ("ft" "Gasto com o carro ou transporte" table-line
                 (id ,(get-me-an-org-id-for-the-month "Carro"))
                 "%(concat \"|\" mytemplatevalue)"
                 :table-line-pos "II-1"
                 :immediate-finish t)
                ("fe" "Gasto com Entretenimento" table-line
                 (id ,(get-me-an-org-id-for-the-month "Entretenimento"))
                 "%(concat \"|\" mytemplatevalue)"
                 :table-line-pos "II-1"
                 :immediate-finish t)
                ("fd" "Gasto diversos" table-line
                 (id ,(get-me-an-org-id-for-the-month "Diversos"))
                 "%(concat \"|\" mytemplatevalue)"
                 :table-line-pos "II-1"
                 :immediate-finish t)
                ;; xxxxx End Capture expenses data created with tasker xxxxxxxxxxxx
                ;;
                ;; xxxxx Start Org-contacts xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                ("c" "Add a new contact" entry
                 (file+headline "contacts.org" "New Contacts")
                 (file "~/.emacs.d/lisp/org-capture-templates/new_contact.org")
                 :kill-buffer t)
                ;; xxxxx End Org-contacts xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                ))
      #+end_src
***** COMMENT Finances Tasker Integration                               :Tasker:
      :PROPERTIES:
      :TANGlE:   no
      :END:
      These functions can be called in order to read the corresponding text
      file created/edited by tasker (in my android phone) and synced with
      dropbox. They will then pass that information to specific capture
      templates to add the information to the correct table.

      NOTE: This requires that org-confirm-babel-evaluate has been set to
      nil. Otherwise you will be asked for permission to evaluate each of
      these function (which call the sbe function) during Emacs initialization.
      #+begin_src emacs-lisp
        (defun darlan-capture-tasker-finance-alimentacao ()
          "Add all lines in the 'Carro.txt' file (created by Tasker) to
        the corresponding finance table."
          (interactive)
          (let ((currentletters "fa") filecontent lines)
            (progn
              ;; We use 'sbe' to call the org-babel python block
              ;; 'processfinancelines' to read the content of the file 'Carro.txt'.
              (setq filecontent (sbe processfinancelines (filename $"Alimentação.txt")))
              ;; sbe will return a string. We use the 'read' function to read this
              ;; string as an elisp object. Because of the way 'processfinancelines'
              ;; was implemented, this lisp object will be a list of strings, each
              ;; string being one line in the file.
              (setq lines (read filecontent))
              ;; Now we use mapc to call the method
              ;; darlan-capture-tasker-finance-single-line once for each line in the
              ;; original Carro.txt file. Note that the actual org-capture template
              ;; used will depend on the value of the currentletters variable.
              (mapc 'darlan-capture-tasker-finance-single-line lines)
              )
            ))

        (defun darlan-capture-tasker-finance-contas ()
          "Add all lines in the 'Carro.txt' file (created by Tasker) to
        the corresponding finance table."
          (interactive)
          (let ((currentletters "fc") filecontent lines)
            (progn
              ;; We use 'sbe' to call the org-babel python block
              ;; 'processfinancelines' to read the content of the file 'Carro.txt'.
              (setq filecontent (sbe processfinancelines (filename $"Contas.txt")))
              ;; sbe will return a string. We use the 'read' function to read this
              ;; string as an elisp object. Because of the way 'processfinancelines'
              ;; was implemented, this lisp object will be a list of strings, each
              ;; string being one line in the file.
              (setq lines (read filecontent))
              ;; Now we use mapc to call the method
              ;; darlan-capture-tasker-finance-single-line once for each line in the
              ;; original Carro.txt file. Note that the actual org-capture template
              ;; used will depend on the value of the currentletters variable.
              (mapc 'darlan-capture-tasker-finance-single-line lines)
              )
            ))

        (defun darlan-capture-tasker-finance-carro ()
          "Add all lines in the 'Carro.txt' file (created by Tasker) to
        the corresponding finance table."
          (interactive)
          (let ((currentletters "ft") filecontent lines)
            (progn
              ;; We use 'sbe' to call the org-babel python block
              ;; 'processfinancelines' to read the content of the file 'Carro.txt'.
              (setq filecontent (sbe processfinancelines (filename $"Carro.txt")))
              ;; sbe will return a string. We use the 'read' function to read this
              ;; string as an elisp object. Because of the way 'processfinancelines'
              ;; was implemented, this lisp object will be a list of strings, each
              ;; string being one line in the file.
              (setq lines (read filecontent))
              ;; Now we use mapc to call the method
              ;; darlan-capture-tasker-finance-single-line once for each line in the
              ;; original Carro.txt file. Note that the actual org-capture template
              ;; used will depend on the value of the currentletters variable.
              (mapc 'darlan-capture-tasker-finance-single-line lines)
              )
            ))

        (defun darlan-capture-tasker-finance-entretenimento ()
          "Add all lines in the 'Carro.txt' file (created by Tasker) to
        the corresponding finance table."
          (interactive)
          (let ((currentletters "fe") filecontent lines)
            (progn
              ;; We use 'sbe' to call the org-babel python block
              ;; 'processfinancelines' to read the content of the file 'Carro.txt'.
              (setq filecontent (sbe processfinancelines (filename $"Entretenimento.txt")))
              ;; sbe will return a string. We use the 'read' function to read this
              ;; string as an elisp object. Because of the way 'processfinancelines'
              ;; was implemented, this lisp object will be a list of strings, each
              ;; string being one line in the file.
              (setq lines (read filecontent))
              ;; Now we use mapc to call the method
              ;; darlan-capture-tasker-finance-single-line once for each line in the
              ;; original Carro.txt file. Note that the actual org-capture template
              ;; used will depend on the value of the currentletters variable.
              (mapc 'darlan-capture-tasker-finance-single-line lines)
              )
            ))

        (defun darlan-capture-tasker-finance-diversos ()
          "Add all lines in the 'Carro.txt' file (created by Tasker) to
        the corresponding finance table."
          (interactive)
          (let ((currentletters "fd") filecontent lines)
            (progn
              ;; We use 'sbe' to call the org-babel python block
              ;; 'processfinancelines' to read the content of the file 'Carro.txt'.
              (setq filecontent (sbe processfinancelines (filename $"Diversos.txt")))
              ;; sbe will return a string. We use the 'read' function to read this
              ;; string as an elisp object. Because of the way 'processfinancelines'
              ;; was implemented, this lisp object will be a list of strings, each
              ;; string being one line in the file.
              (setq lines (read filecontent))
              ;; Now we use mapc to call the method
              ;; darlan-capture-tasker-finance-single-line once for each line in the
              ;; original Carro.txt file. Note that the actual org-capture template
              ;; used will depend on the value of the currentletters variable.
              (mapc 'darlan-capture-tasker-finance-single-line lines)
              )
            ))

        (defun darlan-capture-tasker-finance-single-line (currentline)
          "Call org capture to add the 'currentline' to the correct
        table. Note that calling function must set the 'currentletters'
        variable to the letters to call the correct capture template."

          ;; Note that we set the mytemplatevalue variable to the current line
          ;; before calling org-capture. All finance capture templates use the
          ;; content from this variable as the value to be captured and added to
          ;; the corresponding table.
          (let (mytemplatevalue)
            (setq mytemplatevalue currentline)
            (org-capture nil currentletters)
            )
          )
      #+end_src
***** Capture in other frame
      Função que peguei na lista do org-mode
      [[wl:%25Newsletter/Org-Mode!#877ha9nfgy.fsf@ginnungagap.bsc.es][Email from Lluís: {O} org-capture-other-frame]]
      #########################################################################
      # I've made a little function to launch org-capture on another frame,   #
      # which is very handy when plugged into a hotkey and working with other #
      # applications.                                                         #
      #                                                                       #
      # It lacks some settings that I already have active system wide (like   #
      # no scrollbars, no toolbar and the like), so you should probably tune  #
      # those (a defcustom for the frame parameters should suffice).          #
      #                                                                       #
      # In any case, tell me (directly, as I'm not not subscribed) if you're  #
      # going to install this into org-mode. Otherwise I'll upload the        #
      # snippet into emacs wiki:                                              #
      #########################################################################

      *Para usar, basta chamar a função my-org-capture-other-frame*
      Para usar fora do emacs (com emacs --daemon rodando) tente algo como
      : emacsclient -d $DISPLAY -e '(my-org-capture-other-frame)'

      #+begin_src emacs-lisp
        (defun my-org-capture-other-frame ()
          "Create a new frame and run org-capture."
          (interactive)
          (make-frame '((name . "Org-Capture")
                        (width  . 120)
                        (height .  20)
                        (menu-bar-lines . 0)
                        (tool-bar-lines . 0)
                        (auto-lower . nil)
                        (auto-raise . t)))
          (select-frame-by-name "Org-Capture")
          (if (condition-case nil
                  (progn (org-capture) t)
                (error nil))
              (delete-other-windows)
            (my-org-capture-other-frame-cleanup)))

        (defun my-org-capture-other-frame-cleanup ()
          "Close the Org-Capture frame."
          (if (equal "Org-Capture" (frame-parameter nil 'name))
              (delete-frame)))
        (add-hook 'org-capture-after-finalize-hook 'my-org-capture-other-frame-cleanup)
      #+end_src
*** Preview-Latex and Latex related                               :PreviewLatex:
    #+begin_src emacs-lisp
      ;; Muda a escala das fórmulas de latex geradas para o preview-latex e para o exporte para html
      (setq org-format-latex-options (quote (:foreground default :background default :scale 1.7 :html-foreground "Black" :html-background "Transparent" :html-scale 1.7 :matchers ("begin" "$1" "$" "$$" "\\(" "\\["))))

      ;; convert LaTeX fragments to images when exporting to HTML
      (setq org-export-with-LaTeX-fragments nil)

      ;; Change the default latex packages
      (setq org-latex-default-packages-alist
            '(("AUTO" "inputenc" t)
              ("T1" "fontenc" t)
              ("" "fixltx2e" nil)
              ("" "graphicx" t)
              ("" "longtable" nil)
              ("" "float" nil)
              ("" "wrapfig" nil)
              ("" "soul" t)
              ("" "textcomp" t)
              ("" "marvosym" t)
              ;; ("" "wasysym" t) ;; Removed, since it conflicts with something in
              ;;                  ;; my MathDefinitions package.
              ("" "MathDefinitions" t)  ;; My custom latex package. Latex must be
                                        ;; able to find this package.
              ("" "latexsym" t)
              ("" "amssymb" t)
              ("" "hyperref" nil)
              ("" "tikz" nil)  ;; If tikz is enabled in latex fragments the
                               ;; equations will be rendered in black even when
                               ;; the Emacs background is dark
              "\\tolerance=1000"))

      ;; Faz com que o commando \vec seja conhecido para o preview latex
      ;; (setq org-format-latex-header (concat org-format-latex-header "\n\\renewcommand{\\vec}[1]{\\mathbf{#1}}"))
      ;; ;; Faz com que o commando \mat seja conhecido para o preview latex
      ;; (setq org-format-latex-header (concat org-format-latex-header "\n\\newcommand{\\mat}[1]{\\mathbf{#1}}"))
      ;; ;; Faz com que o commando \set seja conhecido para o preview latex
      ;; (setq org-format-latex-header (concat org-format-latex-header "\n\\newcommand{\\Set}[1]{\\mathbb{#1}}"))

      (setq org-latex-preview-ltxpng-directory "~/tmp/ltxpng/")
    #+end_src

*** Preview-Latex Global Keybindings                  :PreviewLatex:Keybindings:
    #+begin_src emacs-lisp
      ;; With this I can use org-toggle-latex-fragment in any buffer to preview
      ;; latex equations
      (global-set-key "\C-cP" 'org-toggle-latex-fragment)
    #+end_src
*** Export Backends and Options                   :ExportBackends:ExportOptions:
***** Org Default Backends                                            :Markdown:
      #+begin_src emacs-lisp
        (add-to-list 'org-export-backends 'md)
        (add-to-list 'org-export-backends 'odt)
      #+end_src
***** COMMENT Beamer Export                                             :Beamer:
      :PROPERTIES:
      :TANGlE:   no
      :END:
      Org-mode supports beamer export. Here we define a few additional
      environments.
      #+begin_src emacs-lisp
        ;; (setq org-beamer-environments-extra nil)
        (load-library "org-beamer")
        (add-to-list 'org-beamer-environments-extra '("overprint" "O" "\\begin{overprint}" "\\end{overprint}"))
        (add-to-list 'org-beamer-environments-extra '("onslide" "l" "\\onslide<%h>" ""))
      #+end_src
***** COMMENT Org-reveal
      :PROPERTIES:
      :TANGlE:   no
      :END:
      #+begin_src emacs-lisp
        (add-to-list 'load-path "~/Org-mode-dev/org-reveal/")
        (require 'ox-reveal)
        (setq org-reveal-root "file:///home/darlan/Org-mode-dev/reveal.js/")

        ;; Export with "C-c C-e R R" and put the generated HTML file in the reveal folder.
      #+end_src
*** MathJax configuration (for HTML export)
    #+begin_src emacs-lisp
      (setq org-html-mathjax-options
            '((path "file:///home/darlan/Dropbox/MathJax-2.4-latest/MathJax.js?config=default")
              (scale "100")
              (align "center")
              (indent "2em")
              (mathml nil)))
    #+end_src
*** COMMENT Dokuwiki export                             :GenericExport:Dokuwiki:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Here we add a Dokuwiki export option to org-export-generic

    A partir das mudanças do Org 8.0 não sei se o pacote org-export-generic
    ainda existe. Por isso comentei essa parte do Dokuwiki.
    #+begin_src emacs-lisp
      (with-eval-after-load "org-export-generic"
        (org-set-generic-type
         "doku-wiki"
         '(
           :file-suffix     ".txt"
           :key-binding     ?D
           
           ;; lifted from wikipedia exporter
           :header-prefix                   ""
           :header-suffix""
           
           :title-format                    "====== %s ======\n"
           
           :date-export                   nil
           :toc-export                    nil
           
           :body-header-section-numbers   nil
           :body-section-prefix           "\n"
           
           :body-section-header-prefix    ("===== " "==== " "=== " "==" )
           :body-section-header-format  "%s"
           :body-section-header-suffix    (" =====\n\n" " ====\n\n" " ===\n\n"
                                           " ==\n\n")
           
           :body-line-export-preformated  t ;; yes/no/maybe???
           :body-line-format              "%s\n"
           :body-line-wrap75
           
           :body-line-fixed-format       " %s\n"
           
           :body-list-format              " * %s\n"
           :body-number-list-format       " - %s\n"
           ;;    :body-list-prefix              "LISTSTART"
           ;;    :body-list-suffix              "LISTEND"
           
           ;; this is ignored! [2010/02/02:rpg]
           :body-bullet-list-prefix       ("* " "** " "*** " "**** " "***** ")
           
           ;; Formatting
           ;; :blockquote-start              "\n^\n"
           ;; :blockquote-end                "^\n\n"
           :body-newline-paragraph        "\n"
           :bold-format"**%s**"
           :italic-format"//%s//"
           :underline-format"__%s__"
           :strikethrough-format"<del>%s</del>"
           ;; :code-format"-+%s+-"
           :verbatim-format"''%s''"
           ))
        )
    #+end_src

*** Integration with Windmove                                             :Hook:
    I'm not sure yet, but maybe this makes org-mode slower.
    #+begin_src emacs-lisp
      (add-hook 'org-shiftup-final-hook
                'windmove-up)

      (add-hook 'org-shiftdown-final-hook
                'windmove-down)

      (add-hook 'org-shiftright-final-hook
                'windmove-right)

      (add-hook 'org-shiftleft-final-hook
                'windmove-left)
    #+end_src
*** Auto-Insert                                                     :AutoInsert:
    #+begin_src emacs-lisp
      (define-skeleton darlan/org-auto-insert-skeleton
        "Insert a template skeleton for a new Org-mode file into current buffer.
                    This only makes sense for empty buffers."
        nil
        "#+TITLE:"
        (darlan/change-to-space (file-name-sans-extension (file-name-nondirectory (buffer-file-name)))) \n
        "#+AUTHOR:Darlan Cavalcante Moreira
      ,#+EMAIL:darcamo@gmail.com
      ,#+SETUPFILE: ~/.emacs.d/lisp/org-setup-file-template/setup.org

      ,* Some Header

      " \n)

      (define-auto-insert "\\.org" 'darlan/org-auto-insert-skeleton)
      ;;(define-auto-insert "\\.org" "my-orgfile-template.org")
    #+end_src
*** Org-bibtex                                                :OrgBibtex:Bibtex:
    #+begin_src emacs-lisp
      (setq org-bibtex-prefix "BIB_")
      (setq org-bibtex-export-arbitrary-fields t)
      ;; (setq org-bibtex-autogen-keys)
    #+end_src
*** Integration with Jekyll
    #+begin_src emacs-lisp
      (setq org-publish-project-alist
            '(
              ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
              ;; xxxxxxxxxxxxxxx Blog posts in org-mode xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
              ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
              ("org-darcamo-posts"
               ;; Path to your org files.
               :base-directory "~/cvs_files/darcamo.github.com/org/posts/"
               :base-extension "org"

               ;; Path to your Jekyll project.
               :publishing-directory "~/cvs_files/darcamo.github.com/_posts/"
               
               :recursive t
               :publishing-function org-html-publish-to-html
               :headline-levels 4 
               :html-extension "html"
               :body-only t ;; Only export section between <body> </body>
               )

              ("org-darcamo-drafts"
               ;; Path to your org files.
               :base-directory "~/cvs_files/darcamo.github.com/org/drafts/"
               :base-extension "org"

               ;; Path to your Jekyll project.
               :publishing-directory "~/cvs_files/darcamo.github.com/_drafts/"
               
               :recursive t
               :publishing-function org-html-publish-to-html
               :headline-levels 4 
               :html-extension "html"
               :body-only t ;; Only export section between <body> </body>
               )

              ("org-static-darcamo"
               :base-directory "~/cvs_files/darcamo.github.com/org/posts/"
               :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
               ;; Maybe change this to a different folder
               :publishing-directory "~/cvs_files/darcamo.github.com/_posts"
               :recursive t
               :publishing-function org-publish-attachment)

              ("darcamo" :components
               ("org-darcamo-posts" "org-darcamo-drafts" "org-static-darcamo"))

              ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
              ;; xxxxxxxxxx Blog posts in org-mode (different location) xxxxxxxxxxxxxxxxxx
              ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
              ("org-darcamo-posts2"
               ;; Path to your org files.
               :base-directory "/mnt/LinuxData/darlan/cvs_files/darcamo.github.com/org/posts/"
               :base-extension "org"

               ;; Path to your Jekyll project.
               :publishing-directory "/mnt/LinuxData/darlan/cvs_files/darcamo.github.com/_posts/"
               
               :recursive t
               :publishing-function org-html-publish-to-html
               :headline-levels 4 
               :html-extension "html"
               :body-only t ;; Only export section between <body> </body>
               )

              ("org-darcamo-drafts2"
               ;; Path to your org files.
               :base-directory "/mnt/LinuxData/darlan/cvs_files/darcamo.github.com/org/drafts/"
               :base-extension "org"

               ;; Path to your Jekyll project.
               :publishing-directory "/mnt/LinuxData/darlan/cvs_files/darcamo.github.com/_drafts/"
               
               :recursive t
               :publishing-function org-html-publish-to-html
               :headline-levels 4 
               :html-extension "html"
               :body-only t ;; Only export section between <body> </body>
               )

              ("org-static-darcamo2"
               :base-directory "/mnt/LinuxData/darlan/cvs_files/darcamo.github.com/org/posts/"
               :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
               ;; Maybe change this to a different folder
               :publishing-directory "/mnt/LinuxData/darlan/cvs_files/darcamo.github.com/_posts"
               :recursive t
               :publishing-function org-publish-attachment)

              ("darcamo2" :components
               ("org-darcamo-posts2" "org-darcamo-drafts2" "org-static-darcamo2"))
              
              ))
    #+end_src
*** Org Table convertion to Github markdown                    :GitHub:Markdown:
    Orgtbl Translator function for the GitHub-Flavored-Markdown(GFM)
    #+begin_src emacs-lisp
      ;; Taken from https://gist.github.com/yryozo/5807243
      (defun orgtbl-to-gfm (table params)
        "Convert the Orgtbl mode TABLE to GitHub Flavored Markdown."
        (let* ((alignment (mapconcat (lambda (x) (if x "|--:" "|---"))
                                     org-table-last-alignment ""))
               (params2
                (list
                 :splice t
                 :hline (concat alignment "|")
                 :lstart "| " :lend " |" :sep " | ")))
          (orgtbl-to-generic table (org-combine-plists params2 params))))
    #+end_src
*** COMMENT Info para o Org-mode (Documentação)
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Lembre de rodar o código abaixo para compilar a Documentação
    #+begin_src sh :var orgpath="~/Org-mode-dev/org-mode" :results silent :tangle no
      cd $orgpath
      make doc/org
    #+end_src

    A código abaixo adiciona a pasta com a documentação mais recente no
    path do Info no emacs.
    #+begin_src emacs-lisp
      (push "~/Org-mode-dev/org-mode/doc/" Info-default-directory-list)
    #+end_src

*** COMMENT Org-Contacts                                           :OrgContacts:
    :PROPERTIES:
    :TANGlE:   no
    :END:
***** Template for org-capture (for wanderlust)                     :Wanderlust:
      For gnus, just remove "wl" from the respective functions.
      #+begin_src emacs-lisp
        (use-package org-contacts
          :ensure t
          :config
          (setq org-contacts-files '("~/Muse/org/contacts.org")))
      #+end_src
***** COMMENT Code to convert from bbdb to org-contacts
      :PROPERTIES:
      :TANGLE: no
      :END:
      This code should be in
      #+begin_src emacs-lisp
        (require 'bbdb)
        (require 'bbdb-com)

        (defvar bbdb-to-org-contacts-record-prefix "***")

        (defvar bbdb-to-org-contacts-record-blanks "   ")

        (defun bbdb-to-org-contacts (to-file)
          "outputs a org-contacts file"
          (interactive (list (read-file-name "Save in file: ")))
          (let* ((filename (expand-file-name to-file))
                 (records (bbdb-records)))
            (find-file filename)
            (while records
              (bbdb-record-to-org-record (car records))
              (setq records (cdr records)))
            ))


        (defun bbdb-record-to-org-record (record)
          "converts a single record"
          (let* (
                 (name    (bbdb-record-name record))
                 (company (bbdb-record-company record))
                 (net     (bbdb-record-net record))
                 (aka     (bbdb-record-aka record))
                 (phone   (bbdb-record-phones record))
                 (address (bbdb-record-addresses record))
                 (notes   (bbdb-record-notes record))
                 )

            (insert
             (format "%s %s\n" bbdb-to-org-contacts-record-prefix name))
            (insert
             (format "%s :PROPERTIES:\n" bbdb-to-org-contacts-record-blanks))

            (when aka
              (insert
               (format "%s :AKA:\t%s\n" bbdb-to-org-contacts-record-blanks
                       (mapconcat (function (lambda(str) str)) aka ", "))))

            (when net
              (insert
               (format "%s :EMAIL:\t%s\n" bbdb-to-org-contacts-record-blanks
                       (mapconcat (function (lambda(str) str)) net " "))))

            (when company
              (insert
               (format "%s :COMPANY:\t%s\n" bbdb-to-org-contacts-record-blanks
                       company)))

            (when phone
              (insert
               (mapconcat
                (function (lambda(rec)
                            (if (stringp (elt rec 1))
                                (format "%s :PHONE_%s:\t%s"
                                        bbdb-to-org-contacts-record-blanks
                                        (upcase (elt rec 0))
                                        (elt rec 1))
                              (let ((len (length rec))
                                    (count 2)
                                    (output (format "%d" (elt rec 1))))
                                (while (< count (1- len))
                                  (setq output
                                        (concat output
                                                (format "-%d"
                                                        (elt rec count))))
                                  (setq count (1+ count)))
                                (format "%s :PHONE_%s:\t%s"
                                        bbdb-to-org-contacts-record-blanks
                                        (upcase (elt rec 0)) output)))))
                phone "\n"))
              (insert "\n"))

            (when notes
              (insert
               (format "%s :NOTES:\t%s\n" bbdb-to-org-contacts-record-blanks notes)))

            (insert
             (format "%s :END:\n" bbdb-to-org-contacts-record-blanks))
            ))


        (provide 'bbdb-to-org-contacts)
      #+end_src
*** Category Icons                                              :Icons:Category:
    /home/darlan/Org-mode-dev/Icons_For_Category
    ~/.emacs.d/Icons_For_Org-Mode_Category
    #+begin_src emacs-lisp
      (setq org-agenda-category-icon-alist
            '(
              ;("Papers" "/home/darlan/Programas_Locais/Emacs-trunk/etc/images/print.xpm" nil nil :ascent center)
              ("Papers" "/usr/share/icons/Humanity/mimes/24/application-pdf.svg" nil nil :ascent  center)
              ("Doutorado" "~/.emacs.d/Icons_For_Org-Mode_Category/registry-book.svg" nil nil :ascent  center)
              ("Book" "~/.emacs.d/Icons_For_Org-Mode_Category/registry-book.svg" nil nil :ascent  center)
              ("Carro" "~/.emacs.d/Icons_For_Org-Mode_Category/car.svg" nil nil :ascent  center)
              ("Escrever" "~/.emacs.d/Icons_For_Org-Mode_Category/write.svg" nil nil :ascent  center)
              ("gtd" "/usr/share/icons/Humanity/status/24/task-past-due.svg" nil nil :ascent  center)
              ("Supelec\\|Francês" "~/.emacs.d/Icons_For_Org-Mode_Category/Flag_of_France.svg" nil nil :ascent  center)
              ("Refile" "/usr/share/icons/Humanity/actions/24/edit-undo.svg" nil nil :ascent  center)
              ("UFC.32" "~/.emacs.d/Icons_For_Org-Mode_Category/gtel25x25.png" nil nil :ascent  center)
              ("UFC.35" "~/.emacs.d/Icons_For_Org-Mode_Category/gtel25x25.png" nil nil :ascent  center)
              ("UFC.42" "~/.emacs.d/Icons_For_Org-Mode_Category/gtel25x25.png" nil nil :ascent  center)
              ("Patent" "~/.emacs.d/Icons_For_Org-Mode_Category/gtel25x25.png" nil nil :ascent  center)
              ("Projeto" "/usr/share/icons/Humanity/places/24/folder.svg" nil nil :ascent  center)
              ("Cíclicas" "~/.emacs.d/Icons_For_Org-Mode_Category/recycle.svg" nil nil :ascent center)
              ("Compras\\|Finanças" "~/.emacs.d/Icons_For_Org-Mode_Category/gold_coins.svg" nil nil :ascent center)
              ("Simulador" "/usr/share/icons/Humanity/devices/24/computer.svg" nil nil :ascent center)
              ("Someday" "~/.emacs.d/Icons_For_Org-Mode_Category/Global_thinking.svg" nil nil :ascent center)
              ("Stanford" "~/.emacs.d/Icons_For_Org-Mode_Category/graduate.svg" nil nil :ascent center)
              ("Notas" "~/.emacs.d/Icons_For_Org-Mode_Category/notes.svg" nil nil :ascent center)
             ))
    #+end_src
* Org-mode Tables in other modes                        :Table:OrgTable:OrgMode:
  Vc instalou o pacote org-table-comment-mode.

  Basta carregar o pacote e chamar o comando org-table-comment-mode para
  ativar tabelas do org-mode em comentários.

  #+begin_src emacs-lisp
    (autoload 'org-table-comment-mode "org-table-comment" "Orgtbl comment mode.  Changes how orgtbl works for modes that don't support block comment regions (like emacs-lisp).." t)
  #+end_src
* Hydra                                                                  :Hydra:
  I installed the hydra package from elpa.

  The package itself does not need any configuration besides the user
  defined "hydras".
*** use-package - START
    #+begin_src emacs-lisp
      (use-package hydra
        :ensure t
        :ensure git-gutter
        :ensure flycheck
        :config    
    #+end_src
*** Change the collor of some hydra faces
    #+begin_src emacs-lisp
        ;; Change the blue face in hydra to a more light blue, since I use dark
        ;; themes
        (set-face-attribute 'hydra-face-blue nil :foreground "deep sky blue")
    #+end_src

*** git-gutter integration                                       :Git:GitGutter:
***** Define hydra to navigate among git hunks                   
      I got this from
      https://github.com/abo-abo/hydra/wiki/Git-gutter

      #+begin_src emacs-lisp
        (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                    :hint nil)
          "
        Git gutter:
          _j_: next hunk        _s_tage hunk     _q_uit
          _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
          ^ ^                   _p_opup hunk
          _h_: first hunk
          _l_: last hunk        set start _R_evision
        "
          ("j" git-gutter:next-hunk)
          ("k" git-gutter:previous-hunk)
          ("h" (progn (goto-char (point-min))
                      (git-gutter:next-hunk 1)))
          ("l" (progn (goto-char (point-min))
                      (git-gutter:previous-hunk 1)))
          ("s" git-gutter:stage-hunk)
          ("r" git-gutter:revert-hunk)
          ("p" git-gutter:popup-hunk)
          ("R" git-gutter:set-start-revision)
          ("q" nil :color blue)
          ("Q" (progn (git-gutter-mode -1)
                      ;; git-gutter-fringe doesn't seem to
                      ;; clear the markup right away
                      (sit-for 0.1)
                      (git-gutter:clear))
               :color blue))
      #+end_src
***** Set the keybinding for hydra-git-gutter/body                 :Keybindings:
      #+begin_src emacs-lisp
        ;; Set the keybinding for hydra-git-gutter/body
        (global-set-key (kbd "C-c C-g") 'hydra-git-gutter/body)
      #+end_src
*** Flycheck integration                                              :flycheck:
***** Define hydra to common flycheck commands
      #+begin_src emacs-lisp
        (defhydra hydra-flychecker (:hint nil)
          "
          Flycheck:
                _j_: (n) next error       _c_: flycheck-buffer    _q_uit
                _k_: (p) previous error   _C_: flycheck-clear    
                ^ ^                   
                _s_: Select checker     _?_: Describe checker
                _l_: List errors        _v_: Verify setup       _V_: Version
              "
          ("j" flycheck-next-error)
          ("k" flycheck-previous-error)
          ("n" flycheck-next-error)
          ("p" flycheck-previous-error)

          ("s" flycheck-select-checker)
          ("l" flycheck-list-errors :color blue)

          ("c" flycheck-buffer)
          ("C" flycheck-clear)

          ("?" flycheck-describe-checker :color blue)
          ("v" flycheck-verify-setup :color blue)

          ("q" nil :color blue)
          ("V" flycheck-version)
          )
      #+end_src
***** Set keybinding "C-c !" to flycheck hydra                     :Keybindings:
      All flycheck commands start with "C-c !", but since we will use our
      new flycheck hydra instead we can set it to "C-c !"
      #+begin_src emacs-lisp
        (add-hook 'flycheck-mode-hook
                  (lambda ()
                  (local-set-key "\C-cf" 'hydra-flychecker/body)
                    ))
      #+end_src
*** use-package - END
    #+begin_src emacs-lisp
    )
    #+end_src
* Outline-minor-mode                                              :Outline:Hook:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Outline-minor-mode xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  #+begin_src emacs-lisp
    ;; Pegue de Dan Davidson
    ;; [[wl:%Org-Mode:"darcamo@gmail.com"/clear@imap.gmail.com:993!#8739yzuyac.fsf@stats.ox.ac.uk][Email from Dan Davison: Re: {Orgmode} Embedding org-sy]]

    (defun darlan/set-up-outline-minor-mode (local-outline-regexp)
      "Set the outline-regex to local-outline-regexp"
      (set (make-local-variable 'outline-regexp) local-outline-regexp)
      (outline-minor-mode t)
      )

    (defun darlan/set-outline-key-bindings ()
      "Set keybindings to the useful outline functions."
      (local-set-key "\C-\M-n" 'outline-next-visible-heading)
      (local-set-key "\C-\M-p" 'outline-previous-visible-heading)
      (local-set-key "\C-\M-u" 'outline-up-heading)
      ;(local-set-key "\C-c\t" 'fold-dwim-org/toggle)
      ;(local-set-key "\C-c\t" 'fold-dwim-toggle)
      )

    (add-hook 'outline-minor-mode-hook
              (lambda ()
                (darlan/set-outline-key-bindings)))
  #+end_src
* Snippets / autoinsert / auto-complete / Skeletons
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxx Snippets / autoinsert / auto-complete / Skeletons xxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Auto-Insert                                                     :AutoInsert:
    This is the general Auto-Insert configuration. The specific mode
    condifuration (and templates) is inside the corresponding mode
    section. Search for the AutoInsert tag to see them all.
    #+begin_src emacs-lisp
      ;; Enable Auto-Insert mode
      (auto-insert-mode t)  ;;; Adds hook to find-files-hook

      ;;; Set directory containing the auto-insert templates (Trailing slash is
      ;;; important) Change this directory to whatever you want
      (setq auto-insert-directory "~/Dropbox/Dotfiles/.emacs.d/auto-insert-templates/")
      (setq auto-insert-query nil) ;;; nil If you don't want to be prompted
                                   ;;; before insertion
    #+end_src
*** COMMENT Auto-complete                                         :AutoComplete:
    :PROPERTIES:
    :TANGlE:   no
    :END:
***** Enable Auto-complete and set default sources
      #+begin_src emacs-lisp
        (use-package auto-complete
          :ensure t
          :config
          (require 'auto-complete-config)
          (ac-config-default)
          (global-auto-complete-mode t)


          ;; (require 'popup) ;; Used to display the auto-complete popup

          ;; (add-to-list 'ac-modes 'org-mode)
          ;; (ac-flyspell-workaround)
          ;; (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)

          ;; Set the folder with the dictionaries (used by
          ;; ac-source-dictionary)

          ;; (add-to-list 'ac-dictionary-directories
          ;; "~/.emacs.d/lisp/auto-complete-1.3/dict")

          ;; (setq ac-fuzzy-enable nil)
          )
      #+end_src
***** Add a few extra keybindings
      #+begin_src emacs-lisp
        (with-eval-after-load "auto-complete"
          ;; Auto-complete defines the M-n and M-p keybindings for the ac-next and
          ;; ac-previous actions, but sometimes I press C-n and C-p instead. Lets
          ;; define them for the same actions.
          (setq ac-use-menu-map t)
          ;; Default settings
          (define-key ac-mode-map "\C-n" 'ac-next)
          (define-key ac-mode-map "\C-p" 'ac-previous)
          ;; (define-key ac-mode-map "<next>" 'ac-next)
          ;; (define-key ac-mode-map "<prior>" 'ac-previous)
          )
      #+end_src
*** Company-mode                                                       :Company:
***** use-package - START
      #+begin_src emacs-lisp
        (use-package company
          :ensure t
          :bind 
          ([C-tab] . company-complete)
          :diminish company-mode
          :config
      #+end_src
***** General                                                      :Keybindings:
      #+begin_src emacs-lisp
        (add-hook 'after-init-hook 'global-company-mode)

        ;; (global-set-key [C-tab] 'company-complete)

        ;; Show quick-access numbers for the first ten candidates.
        (setq company-show-numbers t)
      #+end_src
***** Modes where it is active
      The default value is 'all modes', but I don't want company-mode in
      MATLAB buffers because semantic-matlab is slow.
      #+begin_src emacs-lisp
        (setq company-global-modes '(not matlab-mode))
      #+end_src

***** Don't case replace with the dabbrev backend
      Since I use company mode basically in programming buffers it is
      better if dabbrev don't change case.
      #+begin_src emacs-lisp
        ;; The value of nil means keep them as-is.
        (setq company-dabbrev-downcase nil)

        ;; Since we set company-dabbrev-downcase to nil, then we should also set
        ;; company-dabbrev-ignore-case to any value other than 'keep-prefix.
        (setq company-dabbrev-ignore-case nil)
      #+end_src
***** Auctex Backend
      #+begin_src emacs-lisp
        (with-eval-after-load "latex"
          (company-auctex-init))
      #+end_src
***** use-package - END
      #+begin_src emacs-lisp
        )
      #+end_src
*** COMMENT Helm-company                                                      :HelmMode:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Helm-Company is a helm interface for company mode.  You use company
    as usual and during a completion (with company-mode showing you the
    completions) you can use the provided key-binding to activate
    helm-company and find the best completion with helm. This is
    specially useful in cases where you have a lot of completions and
    helm fuzzy match and partial matches can help you find the correct
    one.

    Alternatively you can use the key-binding directly to start
    completion already with helm.
      
    #+begin_src emacs-lisp
      (use-package helm-company
        :ensure t
        :init
        (bind-key "C-:" 'helm-company company-mode-map)
        (bind-key "C-:" 'helm-company company-active-map)
        )

      ;; (eval-after-load 'helm-company
      ;;   '(progn
      ;;      (define-key company-mode-map (kbd "C-:") 'helm-company)
      ;;      (define-key company-active-map (kbd "C-:") 'helm-company)))
    #+end_src

*** Skeletons                                                        :Skeletons:
    Here are some general skeletons and configurations. The specific mode
    skeletons are inside the corresponding mode section. Search for the
    Skeletons tag to see them all.
***** GTEL Copyright                                                      :GTEL:
      #+begin_src emacs-lisp
        (defun gtel-c++-copyright ()
          (interactive)
          "Inserts the Copyright for GTEL"
          (insert "/***************************************************************************")
          (newline)
          (insert " *   Copyright (C) " (substring (current-time-string) -4) " by Wireless Telecommunications Research Group      *")
          (newline)
          (insert " *   Link-Level Team                                                       *")
          (newline)
          (insert " *   ufc23@gtel.ufc.br                                                     *")
          (newline)
          (insert " *                                                                         *")
          (newline)
          (insert " ***************************************************************************/")
          (newline))
      #+end_src
***** Enable global yasnippets mode (except in some modes)
      #+begin_src emacs-lisp
        (use-package yasnippet
          :ensure t
          :diminish yas-minor-mode
          :config
          (yas-global-mode 1)
          ;; Deactivates yasnippets in ansi-term buffers, since
          ;; yasnippets is not useful there and it breaks TAB
          ;; completion in the term-buffer.
          (add-hook 'term-mode-hook
                    (lambda ()
                      (yas-minor-mode -1)
                      ))
          )
      #+end_src
* Terminal and Ansi-Term                                     :AnsoTerm:Terminal:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxx Terminal (ansi term) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  Várias dicas úteis
  http://jfm3-repl.blogspot.com/2008/11/how-i-use-emacs-ansi-term.html

  Keybinding para o terminal
  http://www.enigmacurry.com/2008/12/26/emacs-ansi-term-tricks/

*** Ansi-term Do What I mean                                       :Keybindings:
    #+begin_src emacs-lisp
      ;; Pegue em http://www.enigmacurry.com/2008/12/26/emacs-ansi-term-tricks/
      ;;  1. If I'm already in an ansi-term, but it's called "*ansi-term*" rename it.
      ;;  2. If I'm already in an ansi-term, but it's called something else, start a new ansi-term called "*ansi-term*"
      ;;  3. If I'm in another non-terminal buffer, switch to a buffer called "*ansi-term*" or create a new one if it doesn't exist

      (use-package term
        :ensure t
        :bind
        ("C-c t" . visit-ansi-term)
        :config
        (defun visit-ansi-term ()
        "If the current buffer is:
           1) a running ansi-term named *ansi-term*, rename it.
           2) a stopped ansi-term, kill it and create a new one.
           3) a non ansi-term, go to an already running ansi-term
              or start a new one while killing a defunt one"
        (interactive)
        (let ((is-term (string= "term-mode" major-mode))
              (is-running (term-check-proc (buffer-name)))
              ;;(term-cmd "/bin/bash")
              (term-cmd "/usr/bin/zsh")
              (anon-term (get-buffer "*ansi-term*")))
          (if is-term
              (if is-running
                  (if (string= "*ansi-term*" (buffer-name))
                      (call-interactively 'rename-buffer)
                    (if anon-term
                        (switch-to-buffer "*ansi-term*")
                      (ansi-term term-cmd)))
                (kill-buffer (buffer-name))
                (ansi-term term-cmd))
            (if anon-term
                (if (term-check-proc "*ansi-term*")
                    (switch-to-buffer "*ansi-term*")
                  (kill-buffer "*ansi-term*")
                  (ansi-term term-cmd))
              (ansi-term term-cmd)))))
        )

      ;; ;(require 'term)
      ;; (autoload 'term-check-proc "term") ; term-check-proc is defined in 'term
      ;; (defun visit-ansi-term ()
      ;;   "If the current buffer is:
      ;;      1) a running ansi-term named *ansi-term*, rename it.
      ;;      2) a stopped ansi-term, kill it and create a new one.
      ;;      3) a non ansi-term, go to an already running ansi-term
      ;;         or start a new one while killing a defunt one"
      ;;   (interactive)
      ;;   (let ((is-term (string= "term-mode" major-mode))
      ;;         (is-running (term-check-proc (buffer-name)))
      ;;         ;;(term-cmd "/bin/bash")
      ;;         (term-cmd "/usr/bin/zsh")
      ;;         (anon-term (get-buffer "*ansi-term*")))
      ;;     (if is-term
      ;;         (if is-running
      ;;             (if (string= "*ansi-term*" (buffer-name))
      ;;                 (call-interactively 'rename-buffer)
      ;;               (if anon-term
      ;;                   (switch-to-buffer "*ansi-term*")
      ;;                 (ansi-term term-cmd)))
      ;;           (kill-buffer (buffer-name))
      ;;           (ansi-term term-cmd))
      ;;       (if anon-term
      ;;           (if (term-check-proc "*ansi-term*")
      ;;               (switch-to-buffer "*ansi-term*")
      ;;             (kill-buffer "*ansi-term*")
      ;;             (ansi-term term-cmd))
      ;;         (ansi-term term-cmd)))))

      ;; (global-set-key (kbd "C-c t") 'visit-ansi-term)

    #+end_src
*** Remote Directory Tracking
    http://www.emacswiki.org/emacs/AnsiTermHints#toc4

    Coloque o código abaixo no .bash_profile na sua conta no gtels0. Com
    isso caso vc abra um ansi-term na sua máquina e dentro dele faça um ssh
    para o gtels0 então o default-directory da sua máquina vai apontar para
    o diretório remoto. Ou seja, se tentar abrir um arquivo o emacs (com o
    tramps) já vai estar na pasta remota.
    #+begin_src sh
      function set-eterm-dir {
          echo -e "\033AnSiTu" "$LOGNAME" # $LOGNAME is more portable than using whoami.
          echo -e "\033AnSiTc" "$(pwd)"
          if [ $(uname) = "SunOS" ]; then
              # The -f option does something else on SunOS and is not needed anyway.
              hostname_options="";
          else
              hostname_options="-f";
          fi
          echo -e "\033AnSiTh" "$(hostname $hostname_options)" # Using the -f option can cause problems on some OSes.
          history -a # Write history to disk.
      }

          # Track directory, username, and cwd for remote logons.
      if [ "$TERM" = "eterm-color" ]; then
          PROMPT_COMMAND=set-eterm-dir
      fi
    #+end_src
*** COMMENT Alternar entre terminais com Ctrl+TAB e Ctrl+Shift+TAB        :Hook:
    :PROPERTIES:
    :TANGLE:   no
    :END:
    Funciona, mas prejudica as outras coisas do terminal (incluindo remote directory tracking)
    #+begin_src emacs-lisp
      (defun eterminal/get-matching-buffer-names (name-to-match)
        (let ((buffers (buffer-list))
              (matching-buffers))
          (dolist (buf buffers matching-buffers)
            (if (eq 0 (string-match name-to-match (buffer-name buf)))
                (setq matching-buffers (cons (buffer-name buf) matching-buffers))))
          matching-buffers))

      (defun eterminal/get-next-buffer (buffer-name-list)
        (let ((name (buffer-name (current-buffer))))
          (setq frst (car buffer-name-list))
          (setq next nil)
          (while buffer-name-list
            (setq n (pop buffer-name-list))
            (if (string= n name)
                (if buffer-name-list
                    (setq next (car buffer-name-list))
                  (setq next frst))))
          next))

      (defun eterminal/switch-to-next-term-buffer ()
        (interactive)
        (let ((buf-list (eterminal/get-matching-buffer-names "*Terminal*")))
          (setq buf-list (sort buf-list 'string<))
          (setq next (eterminal/get-next-buffer buf-list))
          (if next
              (switch-to-buffer next))))

      (defun eterminal/switch-to-prev-term-buffer ()
        (interactive)
        (let ((buf-list (eterminal/get-matching-buffer-names "*Terminal*")))
          (setq buf-list (sort buf-list 'string<))
          (setq buf-list (nreverse buf-list))
          (setq next (eterminal/get-next-buffer buf-list))
          (if next
              (switch-to-buffer next))))

      (add-hook 'term-mode-hook
                (lambda ()
                  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
                  (setq term-term-name "ansi")
                  (setq term-input-chunk-size 1024)
                                              ; term-raw-map on char-moodia varten.
                  (define-key term-raw-map [C-tab] 'eterminal/switch-to-next-term-buffer)
                  (define-key term-raw-map [C-iso-lefttab] 'eterminal/switch-to-prev-term-buffer)
                                              ; term-mode-map on line-moodia varten.
                  (define-key term-mode-map [C-tab] 'eterminal/switch-to-next-term-buffer)
                  (define-key term-mode-map [C-iso-lefttab] 'eterminal/switch-to-prev-term-buffer)))

      (defun eterminal/run-terminal ()
        (interactive)
        (ansi-term "/bin/bash" "Terminal"))

      (define-key ctl-x-map' "t" 'eterminal/run-terminal)
    #+end_src
* Dired                                                                  :Dired:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Dired xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  See http://www.emacswiki.org/emacs/DiredPlus#Dired%2b
*** add-hook to load dired-x                                              :Hook:
    Aparentemente não tem como fazer com que o dired-x seja carregado só
    depois.

    #+begin_src emacs-lisp
      (add-hook 'dired-load-hook
                (function (lambda ()
                            (load "dired-x")
                            ;; Set dired-x global variables here.  For example:
                            ;; (setq dired-guess-shell-gnutar "gtar")
                            ;; (setq dired-x-hands-off-my-keys nil)
                            )))
      (add-hook 'dired-mode-hook
                (function (lambda ()
                            ;; Set dired-x buffer-local variables here.  For example:
                            ;; (setq dired-omit-files-p t)
                            ;; Extensões de arquivos que serão omitidos quando estiver usando o dired-omit-mode
                            (setq dired-omit-extensions '(".svn/" "CVS/" ".o" "~" ".bin" ".lbin" ".so" ".a" ".ln" ".blg" ".bbl" ".elc" ".log" ".glo" ".idx" ".lot" ".fmt" ".tfm" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".fasl" ".ufsl" ".fsl" ".dxl" ".pfsl" ".dfsl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo" ".idx" ".lof" ".lot" ".glo" ".blg" ".bbl" ".cp" ".cps" ".fn" ".fns" ".ky" ".kys" ".pg" ".pgs" ".tp" ".tps" ".vr" ".vrs" ".d" "out" ".fls" ".fdb_latexmk" ".ilg" ".ind" ".pickle" ".nav" ".snm" ".synctex.gz" ".dep" ".dpth" ".run.xml" ".bcf" ".auxlock"))
                            )))
      (require 'dired-x)
    #+end_src
*** Set the switches passed to `ls' for Dired (need to contain l)
    #+begin_src emacs-lisp
      (setq dired-listing-switches "-alh")
    #+end_src
*** Use "!" or "&" in dired to open files (PDF, DOC, etc) in external apps
    #+begin_src emacs-lisp
      (setq dired-guess-shell-alist-user
            (list
             ;; PDF files
             (list "\\.pdf\\'" "evince *")
             ;; doc files
             (list "\\.doc\\'" "libreoffice -o *")
             ;; QT Designer Files
             (list "\\.ui\\'" "designer-qt4 *")
             ))

    #+end_src
*** Dired tries to guess a default target directory
    #+begin_src emacs-lisp
      ;; If non-nil, Dired tries to guess a default target directory.  This
      ;; means: if there is a dired buffer displayed in the next window, use its
      ;; current subdir, instead of the current subdir of this dired buffer.
      (setq dired-dwim-target t)
    #+end_src
*** COMMENT Load dired+                                              :DiredPlus:
    :PROPERTIES:
    :TANGlE:   no
    :END:
    Dired+ has some bug with the new versions of Emacs. Therefore, I'm
    disabling it for now.
    #+begin_src emacs-lisp
      ;; See http://www.emacswiki.org/emacs/DiredPlus#Dired%2b
      ;; for description.
      (require 'dired+ nil t)
    #+end_src
*** dired-details e dired-details+
    #+begin_src emacs-lisp
      (use-package dired-details+
        :ensure t
        )
    #+end_src
***** TODO Veja os pacotes dired-details e dired-details+ no Elpa
*** Image Dired
    #+begin_src emacs-lisp
      (use-package image-dired+
        :ensure t
        :config
        (with-eval-after-load "image-dired"
          (require 'image-dired+))
        )
    #+end_src
* Version Control                                            :VersionControl:VC:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxx Version Control xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  Leia quando der
  http://alexott.net/en/writings/emacs-vcs/

*** Git                                                                    :Git:
***** Magit                                                              :Magit:
      #+begin_src emacs-lisp
        (use-package magit
          :ensure t
          :bind
          ("C-c m" . magit-status)
          :config
          ;; The default is " MRev", but I don't want to waste space in the modeline
          ;; with that
          (setq magit-auto-revert-mode-lighter "")

          ;; Avoid magit warning about 'magit-auto-revert-mode' being activated
          (setq magit-last-seen-setup-instructions "1.4.0")

          ;; Set to nil to indicate magit I have seen the help description and I want
          ;; the default value as in older releases
          (setq magit-push-always-verify nil)
          )
        ;; (global-set-key (kbd "C-c m") 'magit-status)
      #+end_src
***** COMMENT Magit file-notify
      :PROPERTIES:
      :TANGlE:   no
      :END:
      The magit-filenotify library provides an auto update mode for the
      magit status buffer. It uses the file notification support of Emacs
      24.4. Emacs 24.4 is not yet released so a snapshot with file-notify
      support is required.
      #+begin_src emacs-lisp
        ;; Enable magit-filenotify-mode in Magit status buffers
        (add-hook 'magit-status-mode-hook 'magit-filenotify-mode)
      #+end_src
*** vc-check-status
    Currently it only works with Git repositories.

    See https://github.com/thisirs/vc-check-status
    #+begin_src emacs-lisp
      (use-package vc-check-status
        :ensure t
        :config
        (vc-check-status-activate 1)
        )
    #+end_src
*** Use ediff-revision for diff
    http://stackoverflow.com/questions/3712834/getting-vc-diff-to-use-ediff-in-emacs-23-2
    http://www.groupsrv.com/computers/about152826.html
    #+begin_src emacs-lisp
      (autoload 'ediff-load-version-control "ediff.el" nil t)

      (defun ediff-current-buffer-revision ()
        "Run Ediff to diff current buffer's file against VC depot.
      Uses `vc.el' or `rcs.el' depending on `ediff-version-control-package'."
        (interactive)
        (let ((file (or (buffer-file-name)
                        (error "Current buffer is not visiting a file"))))
          (if (and (buffer-modified-p)
                   (y-or-n-p (message "Buffer %s is modified. Save buffer? "
                                      (buffer-name))))
              (save-buffer (current-buffer)))
          (ediff-load-version-control)
          (funcall
           (intern (format "ediff-%S-internal" ediff-version-control-package))
           "" "" nil)))

      ;; This maps "C-x v =", but not "=" in the vc-dired buffer
      (with-eval-after-load "vc-hooks"
        (define-key vc-prefix-map "=" 'ediff-current-buffer-revision))
    #+end_src
* Visual Niceties                                                       :Visual:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Visual Niceties xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Tool-bar-mode / frame title / which-function-mode
    #+begin_src emacs-lisp
      ;; No useless toolbar -> more useful space
      (tool-bar-mode 0)

      ;; Frame Title
      (setq frame-title-format "Emacs: %b ")

      ;; Function display in mode line (very useful)
      ;;(which-function-mode t)
    #+end_src

*** Inhibit Startup Message
    #+begin_src emacs-lisp
      ;; Inhibit startup messages.
      (setq inhibit-startup-message t)
    #+end_src
*** Usability
    #+begin_src emacs-lisp
      ;; print current column number
      (setq column-number-mode t)

      ;; highlight matching parentheses next to cursor
      (show-paren-mode t)

      ;; Set the cursor color to red
      ;; (set-cursor-color "red")

      ;; Para de piscar o cursor
      (blink-cursor-mode 0)

      (setq split-width-threshold 200)
    #+end_src

*** Font Lock
    #+begin_src emacs-lisp
      ;; we want fontification in all modes
      (global-font-lock-mode t)

      ;; maximum possible fontification
      (setq font-lock-maximum-decoration t)
    #+end_src
* Global Keyboard Shortcuts                              :Keybindings:Shortcuts:
  Aqui ficam os keybindings globais, mas note que outras seções podem
  definir alguns outros keybindings globais como os do org-mode, por
  exemplo.
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Keyboard Shortcuts xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Keyboard Bindings                                                 :Keyboard:
    #+begin_src emacs-lisp
      ;; (global-set-key [f1]           'emms-smart-browse)
      ;; (global-1set-key [f1] 'darlan/my-open-calendar)
      ;; (global-set-key [f1] 'mu4e)  ;; This will be set in mu4e config
      (global-set-key [S-f1] 'gtd)
      (global-set-key [C-f1]            'fill-with-comment)
      ;(global-set-key [S-f1]            'mpc)
      (global-set-key [f2]              'delete-window)
      (global-set-key [f3]              'bury-buffer) ; put the current buffer at the end of the buffer list
      (global-set-key [C-f3]            'unbury-buffer) ; change the buffert at the end of the buffer list to the current buffer
      (global-set-key [f4]              'kill-this-buffer) ;C-x k
      (global-set-key [f7]              'ispell)
      ;; (global-set-key [f9] 'my-compile-ede-or-make)
      ;; (global-set-key [C-f9] 'my-save-and-compile-single-file-ede-or-make)
      (global-set-key [f10] 'compile)
      (global-set-key [f11]             'browse-default-dir)
      (global-set-key [S-f11]   'browse-default-dir-in-emacs)
      (global-set-key [C-S-f11]   'gnome-terminal-default-dir)
      (global-set-key [f12]             'ispell-word)
      (global-set-key "\C-z"            'eshell)
      (global-set-key "\M-z"            'ansi-term)
      (global-set-key "\C-co"    'other-frame) ; When there are multiple frames, change to another frame
      (global-set-key "\C-cr"    'revert-buffer)

      ;; Use Ctrl + f12 to lookup the definition of the word at point in the
      ;; Cambridge dictionary and Ctrl + Shift + f12 to lookup for synonyms in
      ;; www.thesaurus.com
      (global-set-key [C-f12]   'lookup-word-definition)
      (global-set-key [C-S-f12] 'lookup-synonym)
      (global-set-key [M-f12] 'thesaurus-choose-synonym-and-replace)

      ;; Use "pause" to set a window as dedicated
      (global-set-key [pause] 'toggle-current-window-dedication)

      ;; Make Emacs use "newline-and-indent" when you hit the Enter key so that you
      ;; don't need to keep using TAB to align yourself when coding.
      ;;(global-set-key "\C-m"            'newline-and-indent)

      ;; Rebind `C-x C-b' for `ibuffer'
      (global-set-key "\C-x\C-b" 'ibuffer)
    #+end_src
*** Mouse Bindings                                                       :Mouse:
    #+begin_src emacs-lisp
      (global-set-key [mouse-9] 'next-buffer)
      (global-set-key [mouse-8] 'previous-buffer)
      (global-set-key [C-mouse-8] 'previous-buffer)
      (global-set-key [C-mouse-9] 'next-buffer)
      (global-set-key [mouse-6] 'outline-previous-visible-heading)
      (global-set-key [mouse-7] 'outline-next-visible-heading)
      (global-set-key [mouse-10] 'org-cycle)
    #+end_src
* Highlight Symbol Mode
  #+begin_src emacs-lisp
    (use-package highlight-symbol
      :ensure t
      )
  #+end_src
* Latex                                                                  :Latex:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Latex xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  Teste o whizzytex quando tiver tempo
*** General skeletons                                                :Skeletons:
    :PROPERTIES:
    :TANGlE:   yes
    :END:
    Tikz and Beamer skeletons are in their own sections.
    #+begin_src emacs-lisp
      (defun latex-skeleton-ac (acronym)
        "Ask for an acronym and inserts \\ac{acronym}. You probably want to call latex-skeleton-acronym instead."
        (interactive "MAcronym: ")
        (insert "\\ac{" acronym "}"))

      (defun latex-skeleton-acronym ()
        "Surround current word with \\ac{} if mark is active of prompts for an acronym and insert \ac{acronym}."
        (interactive)
        (let (pos1 pos2 acronym)
          (if (and transient-mark-mode
                   mark-active)
              (progn (setq pos1 (region-beginning) pos2 (region-end))
                     (setq acronym (buffer-substring pos1 pos2))
                     (delete-region pos1 pos2)
                     (goto-char pos1)
                     (insert "\\ac{" acronym "\}")
                     )
            (latex-skeleton-ac (read-from-minibuffer "Acronym: "))
            )))


      (defun latex-skeleton-math-left-right ( left-symbol right-symbol)
        "Inserts \"\\left left-symbol \\right right-symbol\" and the cursor will be between \"\\left-symbol and \\right\"."
        (let ((region "") pos)
          (insert "\\left " left-symbol " ")
          (setq pos (point))
          (insert " " region " \\right " right-symbol)
          (goto-char pos))
        )

      (defun latex-skeleton-math-left-right-symbol ()
        "Inserts \"\left left-symbol \right right-symbol\". If mark is active surround
        the active region with it."
        (interactive)
        (let (left-symbol right-symbol pos1 pos2 region)
          (setq left-symbol (read-from-minibuffer "Left Symbol: ")
                right-symbol (read-from-minibuffer "Right Symbol: "))

          (if (and transient-mark-mode
                   mark-active)
              (progn (setq pos1 (region-beginning) pos2 (region-end))
                     (setq region (buffer-substring pos1 pos2))
                     (delete-region pos1 pos2)
                     (goto-char pos1)
                     (latex-skeleton-math-left-right left-symbol right-symbol)
                     (insert region)
                     )
            (latex-skeleton-math-left-right left-symbol right-symbol))
          ))
    #+end_src

*** Auctex                                                              :Auctex:
***** use-package - START
      #+begin_src emacs-lisp
        (use-package latex
          :ensure auctex
          :ensure company-auctex
          :config
      #+end_src
***** Autoload
      #+begin_src emacs-lisp
        ;; Auto auctex the first time auctex-mode is required
        ;;(autoload 'auctex-mode "auctex.el" "LaTeX editing mode" t nil)
        ;; Set auctex-mode for tex files.
        (add-to-list 'auto-mode-alist '("\\.tex\\'" . LaTeX-mode))
      #+end_src
***** Styles
      If for some reason auctex does not run some style that it should run,
      then see this awnser
      http://stackoverflow.com/questions/22809587/force-auctex-to-parse-the-whole-document

      : If all files are in the same directory, or in subdirectories under
      : it, open the master file and issue M-x TeX-auto-generate RET and as
      : TeX file or directory insert the directory of the master file and as
      : AUTO lisp directory the auto/ subdirectory of the previous directory.
      : 
      : For instance, if your master file is placed in ~/my-document/, insert
      : ~/my-document/ at the first prompt and ~/my-document/auto at the
      : second one (you can also use relative paths if you prefer them).

      #+begin_src emacs-lisp
        ;; Make AUCTeX aware of style files and multi-file documents right away
        (setq TeX-auto-save t)
        (setq TeX-parse-self t)

        ;; I often use \include or \input in my latex documents
        (setq-default TeX-master nil)
      #+end_src
***** Reftex                                                            :Reftex:
      #+begin_src emacs-lisp
        ;; Plug-in flags for AUCTeX interface.
        (setq reftex-plug-into-AUCTeX t)


        ;; Make reftex also recognize \addbibresource{bib-file} as a
        ;; bibliography. This syntax is used by Biblatex instead of the usual
        ;; \bibliography{bib-file} syntax.
        (with-eval-after-load "reftex"
          (add-to-list 'reftex-bibliography-commands "addbibresource")
          ;; Use "\eqref{...}" to reference equations, instead of "(\ref{...})"
          (setq reftex-label-alist '(AMSTeX))
          )
      #+end_src
***** use-package - END
      #+begin_src emacs-lisp
        )
      #+end_src
*** Beamer                                                              :Beamer:
***** Beamer Minnor mode
      #+begin_src emacs-lisp
        ;; See
        ;; http://nullprogram.com/blog/2013/02/06/
        ;; for tips on how to create minor modes

        ;;; Code:
        (define-minor-mode beamer-mode
          "Minor mode for latex buffers with beamer presentations."
          :lighter ""
          ;; :keymap (let ((map (make-sparse-keymap)))
          ;;           (define-key map (kbd "C-c f") 'insert-foo)
          ;;           map)
          (make-local-variable 'outline-regexp)
          (setq outline-regexp "[   ]*\\\\\\(appendix\\|documentstyle\\|documentclass\\|part\\|chapter\\|section\\|subsection\\|subsubsection\\|paragraph\\|subparagraph\\|begin{frame}\\|end{frame}\\)\\|^[^%\n]*\\\\begin *{document}\\|^[^%\n]*\\\\end *{document}"))

      #+end_src
***** my-beamer-mode function                                           :Reftex:
      #+begin_src emacs-lisp
        (defun my-beamer-mode ()
          "Adds on for when in beamer."
          ;; when in a Beamer file I want to use pdflatex.
          ;; Thanks to Ralf Angeli for this.
          (TeX-PDF-mode 1)  ;; Turn on PDF mode.

          ;; Tell reftex to treat \lecture and \frametitle as section commands
          ;; so that C-c = gives you a list of frametitles and you can easily
          ;; navigate around the list of frames.
          ;; If you change reftex-section-level, reftex needs to be reset so that
          ;; reftex-section-regexp is correctly remade.
          (with-library 'reftex
                        (set (make-local-variable 'reftex-section-levels)
                             '(("section" . 1) ("subsection" . 2) ("frametitle" . 3))))

          (set (make-local-variable 'LaTeX-beamer-item-overlay-flag) nil)

          ;; (setq outline-regexp "[   ]*\\\\\\(appendix\\|documentstyle\\|documentclass\\|part\\|chapter\\|section\\|subsection\\|subsubsection\\|paragraph\\|subparagraph\\|begin{frame}\\|end{frame}\\)\\|^[^%\n]*\\\\begin *{document}\\|^[^%\n]*\\\\end *{document}")

          (beamer-mode t)  ;; Activates my defined beamer minor mode. This will set the outline regex
          (reftex-reset-mode)
          )
      #+end_src
***** Skeletons for Beamer                                           :Skeletons:
      #+begin_src emacs-lisp
        (define-skeleton beamer-skeleton
          "Inserts a Latex beamer skeleton into current buffer.
        This only makes sense for empty buffers."
          nil
          "\\documentclass{beamer}
        % \\documentclass[draft,handout]{beamer}
        % \\documentclass[handout, notes=show/hide/only]{beamer}
        % \\usepackage[orientation=landscape,size=custom,width=16,height=9,scale=0.5,debug]{beamerposter}

        \\mode<presentation>
        {
          \\usetheme{AnnArbor}
        %   Possible Themes:
        %   \"AnnArbor\" \"Antibes\" \"Bergen\" \"Berkeley\" \"Berlin\" \"Boadilla\"
        %   \"boxes\" \"CambridgeUS\" \"Copenhagen\" \"Darmstadt\" \"Dresden\"
        %   \"Frankfurt\" \"Goettingen\" \"Hannover\" \"Ilmenau\" \"JuanLesPins\"
        %   \"Luebeck\" \"Madrid\" \"Malmoe\" \"Marburg\" \"Montpellier\" \"PaloAlto\"
        %   \"Pittsburgh\" \"Rochester\" \"Singapore\" \"Szeged\" \"Warsaw\"
        %   \"default\"
        %
        %   Best Ones:
        %   AnnArbor or CambridgeUS, Dresden or Frankfurt or Singapore, Goettingen or Hannover or Marburg, JuanLesPins, Madrid, PaloAlto, Warsaw

          \\setbeamercovered{transparent} % How uncovered text showld appear. Possible values are: invisible,
                                         % transparent, dynamic, highly dynamic, still covered, still
                                         % covered, again covered.
        %   \\usecolortheme{wolverine}
        %   \\usefonttheme{serif}
        %   \\useinnertheme{circles}
        %   \\useoutertheme{shadow}


        \\usepackage[english]{babel}
        %\\usepackage[latin1]{inputenc} % Use this if the file is encoded with windows encoding
        \\usepackage[utf8]{inputenc} % Use this if the file is encoded with utf-8
        \\usepackage{times}
        \\usepackage[T1]{fontenc}
        \\usepackage{amsmath} % Part of AMS-LaTeX
        % One of the good things of the amsmath package is the math enviroments matrix, pmatrix, bmatrix, Bmatrix, vmatrix and Vmatrix
        \\usepackage{graphicx}
        \\usepackage{pgf}
        %\\usepackage{tikz} % Create graphics in Latex
        %\\usepackage{listings} % Typeset source code for many languages

        % Pegue em http://www.guidodiepen.nl/2009/07/creating-latex-beamer-handouts-with-notes/
        %\\usepackage{handoutWithNotes}
        %\\pgfpagesuselayout{4 on 1 with notes}[a4paper,border shrink=5mm]

        % \\setbeameroption{show notes}
        % \\setbeameroption{show only notes}
        }

        \\title"
          (setq v1 (skeleton-read "Short Title for the Presentation: " "[short title]"))" % [short title] (optional, use only with long paper titles)" \n
          "{"(skeleton-read "Title for the Presentation: ")"}" \n \n
          _ "%\\subtitle{Include Only If Paper Has a Subtitle} % (optional)" \n \n
          "\\author%[Author, Another] % (Optional, use only with lots of authors)" \n
          "{" (skeleton-read "Author(s) - Use \\and to separate: " "Darlan Cavalcante Moreira") "}" \n
          "%{F.~Author\\inst{1} \\and S.~Another\\inst{2}}" \n
          "% - Give the names in the same order as the appear in the paper." \n
          "% - Use the \\inst{?} command only if the authors have different affiliation." \n \n
          "\\institute%[Universities of Somewhere and Elsewhere] % (Short version: optional, but mostly needed)" \n
          "{" (skeleton-read "Instituto: " "Universidade Federal do Ceará") "}" \n
          "% {
        %   \\inst{1}
        %   Department of Computer Science\\\\
        %   University of Somewhere
        %   \\and
        %   \\inst{2}
        %   Department of Theoretical Philosophy\\\\
        %   University of Elsewhere}
          % - Use the \\inst command only if there are several affiliations.
          % - Keep it simple, no one is interested in your street address." \n
          "\\date{" (skeleton-read "Date: " "\\today") "}" \n
          "%\\date[CFP 2003] % (optional, should be abbreviation of conference name)
           %{Conference on Fabulous Presentations, 2003}
           % - Either use conference name or its abbreviation.
           % - Not really informative to the audience, more for people (including
           %   yourself) who are reading the slides online" \n \n \n
           "% xxxxxxxxxx For \"PDF information catalog\", can be left out xxxxxxxxxxxxxxxxxxxx
        \\subject{Subject of the presentation}
        \\keywords{keyword1, kwyword2}

        % If you have a file called \"university-logo-filename.xxx\", where xxx
        % is a graphic format that can be processed by latex or pdflatex,
        % resp., then you can add a logo as follows:

        % \\pgfdeclareimage[height=0.5cm]{university-logo}{university-logo-filename}
        % \\logo{\\pgfuseimage{university-logo}}

        % this shows the outline at the beginning of every section,
        % highlighting the current section
        % \\AtBeginSection[]
        % {
        %   \\begin{frame}<beamer>{}
        %     \\frametitle{Outline}
        %     \\tableofcontents[currentsection]
        %   \\end{frame}
        % }


        % If you wish to uncover everything in a step-wise fashion, uncomment
        % the following command:
        % \\beamerdefaultoverlayspecification{<+->}
        % xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" \n \n \n
        "% xxxxxxxxxxxxxxx Presentation Structure xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        % Structuring a talk is a difficult task and the following structure
        % may not be suitable. Here are some rules that apply for this
        % solution:

        % - Exactly two or three sections (other than the summary).
        % - At *most* three subsections per section.
        % - Talk about 30s to 2min per frame. So there should be between about
        %   15 and 30 frames, all told.

        % - A conference audience is likely to know very little of what you
        %   are going to talk about. So *simplify*!
        % - In a 20min talk, getting the main ideas across is hard
        %   enough. Leave out details, even if it means being less precise than
        %   you think necessary.
        % - If you omit details that are vital to the proof/implementation,
        %   just say so once. Everybody will be happy with that.
        % xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" \n \n \n
        "% xxxxxxxxxxxxxxx Frame Options xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        % [plain] -> Use the \"plain\" option when you want a frame with just a picture or table without anything-else
        % [fragile] -> Use the \"fragile\" option when the verbatim environment or the \\verb command is used inside the frame
        % You must also use the fragile option if you use the lstlisting environment since it is similar to verbatim" \n \n \n
        "% xxxxxxxxxxxxxxx Useful Tips xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        % Blocks are another nice way to make highlighted blocks of text (or anything).
        %
        % \\begin{block}{Simple block}
        %   bla bla bla
        % \\end{block}
        %
        % \\begin{exampleblock}{Example block}
        %   bla bla bla
        % \\end{exampleblock}
        %
        % \\begin{alertblock}{}
        %   bla bla bla
        % \\end{alertblock}
        %
        % Columns are for vertically organizing text.
        % The beamer screen is 128 mm $\\times$ 96 mm.
        % Two columns of 6cm appears to work well. Remember to make
        % allowance for margins around the stuff inside a column. Three
        % columns of 4cm for figures may work as well.
        %   \\begin{columns}[t] % try also others different of [t]
        %     \\begin{column}{6cm}
        %       Stuff inside the first column
        %     \\end{column}
        %     \\begin{column}{6cm}
        %       Stuff inside the second column
        %     \\end{column}
        %   \\end{columns}
        %
        % You can use externally launched movies with
        % \\href{run:default.avi}{click here to open the movie}
        %
        % Besides using overlays you can also emphasize using
        % \\item<1- | alert@1>
        % \\item<2- | alert@2> ...
        %
        % Overlays can also be used with blocks
        % \\begin{block}{Some block}<1->
        %   bla bla bla
        % \\end{block}
        % \\begin{block}{Some other block}<2->
        %   bla bla bla
        % \\end{bloc}
        %
        % Ofcourse overlays can also be used with images
        % \\pgfuseimage{imagem1}<1>
        % \\pgfuseimage{imagem2}<2>
        % \\pgfuseimage{imagem3}<3>
        %
        % Example using columns:
        % \\begin{columns}[t]
        %   \\begin{column}{5cm}
        %     \\pgfdeclareimage[width=5cm]{automato1}{automato1}
        %     \\pgfuseimage{automato1}<1>
        %     \\pgfdeclareimage[width=5cm]{automato2}{automato2}
        %     \\pgfuseimage{automato2}<2>
        %     \\pgfdeclareimage[width=5cm]{automato3}{automato3}
        %     \\pgfuseimage{automato3}<3>
        %     \\pgfdeclareimage[width=5cm]{automato4}{automato4}
        %     \\pgfuseimage{automato4}<4>
        %   \\end{column}
        %   \\begin{column}{5cm}
        %     \\begin{itemize}
        %     \\item <1- | alert@1> Reconhecimento inicia no estado $q_1$
        %     \\item <2- | alert@2> Transição para estado $q_2$
        %     \\item <3- | alert@3> L^e $0$ e fica no estado $q_2$
        %     \\item <4- | alert@4> Transição para o estado final $q_3$
        %     \\end{itemize}
        %     \\[\\xymatrix{
        %      *++[o][F-]{q_1} \\ar@(ul,ul)[] \\ar[r]^{1}
        %      \\ar[d]^{0} & *++[o][F=]{q_3} \\\\
        %      *++[o][F-]{q_2} \\ar[ur]_{1} \\ar@(dl,d)[]_{0} }\\]
        %   \\end{column}
        % \\end{columns}
        % xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" \n \n \n
        "\\begin{document}" \n \n
        "% % xxxxxxxxxxxxxxxxxxxx Some tikz options xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        % % For every picture that defines or uses external nodes, you'll have to
        % % apply the 'remember picture' style. To avoid some typing, we'll apply
        % % the style to all pictures.
        % \\tikzstyle{every picture}+=[remember picture]

        % % By default all math in TikZ nodes are set in inline mode. Change this to
        % % displaystyle so that we don't get small fractions.
        % \\everymath{\\displaystyle}
        % % xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" \n \n \n
        "% \\part{Part 1}

        % beamer makes the titlepage from info above: author, date, title, etc.
        \\begin{frame}
          \\titlepage
        \\end{frame}

        % beamer makes the ToC from sections and subsections below...
        \\begin{frame}{Outline}
        %  \\frametitle{Outline} % Frame Title can be an option of the frame environment or called explicitaly with the \\frametitle command
          \\tableofcontents%[part=1]
        % You might wish to add the option [pausesections]
        % There are also options such as currentsection, currentsubsection, etc.
        \\end{frame}

        % \\begin{frame}
        % \\frametitle{Outline}
        % \\tableofcontents[part=2]
        % \\end{frame}" \n \n \n
        "\\section{Motivation}

        \\subsection{The Basic Problem That We Studied}

        \\begin{frame}{Make Titles Informative.}{Subtitles are optional.} % Use Uppercase Letters
          % - A title should summarize the slide in an understandable fashion
          % for anyone how does not follow everything on the slide itself.
          % Frame transition effects
          \\transboxin<1>
        %   \\transblindshorizontal
        %   \\transblindsvertical
        %   \\transboxin
        %   \\transboxout
        %   \\transdissolve
        %   \\transglitter
        %   \\transsplithorizontalin
        %   \\transsplithorizontalout
        %   \\transsplitverticalin
        %   \\transsplitverticalout
        %   \\transwipe

          \\begin{itemize}
          \\item Use \\texttt{itemize} a lot.
          \\item Use very short sentences or short phrases.
          \\item ação
          \\end{itemize}
        \\end{frame}" \n \n \n
        "\\begin{frame}{Make Titles Informative.}%[options] % A good option when using figures or tables is the \"plain\" option

          You can create overlays\\dots
          \\begin{itemize}
          \\item using the \\texttt{pause} command:
            \\begin{itemize}
            \\item
              First item.
              \\pause
            \\item
              Second item.
            \\end{itemize}
          \\item
            using overlay specifications:
            \\begin{itemize}
            \\item<3->
              First item.
            \\item<4->
              Second item.
              \\note[item]{Uma nota}<1>
            \\end{itemize}
          \\item
            using the general \\texttt{uncover} command:
            \\begin{itemize}
              \\uncover<5->{\\item
                First item.}
              \\uncover<6->{\\item
                Second item.}
            \\end{itemize}
          \\end{itemize}
          \\note[item]{Outra nota}<1> % Without the overlay specification the note will be added in all slides of a frame. This usually is not what you want.
        \\end{frame}" \n \n \n
        "\\subsection{Previous Work}

        \\begin{frame}{Make Titles Informative.}
        \\end{frame}

        \\begin{frame}{Make Titles Informative.}
        \\end{frame}" \n \n \n
        "\\section{Our Results/Contribution}

        \\subsection{Main Results}

        \\begin{frame}{Make Titles Informative.}
        \\end{frame}

        \\begin{frame}{Make Titles Informative.}
        \\end{frame}

        \\begin{frame}{Make Titles Informative.}
        \\end{frame}


        \\subsection{Basic Ideas for Proofs/Implementation}

        \\begin{frame}{Make Titles Informative.}
        \\end{frame}

        \\begin{frame}{Make Titles Informative.}
        \\end{frame}

        \\begin{frame}{Make Titles Informative.}
        \\end{frame}" \n \n \n
        "\\section*{Summary}

        \\begin{frame}{Summary}

          % Keep the summary *very short*.
          \\begin{itemize}
          \\item
            The \\alert{first main message} of your talk in one or two lines.
          \\item
            The \\alert{second main message} of your talk in one or two lines.
          \\item
            Perhaps a \\alert{third message}, but not more than that.
          \\end{itemize}

          % The following outlook is optional.
          \\vskip0pt plus.5fill
          \\begin{itemize}
          \\item
            Outlook
            \\begin{itemize}
            \\item
              Something you haven't solved.
            \\item
              Something else you haven't solved.
            \\end{itemize}
          \\end{itemize}
        \\end{frame}" \n \n \n
        "% All of the following is optional and typically not needed.
        \\appendix
        \\section<presentation>*{\\appendixname}
        \\subsection<presentation>*{For Further Reading}

        \\begin{frame}[allowframebreaks]
          \\frametitle<presentation>{For Further Reading}

          \\begin{thebibliography}{10}

            \\beamertemplatebookbibitems
            % Start with overview books.

          \\bibitem{Author1990}
            A.~Author.
            \\newblock {\\em Handbook of Everything}.
            \\newblock Some Press, 1990.

            \\beamertemplatearticlebibitems
            % Followed by interesting articles. Keep the list short.

          \\bibitem{Someone2000}
            S.~Someone.
            \\newblock On this and that.
            \\newblock {\\em Journal of This and That}, 2(1):50--100,
            2000.
          \\end{thebibliography}
        \\end{frame}

        \\end{document}" \n \n
        (LaTeX-mode)
        (my-beamer-mode) )
      #+end_src
***** Do not prompt for an overlay in itemize-like environments
      #+begin_src emacs-lisp
        (setq LaTeX-beamer-item-overlay-flag nil)
      #+end_src
*** LaTeX-mode-hook                                       :HighlightSymbol:Hook:
    #+begin_src emacs-lisp
      ;; ;; Load auctex and preview-latex (this is only necessary if you installed
      ;; ;; auctex from thr CVS repostory or from a release, instead of, for
      ;; ;; instance the emacs packages.
      ;; (load "auctex.el" nil t t)
      ;; (load "preview-latex.el" nil t t)
      ;; (load "preview.el" nil t t)

      ;; (defun add-auctex-folder-to-path ()
      ;;   (interactive)
      ;;   ;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/auctex/style")
      ;;   ;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/auctex")

      ;;   (add-to-list 'load-path "~/.emacs.d/elpa/auctex-11.86/style")

      ;;   (add-to-list 'load-path "~/.emacs.d/lisp/auctex_cvs/auctex/style/")
      ;;   )


      ;; (autoload 'TeX-add-style-hook "tex")

      (setq LaTeX-mode-hook
            (function (lambda ()
                        ;; Add my local auctex style file folder to the path
                        ;; (add-auctex-folder-to-path)

                        ;; (load-library "beamer") ; If beamer is not found, add the
                        ;;                         ; auctex styles folder to the
                        ;;                         ; load path (TeX-add-style-hook
                        ;;                         ; "beamer" 'my-beamer-mode)
                        (turn-on-reftex)
                        (local-set-key [f5] 'latex-skeleton-acronym)
                        (local-set-key [C-f5] 'latex-skeleton-math-left-right-symbol)
                        (local-set-key (kbd "<C-S-f5>") 'my-latex-textcolor-red)
                        (local-set-key [f6] 'my-save-and-compile)
                        (local-set-key [f9] 'tex-all)
                        ;; Define C-f9 to the compile command. This is useful when you
                        ;; work with latex and Makefiles
                        (local-set-key [C-f9] 'compile)
                        (local-set-key [f10] 'TeX-view)
                        ;; (local-set-key "\C-\M-n" 'outline-next-visible-heading)
                        ;; (local-set-key "\C-\M-p" 'outline-previous-visible-heading)
                        (local-set-key (kbd "<S-M-return>") 'dar/LaTeX-insert-item-inverse-behavior)
                        (darlan/set-outline-key-bindings)
                        (outline-minor-mode t)
                        (setq ispell-filter "tex")

                        ;; Minor-mode that highlights the symbol under
                        ;; point throughout the buffer
                        (highlight-symbol-mode)
                        (darlan/set-highlight-symbol-key-bindings)

                        ;; ;; Activates my beamer minor mode if the file name is "presentation.tex"
                        ;; (if (string-equal (file-name-nondirectory buffer-file-name) "presentation.tex")
                        ;;     (beamer-mode))
                        )))
    #+end_src
*** Useful Functions and configurations                    :FunctionDefinitions:
***** Functions
      #+begin_src emacs-lisp
        ;; Function to run latex on the master file
        (defun tex-all (arg)
            "Run TeX-command-master (from auctex) with arg. Use t as arg
        to confirm overwrite."
          (interactive "P") 
          (let ((TeX-command-force "Latex"))
            ;;(TeX-save-document (TeX-master-file))
            (basic-save-buffer)
            (TeX-command-master arg)
            )
          )

        (defun my-latex-textcolor-red ()
          "Surround current region with \textcolor{red}{ } if mark is active of prompts for a text and insert \textcolor{red}{acronym}."
          (interactive)
          (let (pos1 pos2 text)
            (if (and transient-mark-mode
                     mark-active)
                (my-latex-surround-textcolor-red (region-beginning) (region-end))
              (insert "\\textcolor{red}{" (read-from-minibuffer "Text in red: ") "}")
              )))

        (defun my-latex-surround-textcolor-red (beg end)
          "Surround the region with \textcolor{red}{ }"
          (interactive "r")
          (save-restriction
            (narrow-to-region beg end)
            (goto-char (point-min))
            (insert "\\textcolor{red}{")
            (goto-char (point-max))
            (insert "}")))

        ;; Bound this to S-M-return
        (defun dar/LaTeX-insert-item-inverse-behavior ()
          "Similar to LaTeX-insert-item, but reverse the behavior of the
                LaTeX-beamer-item-overlay-flag variable. That is if
                LaTeX-beamer-item-overlay-flag is t then LaTeX-insert-item will
                ask for an overlay specifications, while
                LaTeX-insert-item-inverse-behavior will not and vice-versa."
          (interactive)
          ;; We only want to change LaTeX-beamer-item-overlay-flag locally in the
          ;; dar/LaTeX-insert-item-inverse-behavior function
          (let (LaTeX-beamer-item-overlay-flag (not LaTeX-beamer-item-overlay-flag))
            (LaTeX-insert-item))
          )
      #+end_src
***** Configurations
      #+begin_src emacs-lisp
        (with-eval-after-load "latex"
          ;; Extra indentation for lines beginning with an item.
          (setq LaTeX-item-indent 0)

          ;; List of regexps matching suffixes of files to be deleted.
          (setq LaTeX-clean-intermediate-suffixes (quote ("\\.aux" "\\.bbl" "\\.blg" "\\.brf" "\\.fot" "\\.glo" "\\.gls" "\\.idx" "\\.ilg" "\\.ind" "\\.lof" "\\.log" "\\.lot" "\\.out" "\\.toc" "\\.url" "\\.snm" "\\.nav" "\\.fdb_latexmk" "\\.run\\.xml" "\\.fls" "\\.bcf")))

          ;; Add the .synctex.gz file to the list of files to be cleared by the
          ;; "Clear All" command
          (add-to-list 'LaTeX-clean-output-suffixes "\\.synctex\\.gz")

          ;; Used for fold-mode in latex
          (setq TeX-fold-macro-spec-list (quote (("[f]" ("footnote")) ("[c]" ("cite")) ("[l]" ("label")) ("[r]" ("ref" "pageref")) ("[i]" ("index")) ("*" ("item")) ("..." ("dots")) (1 ("part" "chapter" "section" "subsection" "subsubsection" "paragraph" "subparagraph" "part*" "chapter*" "section*" "subsection*" "subsubsection*" "paragraph*" "subparagraph*" "emph" "textit" "textsl" "textmd" "textrm" "textsf" "texttt" "textbf" "textsc" "textup" "ac" "acf" "acs" "acp" "acsp" "acfp" "acused")) (2 ("textcolor")))))

          (setq TeX-output-view-style (quote (("^dvi$" ("^landscape$" "^pstricks$\\|^pst-\\|^psfrag$") "%(o?)dvips -t landscape %d -o && gv %f") ("^dvi$" "^pstricks$\\|^pst-\\|^psfrag$" "%(o?)dvips %d -o && ps2pdf %f && evince %s.pdf") ("^dvi$" ("^\\(?:a4\\(?:dutch\\|paper\\|wide\\)\\|sem-a4\\)$" "^landscape$") "%(o?)xdvi %dS -paper a4r -s 0 %d") ("^dvi$" "^\\(?:a4\\(?:dutch\\|paper\\|wide\\)\\|sem-a4\\)$" "%(o?)xdvi %dS -paper a4 %d") ("^dvi$" ("^\\(?:a5\\(?:comb\\|paper\\)\\)$" "^landscape$") "%(o?)xdvi %dS -paper a5r -s 0 %d") ("^dvi$" "^\\(?:a5\\(?:comb\\|paper\\)\\)$" "%(o?)xdvi %dS -paper a5 %d") ("^dvi$" "^b5paper$" "%(o?)xdvi %dS -paper b5 %d") ("^dvi$" "^letterpaper$" "%(o?)xdvi %dS -paper us %d") ("^dvi$" "^legalpaper$" "%(o?)xdvi %dS -paper legal %d") ("^dvi$" "^executivepaper$" "%(o?)xdvi %dS -paper 7.25x10.5in %d") ("^dvi$" "." "%(o?)xdvi %dS %d") ("^pdf$" "." "evince %s.pdf") ("^html?$" "." "netscape %o"))))

          ;; (setq font-latex-user-keyword-classes (quote (("textcolor{red}" ("textcolor{red}") (:foreground "red") (command 1)) ("textcolor{blue}" ("textcolor{blue}") (:foreground "blue") (command 1)) ("acronym" ("ac" "acf" "acs" "acl" "acp" "acsp" "aclp" "acfp" "acused") (:foreground "blue") (command 1)) ("acronym2" ("acro") nil (command 2)))))

          ;; Set this to nil and Auctex won't fontify subscript and superscript
          ;; strings. I prefer nil because I don't like to change the width of the
          ;; fonts
          (setq font-latex-fontify-script nil)

          ;; I want to use pdflatex by default
          (set-default 'TeX-PDF-mode t)

          (set-default 'TeX-source-correlate-mode t)

          (set-default 'TeX-fold-mode t)
          )
      #+end_src
*** Preview                                                  :PreviewLatex:Hook:
    Esse preview corresponde a uma biblioteca elisp independente (e
    diferente) do preview usado no Auctex.

    #+begin_src emacs-lisp
      ;; (autoload 'LaTeX-preview-setup "preview")
      ;; (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)

      ;; ;; http://www.emacswiki.org/emacs/LaTeXMathPreview
      ;; ;; Não confundir com o preview-latex que vem com o auctex
      ;; ;; O pacote latex-math-preview tem algumas funcionalidades úteis
      ;; ;; diferentes do preview-latex. Chame as funções abaixo
      ;; (autoload 'latex-math-preview-expression "latex-math-preview" nil t)
      ;; (autoload 'latex-math-preview-insert-symbol "latex-math-preview" nil t)
      ;; (autoload 'latex-math-preview-save-image-file "latex-math-preview" nil t)
      ;; ;; Também instalei o pacote latex-math-preview-extra-data.el, mas não
      ;; ;; sei se foi ativado (provavelemnte não e preciso fazer o laod dele).
      ;; (with-eval-after-load "latex-math-preview"
      ;;      (load-library "latex-math-preview-extra-data")
      ;;      (add-to-list 'latex-math-preview-text-symbol-datasets
      ;;                   latex-math-preview-textcomp-symbol-data)
      ;;      (add-to-list 'latex-math-preview-text-symbol-datasets
      ;;                   latex-math-preview-pifont-zapf-dingbats-symbol-data)
      ;;      (add-to-list 'latex-math-preview-text-symbol-datasets
      ;;                   latex-math-preview-pifont-symbol-fonts-symbol-data)
      ;;      )

      (autoload 'latex-math-preview-expression "latex-math-preview" nil t)
      (autoload 'latex-math-preview-insert-symbol "latex-math-preview" nil t)
      (autoload 'latex-math-preview-save-image-file "latex-math-preview" nil t)
      (autoload 'latex-math-preview-beamer-frame "latex-math-preview" nil t)
    #+end_src
*** Bibtex                                                              :Bibtex:
***** Outline support                                                     :Hook:
      #+begin_src emacs-lisp
        (add-hook 'bibtex-mode-hook
                  (lambda ()
                    (darlan/set-up-outline-minor-mode "@")))
      #+end_src
*** Abbrev-mode                                                         :Abbrev:
    Emacs has a nice feature to expand abbreviations. If for example, you
    wanted an abbreviation for ‘Your Name’ to be ‘yn’, just type ‘yn’ and
    with your point after the ‘n’ do ‘C-xaig’ (mnemonic add inverse global)
    and enter the expansion, in this case ‘Your Name’. In the future,
    whenever you type ‘yn’ your name will be inserted. The abbrevs are
    automatically saved between sessions in a file ~/.abbrev_defs.

    #+begin_src emacs-lisp
      ;(define-abbrev-table 'TeX-mode-abbrev-table nil "Abbrev table for latex documents")

      (define-abbrev-table 'TeX-mode-abbrev-table nil)
      (add-hook 'LaTeX-mode-hook (lambda ()
                                 (setq abbrev-mode t)
                                 (setq local-abbrev-table TeX-mode-abbrev-table)))
    #+end_src
*** Indent-Guide-mode                                              :IndentGuide:
    #+begin_src emacs-lisp
      (add-hook 'LaTeX-mode-hook (lambda ()
                                   (indent-guide-mode t)))
    #+end_src
*** Tikz and PGF                                                          :Tikz:
***** Better paragraph fill for tikz
      #+begin_src emacs-lisp
        (with-eval-after-load "latex"
          ;; Add tikzpicture and scope to the list of environments with special
          ;; indentation.
          (add-to-list 'LaTeX-indent-environment-list '("tikzpicture"))
          (add-to-list 'LaTeX-indent-environment-list '("scope"))
          )
      #+end_src
***** Define a tikz-mode derived from latex mode
      #+begin_src emacs-lisp
        (define-derived-mode tikz-mode
          LaTeX-mode "Tikz-Mode"
          (setq case-fold-search nil))
        
        ;; (define-key hypertext-mode-map
        ;;   [down-mouse-3] 'do-hyper-link)
      #+end_src
***** Add some tikz commands as font-lock keywords
      #+begin_src emacs-lisp
        (font-lock-add-keywords 'tikz-mode
                                '(("\\(\\\\\\(tikz\\|tikzset\\|pgfdeclarelayer\\|pgfsetlayers\\)\\){" 1 font-lock-warning-face t)))
        
        ;; Add \draw, \path and \node and \matrix as keywords.
        (font-lock-add-keywords 'tikz-mode
                                '(("\\(\\\\\\(draw\\|path\\|node\\|matrix\\|coordinate\\)\\)" 1 font-lock-warning-face t)))
      #+end_src
***** Tell Emacs to open files with the extension .tikz or .pgf  in tikz-mode
      #+begin_src emacs-lisp
        ;; Tell Emacs to open files with the extension .tikz in LaTeX-mode
        (add-to-list 'auto-mode-alist '("\.tikz$" . tikz-mode))
        (add-to-list 'auto-mode-alist '("\.pgf$" . tikz-mode))
      #+end_src
***** Skeletons for Tikz                                             :Skeletons:
      #+begin_src emacs-lisp
        (define-skeleton tikz-latex-skeleton
          "Insert a Latex tikz skeleton into current buffer.
        This only makes sense for empty buffers."
          nil
          "\\documentclass{standalone}
        
        \\usepackage[utf8]{inputenc} % Use this if the file is encoded with utf-8
        \\usepackage{lmodern}  % Very good to use with the fontenc package to generate good PDFs
        \\usepackage[T1]{fontenc}  % Important. See http://tex.stackexchange.com/questions/664/why-should-i-use-usepackaget1fontenc
        \\usepackage{amsmath,amssymb} % Part of AMS-LaTeX
        % One of the good things of the amsmath package is the math enviroments matrix, pmatrix, bmatrix, Bmatrix, vmatrix and Vmatrix
        \\usepackage{tikz}
        \\usetikzlibrary{positioning}
        \\usetikzlibrary{shadows}
        \\usetikzlibrary{backgrounds}
        \\usetikzlibrary{shapes}
        \\usetikzlibrary{shapes.multipart}
        \\usetikzlibrary{matrix}
        \\usetikzlibrary{intersections}
        \\usetikzlibrary{fit}
        %\\usetikzlibrary{decorations.pathmorphing}
        \\usetikzlibrary{decorations.pathreplacing}
        
        % My custom package with my math definitions
        % Located at /home/darlan/Dropbox/Arquivos de Instalação/Latex_Packages/MathDefinitions.sty
        \\usepackage{MathDefinitions}
        
        \\begin{document}
        
        \\begin{tikzpicture}[framed]
          \\draw (0,0) -- (1,1);
        \\end{tikzpicture}
        
        \\end{document} "> \n \n
        "%%% Local Variables:
        %%% mode: tikz
        %%% TeX-PDF-mode: t
        %%% TeX-master: t
        %%% firestarter: tex-all
        %%% End: "> \n \n
        
        (TeX-PDF-mode t))
      #+end_src
***** Add .tikz and .pgf to file extensions known by Auctex
      Without this, Auctex won't compile files with extensions ".tikz" or
      ".pgf" even if they are valid latex files.
      #+begin_src emacs-lisp
        ;; The TeX-file-extensions variable is defined only after latex.el (from
        ;; auctex) has been loaded.
        (with-eval-after-load "latex"
          (add-to-list 'TeX-file-extensions "tikz")
          (add-to-list 'TeX-file-extensions "pgf")
          )
      #+end_src
*** COMMENT Auto-complete integration                             :AutoComplete:
    :PROPERTIES:
    :TANGlE:   no
    :END:
***** Auctex sources
      #+begin_src emacs-lisp
      ;; ac-auctex-setup is defined in the auto-complete-auctex.el file, which
      ;; define some auto-complete sources with auctex.
      (autoload 'ac-auctex-setup "auto-complete-auctex" nil t)
      (add-hook 'LaTeX-mode-hook 'ac-auctex-setup)
      #+end_src
***** tikz source                                                         :Tikz:
      Define tikz related sources
      #+begin_src emacs-lisp
        ;; The list of libraries was taken from the pgf/tikz manual.
        ;; See also http://tex.stackexchange.com/questions/42611/list-of-available-tikz-libraries-with-a-short-introduction
        (defun ac-tikz-libraries-candidate ()
          (list
           "arrows"
           "automata"
           "backgrounds"
           "calc"
           "calendar"
           "chains"
           "circuits"
           "decorations"
           "decorations.pathreplacing"
           "decorations.pathmorphing"
           "decorations.markings"
           "decorations.footprints"
           "decorations.shapes"
           "decorations.text"
           "decorations.fractals"
           "er"  ;; Entity Relationship Diagram Drawing
           "external"
           "matrix"
           "mindmap"
           "folding"  ;; Paper Folding Diagrams Library
           "intersections"
           "patterns"
           "petri"
           "plothandlers"
           "plotmarks"
           "profiler"
           "shadings"
           "shadows"
           "shapes.geometric"
           "shapes.misc"
           "shapes.symbols"
           "shapes.arrows"
           "shapes.multipart"
           "shapes.callouts"
           "spy"
           "svg.path"
           "through"
           "trees"
           )
          )

        (with-eval-after-load "auto-complete"
          (ac-define-source tikz-libraries
                            '(
                              (candidates . ac-tikz-libraries-candidate)
                              (symbol . "d")
                              (prefix . "usetikzlibrary{\\(.*\\)")
                              (requires   . 0)))     
          )

        ;; Add the tikz source
        (add-hook 'LaTeX-mode-hook
                  (lambda ()
                    ;; Add yasnippets source to ac-sources
                    (add-to-list 'ac-sources 'ac-source-tikz-libraries)
                    ))
      #+end_src

      (defface ac-my-tikz-candidate-face
        '((t (:background "pale green" :foreground "black")))
        "Face for ropemacs candidate."
        :group 'auto-complete)
***** yasnippets source                                              :Yasnippet:
      #+begin_src emacs-lisp
        (add-hook 'LaTeX-mode-hook
                  (lambda ()
                    ;; Add yasnippets source to ac-sources
                    (add-to-list 'ac-sources 'ac-source-yasnippet)
                    ))
      #+end_src

***** COMMENT Math source
      :PROPERTIES:
      :TANGlE:   no
      :END:
      Baixei o pacote ac-math em http://code.google.com/p/ac-math/

      #+begin_src emacs-lisp
        (use-package ac-math
          :ensure t
          :config
          ;; Function to append the math sources to auto-complete to the default
          ;; ac-sources
          (defun ac-latex-mode-setup ()
            (setq ac-sources
                  (append '(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands ac-source-dictionary)
                          ac-sources)))

          ;; Add the ac-latex-mode-setup function to the LaTeX-mode-hook
          (add-hook 'LaTeX-mode-hook 'ac-latex-mode-setup))
      #+end_src
*** COMMENT How to configure Emacs and AUCTeX to work with a PDF viewer
    http://mathieu.3maisons.org/wordpress/how-to-configure-emacs-and-auctex-to-work-with-a-pdf-viewer
*** COMMENT Tex-Texify
    :PROPERTIES:
    :TANGlE:   no
    :END:
    http://www.emacswiki.org/emacs/TN#toc8

    In AUCTeX-mode one uses `TeX-command´ to invoke the next compilation
    step for the current LaTeX-document. Note, that this command is bound
    to the key-sequence C-c C-c.

    If one has some citations and references in the document one needs to
    call `TeX-command´ multiple times. Within the following code the
    command `TeX-texify´ is defined which runs as often as it is suggested
    by `TeX-command´.

    *Use "C-c C-a" to run the command Tex-texify in a Latex buffer.*

    #+begin_src emacs-lisp
      (defun TeX-command-default (name)
        "Next TeX command to use. Most of the code is stolen from `TeX-command-query'."
        (cond ((if (string-equal name TeX-region)
                   (TeX-check-files (concat name "." (TeX-output-extension))
                                    (list name)
                                    TeX-file-extensions)
                 (TeX-save-document (TeX-master-file)))
               TeX-command-default)
              ((and (memq major-mode '(doctex-mode latex-mode))
                    (TeX-check-files (concat name ".bbl")
                                     (mapcar 'car
                                             (LaTeX-bibliography-list))
                                     BibTeX-file-extensions))
               ;; We should check for bst files here as well.
               TeX-command-BibTeX)
              ((TeX-process-get-variable name
                                         'TeX-command-next
                                         TeX-command-Show))
              (TeX-command-Show)))


      (defcustom TeX-texify-Show t "Start view-command at end of TeX-texify?" :type 'boolean :group 'TeX-command)
      (defcustom TeX-texify-max-runs-same-command 5 "Maximal run number of the same command" :type 'integer :group 'TeX-command)

      (defun TeX-texify-sentinel (&optional proc sentinel)
        "Non-interactive! Call the standard-sentinel of the current LaTeX-process.
      If there is still something left do do start the next latex-command."
        (set-buffer (process-buffer proc))
        (funcall TeX-texify-sentinel proc sentinel)
        (let ((case-fold-search nil))
          (when (string-match "\\(finished\\|exited\\)" sentinel)
            (set-buffer TeX-command-buffer)
            (unless (plist-get TeX-error-report-switches (intern (TeX-master-file)))
              (TeX-texify)))))

      (defun TeX-texify ()
        "Get everything done."
        (interactive)
        (let ((nextCmd (TeX-command-default (TeX-master-file)))
              proc)
          (if (and (null TeX-texify-Show)
                   (equal nextCmd TeX-command-Show))
              (when  (called-interactively-p 'any)
                (message "TeX-texify: Nothing to be done."))
            (TeX-command nextCmd 'TeX-master-file)
            (when (or (called-interactively-p 'any)
                      (null (boundp 'TeX-texify-count-same-command))
                      (null (boundp 'TeX-texify-last-command))
                      (null (equal nextCmd TeX-texify-last-command)))
              (mapc 'make-local-variable '(TeX-texify-sentinel TeX-texify-count-same-command TeX-texify-last-command))
              (setq TeX-texify-count-same-command 1))
            (if (>= TeX-texify-count-same-command TeX-texify-max-runs-same-command)
                (message "TeX-texify: Did %S already %d times. Don't want to do it anymore." TeX-texify-last-command TeX-texify-count-same-command)
              (setq TeX-texify-count-same-command (1+ TeX-texify-count-same-command))
              (setq TeX-texify-last-command nextCmd)
              (and (null (equal nextCmd TeX-command-Show))
                   (setq proc (get-buffer-process (current-buffer)))
                   (setq TeX-texify-sentinel (process-sentinel proc))
                   (set-process-sentinel proc 'TeX-texify-sentinel))))))

      (add-hook 'LaTeX-mode-hook '(lambda () (local-set-key (kbd "C-c C-a") 'TeX-texify)))

    #+end_src
*** Use Latexmk with Auctex
    #+begin_src emacs-lisp
      ;; This will add the Latexmk command to the list of commands that you can
      ;; run with "C-c C-c" in a latex buffer.
      (add-hook 'LaTeX-mode-hook (lambda ()
                                   (push 
                                    '("Latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
                                      :help "Run Latexmk on file")
                                    TeX-command-list)))
    #+end_src
* E-Mail                                                                 :Email:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx E-Mail xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** General
    #+begin_src emacs-lisp
      ;; Tell Emacs my E-Mail address
      ;; Without this Emacs thinks my E-Mail is something like darlan@ubuntu-asus
      (setq user-mail-address "darcamo@gmail.com")
    #+end_src
*** COMMENT Wanderlust                                        :crypt:Wanderlust:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v1

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
9AwxfzDsGvXa0IZR
=zpuc
-----END PGP MESSAGE-----
*** mu4e                                                                  :mu4e:
    Veja http://www.brool.com/index.php/using-mu4e

    Veja configurações avançadas para ver depois em
    http://zmalltalker.com/linux/mu.html

    - Handy Keys (headers view) in mu4e
      F — to forward
      C — to compose
      O — opens an attachment in detail view
      aV — views mail in HTML mode
      ji, j!, ja — jump to mailbox. (See mu4e-maildir-shortcuts above).
      mi, m!, ma — move message to mailbox
      V — turn on/off duplicates (handy if you’re looking at All Mail)
      W — turn on/off related messagesl
      / — narrow the current view via search
      ?, d, m — mark for unread / delete / move
      x — execute deferred marks

      #+begin_src emacs-lisp
        ;(require 'mu4e)
      #+end_src
***** use-package - START
      #+begin_src emacs-lisp
        ;;(with-library 'mu4e
        (use-package mu4e
          :bind 
          ([f1] . mu4e)
          ("C-x m" . compose-mail)
          :config
      #+end_src
***** General
      use "y" in mu4e to alternate between mesage and summary.

      offlineimap need to be configured and the mail dir is ~/Maildir/
      #+begin_src emacs-lisp
        ;; Configuration from
        ;; http://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html#Gmail-configuration
        ;;(require 'mu4e)

        ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
        (setq mu4e-sent-messages-behavior 'trash)

        (setq mu4e-use-fancy-chars t)

        ;; allow for updating mail using 'U' in the main view:
        (setq mu4e-get-mail-command "offlineimap")

        ;; Automatically update every 5 minutes
        (setq mu4e-update-interval 300)

        ;; (add-hook 'mu4e-index-updated-hook
        ;;           (defun mu-index-updated-notify ()
        ;;             (shell-command "notify-send \"Mu index updated\"")))

        ;; don't keep message buffers around
        (setq message-kill-buffer-on-exit t)

        ;; I want my address to always be in the CC when replying to mail
        (setq mu4e-compose-keep-self-cc t)

        ;; The default is 10, but I like to see more lines than that.
        (setq mu4e-headers-visible-lines 13)

        ;; Sometimes I press space one more time then required to go to the end of
        ;; a message and it moves to the next message, but I don't like
        ;; that. Therefore, I set mu4e-view-scroll-to-next to nil to avoid that.
        (setq mu4e-view-scroll-to-next nil)
      #+end_src
***** Appearance
      Set the color of the replied face. The default value it to similar to
      unread messages for my taste.
      #+begin_src emacs-lisp
        ;; (set-face-foreground 'mu4e-replied-face "aquamarine")
        ;; (set-face-foreground 'mu4e-replied-face "medium spring green")
        (set-face-foreground 'mu4e-replied-face "tan")
        ;; (set-face-foreground 'mu4e-replied-face "SandyBrown")

        (set-face-foreground 'mu4e-forwarded-face "tan")
      #+end_src
***** Default folders (draft, sent, trash)
      #+begin_src emacs-lisp
        ;; default
        (setq mu4e-maildir "~/Maildir")

        (setq mu4e-drafts-folder "/Gmail/[Gmail].Rascunhos")
        (setq mu4e-sent-folder   "/Gmail/[Gmail].E-mails enviados")
        (setq mu4e-trash-folder  "/Gmail/[Gmail].Lixeira")
        ;; (setq mu4e-refile-folder "/[Gmail]/Todos os e-mails")
      #+end_src
***** Compose Mail
      #+begin_src emacs-lisp
        ;; Set the mail-user-agent to the mu4e-user-agent.
        ;; With this if you type the usual keybinding "C-x m" emacs will use the
        ;; mu4e:compose mode
        (if (boundp 'mail-user-agent)
                    (setq mail-user-agent 'mu4e-user-agent))
      #+end_src
***** Keybindings                                                  :Keybindings:
      #+begin_src emacs-lisp
        ;; Sintax: key 'function mod-map
        (bind-key [backspace] 'scroll-down-command mu4e-headers-mode-map)

        (bind-key [backspace] 'scroll-down-command mu4e-view-mode-map)
        (bind-key [end] 'move-end-of-line mu4e-view-mode-map)
        (bind-key [home] 'move-beginning-of-line mu4e-view-mode-map)
      #+end_src
***** Bookmarks and shortcuts
******* Maildir Shortcuts
        Handy shortcuts so that you can quickly switch to your Inbox --
        press ``ji''.
        #+begin_src emacs-lisp
          ;; setup some handy shortcuts
          ;; you can quickly switch to your Inbox -- press ``ji''
          ;; then, when you want archive some messages, move them to
          ;; the 'All Mail' folder by pressing ``ma''.
          (setq mu4e-maildir-shortcuts
                '( ("/Gmail/INBOX"               . ?i)
                   ("/Gmail/[Gmail].E-mails enviados"   . ?e)
                   ("/Gmail/[Gmail].Lixeira"       . ?l)
                   ("/Gmail/[Gmail].Todos os e-mails"    . ?t)
                   ("/Gtel/INBOX"               . ?I)
                   ("/Gtel/[Gmail].E-mails enviados"   . ?E)
                   ("/Gtel/[Gmail].Lixeira"       . ?L)
                   ("/Gtel/[Gmail].Todos os e-mails"    . ?T)
                   ("/Gtel/ResearchGate"       . ?r)
                   ("/Gtel/Call of Papers"       . ?c)
                   ("/Gmail/Stanford"       . ?s)
                   ))

        #+end_src

******* Search Bookmarks
        #+begin_src emacs-lisp
          ;; Bookmark for big messages
          (add-to-list 'mu4e-bookmarks
            '("size:5M..500M" "Big messages" ?b))

          (add-to-list 'mu4e-bookmarks
            '("maildir:/Gmail/Inbox flag:unread" "Gmail Inbox (unread)" ?i))

          (add-to-list 'mu4e-bookmarks
                      '("maildir:/Gtel/Inbox flag:unread" "GTEL Inbox (unread)" ?I))

          (add-to-list 'mu4e-bookmarks
            '("maildir:/Gmail/Newsletter.IPython flag:unread" "IPython (unread)" ?p))

          (add-to-list 'mu4e-bookmarks
            '("maildir:\"/Gmail/Newsletter.Numpy and Scipy\" flag:unread" "Numpy and Scipy (unread)" ?n))

          (add-to-list 'mu4e-bookmarks
            '("maildir:/Gmail/Newsletter.Org-Mode flag:unread" "Org-Mode (unread)" ?o))

          (add-to-list 'mu4e-bookmarks
            '("maildir:\"/Gmail/Stanford\" flag:unread" "Stanford (unread)" ?s))

          (add-to-list 'mu4e-bookmarks
            '("flag:unread AND NOT flag:trashed AND NOT maildir:/Gtel/[Gmail].Lixeira AND NOT maildir:/Gmail/[Gmail].Lixeira" "Unread messages" ?u))

        #+end_src
***** SMTP                                                                :SMTP:
      #+begin_src emacs-lisp
        (use-package smtpmail
          :ensure t
          :config
          (setq message-send-mail-function 'smtpmail-send-it
                starttls-use-gnutls t
                ;; smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
                ;;smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg")
                ;; ;; smtpmail-default-smtp-server only has effect if you specify it
                ;; ;; before loading the smtpmail library.
                ;; smtpmail-default-smtp-server "smtp.gmail.com"
                smtpmail-smtp-server "smtp.gmail.com"
                smtpmail-smtp-service 465
                smtpmail-stream-type 'ssl
                ;; smtpmail-debug-info t
                )
          ;; SMTP Queue
          (setq smtpmail-queue-mail  nil  ;; start in non-queuing mode
                smtpmail-queue-dir   "~/Maildir/queue/cur")
          )


        ;; (require 'smtpmail)
        ;; (setq message-send-mail-function 'smtpmail-send-it
        ;;       starttls-use-gnutls t
        ;;       ;; smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
        ;;       smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg")
        ;;       ;; ;; smtpmail-default-smtp-server only has effect if you specify it
        ;;       ;; ;; before loading the smtpmail library.
        ;;       ;; smtpmail-default-smtp-server "smtp.gmail.com"
        ;;       smtpmail-smtp-server "smtp.gmail.com"
        ;;       smtpmail-smtp-service 465
        ;;       smtpmail-stream-type 'ssl
        ;;       ;; smtpmail-debug-info t
        ;;       )  ;; 'starttls or ssl
      #+end_src
***** SMTP Queue
      #+begin_src emacs-lisp
        ;; (setq smtpmail-queue-mail  nil  ;; start in non-queuing mode
        ;;       smtpmail-queue-dir   "~/Maildir/queue/cur")
      #+end_src
***** Configure my multiple accounts
      http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html

      Create the variable my-mu4e-account-alist, which should contain a
      list for each of my accounts. Each list should start with the account
      name, (which must be identical to the account's directory name under
      ~/Maildir), followed by (variable value) pairs:

      I only need to put in the my-mu4e-account-alist variable values that
      differ in the multiple accounts.
      #+begin_src emacs-lisp
        (defvar my-default-mu4e-sent-folder nil)
        (defvar my-default-mu4e-drafts-folder nil)
        (defvar my-default-mu4e-trash-folder nil)

        (defvar my-mu4e-account-alist
          '(("Gmail"
             (my-default-mu4e-sent-folder "/Gmail/[Gmail].E-mails enviados")
             (my-default-mu4e-drafts-folder "/Gmail/[Gmail].Rascunhos")
             (my-default-mu4e-trash-folder "/Gmail/[Gmail].Lixeira")
             ;; (mu4e-sent-folder "/Gmail/[Gmail].E-mails enviados")
             ;; (mu4e-drafts-folder "/Gmail/[Gmail].Rascunhos")
             ;; (mu4e-trash-folder  "/Gmail/[Gmail].Lixeira")
             (user-mail-address "darcamo@gmail.com")
             (message-signature-file "~/.signature")  ;; ".Signature1.txt"
             (smtpmail-smtp-user "darcamo@gmail.com")
             ;; (smtpmail-default-smtp-server "smtp.gmail.com")
             ;;(smtpmail-local-domain "account1.tld")
             ;; (smtpmail-smtp-server "smtp.gmail.com")
             ;; (smtpmail-stream-type 'ssl)
             ;; (smtpmail-smtp-service 465)
             )
            ("Gtel"
             (my-default-mu4e-sent-folder "/Gtel/[Gmail].E-mails enviados")
             (my-default-mu4e-drafts-folder "/Gtel/[Gmail].Rascunhos")
             (my-default-mu4e-trash-folder "/Gtel/[Gmail].Lixeira")
             ;; (mu4e-sent-folder "/Gtel/[Gmail].E-mails enviados")
             ;; (mu4e-drafts-folder "/Gtel/[Gmail].Rascunhos")
             ;; (mu4e-trash-folder  "/Gtel/[Gmail].Lixeira")
             (user-mail-address "darlan@gtel.ufc.br")
             (message-signature-file "~/.signature_gtel") ;; .Signature2.txt
             (smtpmail-smtp-user "darlan@gtel.ufc.br")
             ;; (smtpmail-default-smtp-server "smtp.gmail.com")
             ;; (smtpmail-local-domain "account2.tld")
             ;; (smtpmail-smtp-server "smtp.gmail.com")
             ;; (smtpmail-stream-type 'ssl)
             ;; (smtpmail-smtp-service 465)
             )
            ))

        ;; Function to select the account.
        (defun my-mu4e-set-account ()
          "Set the account for composing a message."
          (let* ((account
                  (if mu4e-compose-parent-message
                      (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                        (string-match "/\\(.*?\\)/" maildir)
                        (match-string 1 maildir))
                    (completing-read (format "Compose with account: (%s) "
                                             (mapconcat #'(lambda (var) (car var)) my-mu4e-account-alist "/"))
                                     (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                                     nil t nil nil (caar my-mu4e-account-alist))))
                 (account-vars (cdr (assoc account my-mu4e-account-alist))))
            (if account-vars
                (mapc #'(lambda (var)
                          (set (car var) (cadr var)))
                      account-vars)
              (error "No email account found"))))

        ;; When composing a new message it will ask which account to use
        (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)

        ;; Dynamic folders
        (setq mu4e-trash-folder
              (lambda (msg)
                (if (and msg)
                    (cond
                     ((string-match "Gtel" (mu4e-message-field msg :maildir)) "/Gtel/[Gmail].Lixeira")
                     ((string-match "Gmail" (mu4e-message-field msg :maildir)) "/Gmail/[Gmail].Lixeira")
                     )
                  my-default-mu4e-trash-folder
                  )
                ))

        (setq mu4e-sent-folder
              (lambda (msg)
                (if (and msg)
                    (cond
                     ((string-match "Gtel" (mu4e-message-field msg :maildir)) "/Gtel/[Gmail].E-mails enviados")
                     ((string-match "Gmail" (mu4e-message-field msg :maildir)) "/Gmail/[Gmail].E-mails enviados")
                     )
                  my-default-mu4e-sent-folder
                  )
                ))

        (setq mu4e-drafts-folder
              (lambda (msg)
                (if (and msg)
                    (cond
                     ((string-match "Gtel" (mu4e-message-field msg :maildir)) "/Gtel/[Gmail].Rascunhos")
                     ((string-match "Gmail" (mu4e-message-field msg :maildir)) "/Gmail/[Gmail].Rascunhos")
                     )
                  my-default-mu4e-drafts-folder
                  )
                ))
      #+end_src

***** View images inline
      #+begin_src emacs-lisp
        ;; enable inline images
        (setq mu4e-view-show-images t)
        ;; use imagemagick, if available
        (when (fboundp 'imagemagick-register-types)
          (imagemagick-register-types))
      #+end_src
***** Actions
      #+begin_src emacs-lisp
        ;; View a mensage in the browser
        (add-to-list 'mu4e-headers-actions
                     '("View in Browser" . mu4e-action-view-in-browser) t)
      #+end_src
***** Queue mail
      See [[info:mu4e#Queuing%20mail][info:mu4e#Queuing mail]]
***** Search
      #+begin_src emacs-lisp
        ;; You can toggle this with V in the headers view
        (setq mu4e-headers-skip-duplicates t)

        ;; You can toggle this with W in the headers view
        (setq mu4e-headers-include-related t)
      #+end_src
***** View HTML mail                                             :HTML:Markdown:
      #+begin_src emacs-lisp
        ;; I prefer to see ascii if available.
        (setq mu4e-view-prefer-html nil)

        ;; When only HTML is available, use the python program "html2markdown" to
        ;; convert the HTML code to markdown, which is easier to read.
        (setq mu4e-html2text-command "html2markdown")
      #+end_src
***** Integration with other programs
******* Org-mode links
        #+begin_src emacs-lisp
          ;; Create org-mode links. After this, you can use the normal org-mode
          ;; mechanisms to store links: `M-x org-store-link' stores a link to a
          ;; particular message when you're in *note Message view, and a link to a
          ;; query when you are in *note Headers view.
          (require 'org-mu4e)
        #+end_src
******* Write messages in org-mode
        See [[info:mu4e#Rich-text%20messages%20with%20org-mode][info:mu4e#Rich-text messages with org-mode]]

        See http://www.brool.com/index.php/using-mu4e

        ;; convert org mode to HTML automatically
        (setq org-mu4e-convert-to-html t)

***** use-package - END
      #+begin_src emacs-lisp
        )
      #+end_src
* pdf-tools                                                           :PDFTools:
  [[https://github.com/politza/pdf-tools][PDF-tools]] is a great Emacs package that renders PDF files inside Emacs
  using poppler. That means that searsh works, links works, etc.

  Some useful keybindings:
  + H -> fit to height
  + W -> fit to width
  + P -> Fit to page
  + o -> PDF outline
  + Q -> kill the buffer
  + + -> increase zoom
  + - -> decrease zoom
  + M-g M-g -> go to page
  + n, p -> next/previous page
  + g,r -> revert buffer
  + h -> describe mode
  + 0 -> scale reset
  + <, > -> Beginning/end of the page

  Note that ispell works, although you can't change the PDF file. This can
  be useful for PDFs generated from Latex.

  It also shows annotations.
*** Installation Notes
    Unfortunately the package is not available through elpa. I had to
    installed manually as instructed in the github page. As a dependency
    first I had to install the [[https://github.com/politza/tablist][tablist]] package (from the same author).

    After compiling the package I installed it with M-x
    "package-install-file" and the compiled package location.

*** Package activation
    #+begin_src emacs-lisp
      (use-package pdf-tools
        ;; :ensure t
        :config
        (pdf-tools-install)
        )
    #+end_src
* Org-Trello
  #+begin_src emacs-lisp
    (use-package org-trello
      :ensure t
      :config
      (setq org-trello-files '("/home/darlan/Muse/org/contas_no_trello.org"))
      )
  #+end_src
* bbyac                                                                  :BBYAC:
  https://github.com/baohaojun/bbyac/

  Instaled through elpa

  Activates the global bbyac mode. To use it, type a little bit and press
  =M-g <return>= to complete a word or =M-s <return>= to complete an
  arbitrary string.
  #+begin_src emacs-lisp
    (use-package bbyac
      :ensure t
      :config
      (bbyac-global-mode 1)
      )
  #+end_src

*** USAGE
    Type a little bit and press "M-g <return>" to complete a word or 
    "M-s <return>" to complete an arbitrary string.

* Markdown Mode                                                  :HTML:Markdown:
*** use-package - START
    #+begin_src emacs-lisp
      (use-package markdown-mode
        :ensure t
        :config
    #+end_src
*** Use pandoc to convert markdown to html
    #+begin_src emacs-lisp
      ;; Use pandoc to convert from markdown. We also enable mathjax and citation
      ;; support
      (setq markdown-command "pandoc -s -S -f markdown+abbreviations --mathjax --filter pandoc-citeproc")
    #+end_src
*** Add '.md' to auto-mode-alist
    Make file ending in '.md' use markdown-mode. Note that you need to
    install markdown-mode from elpa.
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    #+end_src

*** Define Useful functions
    #+begin_src emacs-lisp
      ;; Function defition stolen from
      ;; http://ergoemacs.org/emacs/emacs_html_insert_tags.html
      (defun darlan/wrap-html-tag (tagName)
        "Add a tag to beginning and ending of current word or text selection."
        (interactive "sEnter tag name: ")
        (let (p1 p2 inputText)
          (if (use-region-p)
              (progn
                (setq p1 (region-beginning) )
                (setq p2 (region-end) )
                )
            (let ((bds (bounds-of-thing-at-point 'symbol)))
              (setq p1 (car bds) )
              (setq p2 (cdr bds) ) ) )

          (goto-char p2)
          (insert "</" tagName ">")
          (goto-char p1)
          (insert "<" tagName ">")
          ))


      (defun darlan/wrap-kbd-html-tag (beg end)
        "Wrap the region with the 'kbd' html tag."
        (interactive "r")
        (darlan/wrap-html-tag "kbd")
        )
    #+end_src
*** Keybindings
    #+begin_src emacs-lisp
      (bind-key [f5] 'darlan/wrap-html-tag markdown-mode-map)
      (bind-key [C-f5] 'darlan/wrap-kbd-html-tag markdown-mode-map)
      (bind-key [C-f9] 'darlan/my-markdown-compile markdown-mode-map)
      (bind-key [M-f9] 'darlan/view-markdown-html-file markdown-mode-map)
    #+end_src
*** Use outline-minor-mode
    #+begin_src emacs-lisp
      (add-hook 'markdown-mode-hook
                (lambda ()
                  (outline-minor-mode t)
                  ))
    #+end_src
*** Enable math
    #+begin_src emacs-lisp
      (setq markdown-enable-math t)
    #+end_src
*** Compile file with C-F9
    Here we assume you have a makefile. For a markdown file called
    =myfile.md= we will simply call =make myfile.html=
    
    #+begin_src emacs-lisp
      (defun darlan/my-markdown-compile ()
        (interactive)
        (let (filename)
          (setq filename (concat
                          (file-name-sans-extension (file-name-nondirectory buffer-file-name))
                          ".html"))
          ;; Save the buffer and compile
          (save-buffer 0)
          ;; Compile by passing the target to the Make program
          (compile (concat "make " filename))
          ))


      (defun darlan/view-markdown-html-file ()
        (interactive)
        (let (filename)
          (setq filename (concat
                          (file-name-sans-extension (file-name-nondirectory buffer-file-name))
                          ".html"))

          ;; Compile by passing the target to the Make program
          (browse-url filename)
          )
        )
    #+end_src

*** use-package - END
    #+begin_src emacs-lisp
      )
    #+end_src
* SSH                                                                      :SSH:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx SSH xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

*** Major mode for editing the .ssh/config file
    #+begin_src emacs-lisp
      (autoload 'ssh-config-mode "ssh-config-mode" t)
      (add-to-list 'auto-mode-alist '(".ssh/config\\'"  . ssh-config-mode))
      (add-to-list 'auto-mode-alist '("sshd?_config\\'" . ssh-config-mode))
      (add-hook 'ssh-config-mode-hook 'turn-on-font-lock)
    #+end_src

*** cssh
    Melhor que o ssh.el

    http://www.emacswiki.org/emacs/ClusterSSH

    Atalhos:
    - "C-=" (control igual) -> cssh-term-remote-open
    - "C-M-=" (control alt igual) -> cssh-regexp-host-start
* COMMENT Music
  :PROPERTIES:
  :TANGlE:   no
  :END:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Music xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
*** Mingus
    #+begin_src emacs-lisp
      (autoload 'mingus "mingus.el" nil t)

      (with-eval-after-load "mingus"
        ;; I use the MPD daemon with a system wide configuration.
        (setq mingus-mpd-config-file "/etc/mpd.conf")

        ;; Set the MPD root folder (useful so that "0" in Mingus can open dired in
        ;; the folder of the currently selected track)
        (setq mingus-mpd-root "/var/lib/mpd/music/")

        ;; Use IDO-mode when searching (with the mingus-search function) --> Excelent
        (setq mingus-use-ido-mode-p t)
        )
    #+end_src
*** MPC - Music Player Daemon                                         :MPC:Hook:
    #+begin_src emacs-lisp
      ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ;; xxxxxxxxxxxxxxx MPC - Music Player Daemon xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    #+end_src

    Note that you need to install the MPD (Music Player Daemon) and configure
    it so see your music imn order to use this.

    It's usefull to also install mpdscribble in order to scrobble tracks to Last.Fm.

    #+begin_src emacs-lisp
      (defun my-mpc-mode-hook ()
        (local-set-key "C" 'mpc-playlist-create)
        (local-set-key "a" 'mpc-playlist-add)
        (local-set-key "d" 'mpc-playlist-delete)
        ;;(local-set-key [DEL] 'mpc-playlist-delete)
        (local-set-key "C" 'mpc-playlist-create)
        (local-set-key "R" 'mpc-playlist-rename)
        (local-set-key "D" 'mpc-playlist-destroy)
        (local-set-key "P" 'mpc-play)
        )

      (add-hook 'mpc-mode-hook 'my-mpc-mode-hook)
    #+end_src
* COMMENT Workgroups2: Window configuration (windows, buffers, etc) :Workgroups:
  :PROPERTIES:
  :TANGlE:   no
  :END:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxx Workgroups2 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

  #+begin_src emacs-lisp
    ;; This will require the workgroups2 library and then execute the rest of
    ;; the code if workgroups is installed.
    (use-package workgroups2
      :ensure t
      :diminish workgroups-mode
      :config
      ;; Change some settings

      (setq wg-default-session-file "~/.emacs.d/.emacs_workgroups")

      ;; Change prefix key (This needs to be done before activating WG)
      (setq wg-prefix-key (kbd "C-c w"))

      ;; I don't want workgroups to be automatically saved when exiting
      ;; Emacs. Only when I manually save them.
      ;;(setq wg-emacs-exit-save-behavior nil)

      ;; The default is 't', which means emacs will load the last workgroup
      ;; when started. I prefer that it loads the first one, for which I
      ;; usually keep only the scratch buffer
      (setq wg-load-last-workgroup nil)

      ;; Does nothing when exiting emacs. Set to 'ask' or 'save' if you prefer.
      (setq wg-workgroups-mode-exit-save-behavior 'nil)

      (workgroups-mode 1))
  #+end_src
* Helm                                                                :HelmMode:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Helm xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src


  Helm shortcuts start with "C-x c". Use "C-x c C-h" to see them.
*** use-package START
    #+begin_src
    (use-package helm
        :ensure t
        :config
        (helm-config)
    #+end_src
*** Activates helm-mode
    #+begin_src emacs-lisp
      ;; Activates helm-mode. This will use helm for things suck as switching
      ;; buffers, finding files, etc.
      (helm-mode 1)

      ;; (loop for ext in '("\\.swf$" "\\.elc$" "\\.pyc$")
      ;;       do (add-to-list 'helm-boring-file-regexp-list ext))
    #+end_src
*** Keybindings                                                    :Keybindings:
    #+begin_src emacs-lisp
      ;; Preconfigured `helm' lightweight version (buffer -> recentf).
      (global-set-key (kbd "C-c h") 'helm-mini)

      ;; Note that the default keybind can also be used, which is "C-x c i"
      (global-set-key (kbd "M-i") 'helm-semantic-or-imenu)
      (global-set-key (kbd "M-I") 'imenu)  ;; Use Alt+Shift+i for standard imenu

      ;; If we don't set this, the standard execute-extended-command normally
      ;; bound to M-x in Emacs will use Helm to choose the command. However,
      ;; Helm's own implementation is better because it shows the keybindings of
      ;; the commands as well as having a history of previously used commands.
      (global-set-key [(meta x)] 'helm-M-x)

      ;; If we don't set this, the standard find-file will use Helm to choose the
      ;; file. However, Helm's own implementation of find-file is better and has
      ;; more actions beyond simple visiting the file.
      (global-set-key (kbd "C-x C-f") 'helm-find-files)

      ;; If we don't set this, the standard switch-to-buffer will use Helm to
      ;; choose the buffer. However, Helm's own implementation is better and has
      ;; more actions beyond simple switching to the buffer.
      (global-set-key (kbd "C-x b") 'helm-buffers-list)

      ;; Use helm-bookmarks instead of default bookmark-bmenu-list
      (global-set-key (kbd "C-x r l") 'helm-bookmarks)
    #+end_src
*** Usage Tips
    - Use right and left keys in helm buffers (or C-z and C-l) to navigate
      one level forward or backward.
    - Use TAB key to choose one of the available actions.
      + Take advantage of the second, third and 4th actions in
        helm. Instead of opening action menu with TAB, just hit: 
        : C-e for 2th action 
        : C-j for 3th action
    - Use "C-t" (during helm) to alternate the helm window location
      + Use also "C-}" and "C-{" no narrow/enlarge helm window.
    - Set the global keybing of find-file to helm-find-files
      - It has more actions
      - The second action is to open in dired. Remember that you can use
        "C-e" for the second action.    
    - Helm shortcuts start with "C-x c"
      - Ex: helm-locate is "C-x c l"
      - Ex: helm-buffers-list is "C-x c C-x C-b"
      - Ex: helm-google-suggest is "C-x c C-c g"
        

***** helm-find-files tips (Learn these!)
      All of these tips can be used DURING helm-find-files

    - Use "C-c C-x" in a file to open it in an external program
    - Use "C-x C-f" to run locate in the current directory
    - Use "C-s" to run grep -> Excelent: this will show files in the
      current directory that match the grep search
    - Use "M-i" to see file properties (permissions, owner, etc)

      
    - Use "C-c ?" to open the help and learn the interesting commands

*** helm-swoop
    https://github.com/ShingoFukuyama/helm-swoop

    I didn't want to set up keybindings for helm-swoop. In order to use it
    you can do "M-x helm-swoop", but in my opinion the best way to use it
    is from isearch.

    Use "C-s" and search for something as usual with isearch. Then *during*
    isearch use "M-i" to activate helm-swoop. Note that in helm-swoop you
    can use "C-c C-e" to edit the matches.
    
    #+begin_src emacs-lisp
      (use-package helm-swoop
        :ensure t
      )
    #+end_src

*** helm-bibtex                                                         :Bibtex:
    https://github.com/tmalsburg/helm-bibtex
    #+begin_src emacs-lisp
      (use-package helm-bibtex
        :ensure t
        :config
        ;; Set the location of the bibtex file(s). This is a list of file locations
        ;; and you can specify more than one file
        (setq helm-bibtex-bibliography '("~/cvs_files/ufc42docs/Bib_files/UFC42_References.bib"))

        ;; ;; Set the location of the PDF file(s). This is a list of file locations
        ;; ;; and you can specify more than one folder
        ;; (setq helm-bibtex-library-path '("/path1/to/pdfs" "/path2/to/pdfs"))


        ;; ;; Location of the notes that you write for each paper
        ;; (setq helm-bibtex-notes-path "/path/to/notes")
        ;; (setq helm-bibtex-notes-extension ".org")
        )
    #+end_src
    
*** use-package END
    #+begin_src
    )
    #+end_src
* Projectile                                                :Projectile:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Projectile xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

  TODO: Test persp-projectile package

  Learn how to use projectile.

  The concept of a project is pretty basic - just a folder containing
  special file. Currently git, mercurial and bazaar repos are considered
  projects by default. If you want to mark a folder manually as a project
  just create an empty .projectile file in it.
  http://stackoverflow.com/questions/9656096/emacs-how-can-i-find-a-file-in-my-project-quickly


  Here's a list of the interactive Emacs Lisp functions, provided by projectile:
  Keybinding 	Description
  C-c p f 	Display a list of all files in the project. With a prefix argument it will clear the cache first.
  C-c p d 	Display a list of all directories in the project. With a prefix argument it will clear the cache first.
  C-c p T 	Display a list of all test files(specs, features, etc) in the project.
  C-c p l 	Display a list of all files in a directory (that's not necessarily a project)
  C-c p g 	Run grep on the files in the project.
  C-c p b 	Display a list of all project buffers currently open.
  C-c p o 	Runs multi-occur on all project buffers currently open.
  C-c p r 	Runs interactive query-replace on all files in the projects.
  C-c p i 	Invalidates the project cache (if existing).
  C-c p R 	Regenerates the projects TAGS file.
  C-c p k 	Kills all project buffers.
  C-c p D 	Opens the root of the project in dired.
  C-c p e 	Shows a list of recently visited project files.
  C-c p a 	Runs ack on the project. Requires the presence of ack-and-a-half.
  C-c p c 	Runs a standard compilation command for your type of project.
  C-c p p 	Runs a standard test command for your type of project.
  C-c p z 	Adds the currently visited to the cache.
  C-c p s 	Display a list of known projects you can switch to.

  If you ever forget any of Projectile's keybindings just do a:

  C-c p C-h

*** use-package - START
    #+begin_src emacs-lisp
      (use-package projectile
        :ensure t
        :config
        (projectile-global-mode)
    #+end_src
*** Configuration
    #+begin_src emacs-lisp
      ;; Alian method is used by default in non-windows systems
      ;; (setq projectile-indexing-method 'alien)
      ;; (setq projectile-indexing-method 'native)


      ;; The caching is enabled by default whenever native indexing is
      ;; enabled. To enable caching unconditionally set projectile-enable-caching
      ;; to t.
      ;; (setq projectile-enable-caching t)

      (setq projectile-tags-command "ctags-exuberant -Re %s")

      ;;(setq projectile-python-test-cmd "nosetests")
    #+end_src
*** helm                                                              :HelmMode:
    The package helm-projectile provides integration with helm.
    Use the keybing "C-c p h"

    #+begin_src emacs-lisp
      ;; Use the default completion mechanism

      ;; Since we use helm mode everywhere, lets change the completion mode to
      ;; default so that helm is used
      (setq projectile-completion-system 'default)
    #+end_src
*** use-package - END
    #+begin_src emacs-lisp
      )
    #+end_src
* Diminish                                  :Diminish:Doxymacs:Reftex:Yasnippet:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Diminish xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src
  #+begin_src emacs-lisp
    (with-library 'diminish
        ;; (with-eval-after-load "doxymacs"
        ;;   (diminish 'doxymacs-mode))

        (with-eval-after-load "reftex"
          (diminish 'reftex-mode))

        (with-eval-after-load "undo-tree"
          (diminish 'undo-tree-mode))

        ;; (with-eval-after-load "yasnippet"
        ;;   (diminish 'yas-minor-mode))

        (with-eval-after-load "eldoc"
          (diminish 'eldoc-mode))

        (with-eval-after-load "auto-complete"
          (diminish 'auto-complete-mode))

        ;; (with-eval-after-load "company"
        ;;   (diminish 'company-mode))

        (with-eval-after-load "abbrev"
          (diminish 'abbrev-mode))

        (with-eval-after-load "projectile"
          (diminish 'projectile-mode))

        (with-eval-after-load "helm"
          (diminish 'helm-mode))

        ;; (with-eval-after-load "workgroups2"
        ;;   (diminish 'workgroups-mode))

        (with-eval-after-load "outline"
          (diminish 'outline-minor-mode))

        (with-eval-after-load "python-cell"
          (diminish 'python-cell-mode))

         ;; (with-eval-after-load "flymake"
         ;;  (diminish 'flymake-mode))

         (with-eval-after-load "autorevert"
          (diminish 'auto-revert-mode))

         ;; (with-eval-after-load "hi-lock"
         ;;  (diminish 'hi-lock-mode))

         ;;(with-eval-after-load "highlight-symbol"
          ;; (diminish 'highlight-symbol-mode))

         (with-eval-after-load "bbyac"
           (diminish 'bbyac-mode))

         (with-eval-after-load "indent-guide"
           (diminish 'indent-guide-mode))

         (with-eval-after-load "helm"
           (diminish 'helm-mode))

         (with-eval-after-load "anaconda-mode"
           (diminish 'anaconda-mode " 🐍"))

         (with-eval-after-load "page-break-lines"
           (diminish 'page-break-lines-mode))

         ;; which-key mode show further keybindings when a prefix key is typed
         (with-eval-after-load "which-key"
           (diminish 'which-key-mode " 🖮")))
  #+end_src
* Paradox Package Manager
  #+begin_src emacs-lisp
  ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  ;; xxxxxxxxxxxxxxx Paradox Package Manager xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

  O pacote paradox fornece o comando 'paradox-list-packages', que é similar
  ao comando do emacs 'list-packages', mas com algumas coisinhas a mais.
  #+begin_src emacs-lisp
    ;; Set the variable 'paradox-github-token' with a Github Token with
    ;; permission to access public repositories. This allows you to star/unstar
    ;; projects from the paradox list of packages.
    ;; Use the command below
    ;;    (setq paradox-github-token "GITHUB TOKEN")

    ;; To avoid putting my github token here, I save it in the
    ;; my-padadox-github-token.el.gpg file and load that file here, which
    ;; simply do the 'setq stuff'
    ;;
    ;; Note that I have disabled reading gpg files during emacs initialization
    ;; to increese initialization time. Thus, we run this in after-init-hook
    (add-hook 'after-init-hook
              '(lambda ()
                 (load-file "~/.emacs.d/my-padadox-github-token.el.gpg")
                 ))
  #+end_src
* Themes                                                                :Themes:
  #+begin_src emacs-lisp
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxx Themes xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  #+end_src

*** Load and enable my prefered theme (installed with the emacs package system)
    #+begin_src emacs-lisp
      ;;(load-theme 'naquadah t)
      ;; (load-theme 'badger t)
      ;;(load-theme 'deeper-blue t)
      ;; (load-theme 'base16-chalk t)

      ;;(load-theme 'base16-chalk-dark t)

      (use-package base16-theme
        :ensure t
        :init
        (load-theme 'base16-chalk-dark t))
    #+end_src

* smart-mode-line
  #+begin_src emacs-lisp
    (use-package smart-mode-line
      :ensure t
      :config
  
      (setq sml/theme 'dark)
      (sml/setup)

      ;; Short string replacement for my Dropbox folder
      (add-to-list 'sml/replacer-regexp-list '("^/mnt/LinuxData/darlan/Dropbox/" ":DB:") t)

      ;; Short string replacement for other interesting folders
      (add-to-list 'sml/replacer-regexp-list '("^/mnt/LinuxData/darlan/" ":mntDarlan:") t)
      (add-to-list 'sml/replacer-regexp-list '("^:mntDarlan:cvs_files/" ":CVS:") t)
      (add-to-list 'sml/replacer-regexp-list '("^~/cvs_files/" ":CVS:") t)

      ;; Short string replacement for the UFC42 folders
      (add-to-list 'sml/replacer-regexp-list '("^:CVS:ufc42docs/" ":UFC42DOCS:") t)
      (add-to-list 'sml/replacer-regexp-list '("^:CVS:ufc42sims/" ":UFC42SIMS:") t)
      (add-to-list 'sml/replacer-regexp-list '("^:UFC42DOCS:Reports/TR0\\([1-9]\\)" ":TR0\\1:") t)
      (add-to-list 'sml/replacer-regexp-list '("^:UFC42SIMS:MATLAB/wp3sims/" ":WP3SIMS:") t)
      )
  #+end_src
* COMMENT Writegood-mode
  :PROPERTIES:
  :TANGlE:   no
  :END:
  This writegood package provides a minor-mode that polishs up poor writing
  on the fly by highlighting poor sentences. The problems it highlights
  are:
  - duplicated words
  - passive voice
  - use of weasel words
  
    
  We will activate writegood minor mode in markdown and latex buffers.
  #+begin_src emacs-lisp
    (add-hook 'markdown-mode-hook
              (lambda ()
                (writegood-mode t)
                ))


    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (writegood-mode t)
                ))
  #+end_src
* Connecting to Databases in emacs
  Use the *edbi* package installed throgh elpa.
  https://github.com/kiwanami/emacs-edbi
  
  You also installed edbi-sqlite so that you can open sqlite files with
  edbi. For that call "edbi-sqlite".
*** Company-mode backend in the query editor
    Install company-edbi package for this to work.

    #+begin_src emacs-lisp
      (with-eval-after-load "company"
        (add-to-list 'company-backends 'company-edbi)
        )
    #+end_src
* Org-File Setup                                                      :noexport:
#+STARTUP: odd
#+OPTIONS: toc:nil
#+OPTIONS: ^:{}
#+STARTUP: hidestars

